/******/

// webpackBootstrap

// The module cache

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// Return the exports of the module

// Execute the module function

// Flag the module as loaded

// expose the modules object (__webpack_modules__)

// expose the module cache

// define getter function for harmony exports

// define __esModule on exports

// create a fake namespace object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// getDefaultExport function for compatibility with non-harmony modules

// Object.prototype.hasOwnProperty.call

// __webpack_public_path__

/************************************************************************/

/* 0 */

/***/

/* 1 */

// By explicitly using `prop-types` you are opting into new production behavior.

// http://fb.me/prop-types-in-prod

/* 2 */

// contains in native

// export native or passed

// bind timers to global for call from export context

// extend global

// export

// type bitmap

// forced

// global

// static

// proto

// bind

// wrap

// safe

// real proto method for `library`

/* 3 */

/* 4 */

/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/

/* global define */

/* 5 */

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028

// eslint-disable-line no-undef

/* 6 */

/* 7 */

/* 8 */

/* 9 */

/* 10 */

// 7.1.15 ToLength

// pow(2, 53) - 1 == 9007199254740991

/* 11 */

/* 12 */

// Thank's IE8 for his funny defineProperty

/* 13 */

/* empty */

/* 14 */

/* WEBPACK VAR INJECTION */

/**
          * @ag-grid-community/all-modules - Advanced Data Grid / Data Table supporting Javascript / Typescript / React / Angular / Vue * @version v31.0.3
          * @link https://www.ag-grid.com/
          * @license MIT
          */

/**
 * If value is undefined, null or blank, returns null, otherwise returns the value
 * @param {T} value
 * @returns {T | null}
 */

// for parsing html attributes, where we want empty strings and missing attributes to be undefined

/* harmony export (binding) */

/*#__PURE__*/

// this is for aggregations sum and avg, where the result can be a number that is wrapped.

// if we didn't do this, then the toString() value would be used, which would result in

// the strings getting used instead of the numbers.

// using local compare also allows chinese comparisons

// if something wrong with localeCompare, eg not supported

// by browser, then just continue with the quick one

// in case user passed in number for colId, convert to string

// no point in stringing this, object treats it the same anyway.

// class returns a unique id to use for the column. it checks the existing columns, and if the requested

// returns copy of an object, doing a deep clone of any objects with that object.

// this is used for eg creating copies of Column Definitions, where we want to

// deep copy all objects, but do not want to deep copy functions (eg when user provides

// a function or class for colDef.cellRenderer)

/**
 * Will copy the specified properties from `source` into the equivalent properties on `target`, ignoring properties with
 * a value of `undefined`.
 */

/**
 * Will copy the specified property from `source` into the equivalent property on `target`, unless the property has a
 * value of `undefined`. If a transformation is provided, it will be applied to the value before being set on `target`.
 */

// when creating params, we don't want to just copy objects over. otherwise merging ColDefs (eg DefaultColDef

// and Column Types) would result in params getting shared between objects.

// by putting an empty value into destValue first, it means we end up copying over values from

// the source object, rather than just copying in the source object in it's entirety.

// if no '.', then it's not a deep value

// otherwise it is a deep value, so need to dig for it

// used by GridAPI to remove all references, so keeping grid in memory resulting in a

// memory leak if user is not disposing of the GridAPI references

// we want to replace all the @autowired services, which are objects. any simple types (boolean, string etc)

// we don't care about

// leave all basic types and preserveKeys this is needed for GridAPI to leave the "destroyed: boolean" attribute and isDestroyed() function.

// Create empty objects

/**
 * If the key was passed before, then doesn't execute the func
 * @param {Function} func
 * @param {string} key
 */

// for every other browser in the world

// for the pestilence that is ie11

/**
 * @param {Function} func The function to be debounced
 * @param {number} delay The time in ms to debounce
 * @return {Function} The debounced function
 */

// Calling debounce returns a new anonymous function

// Set the new timeout

/**
 * @param {Function} func The function to be throttled
 * @param {number} wait The time in ms to throttle
 * @return {Function} The throttled function
 */

// community modules

// enterprise core - users don't need to import on this, but other enterprise modules do

// enterprise modules

// framework wrappers currently don't provide beans, comps etc, so no need to be modules,

// however i argue they should be as in theory they 'could' provide beans etc

/**
     * Globally register the given module for all grids.
     * @param module - module to register
     */

/**
     * Globally register the given modules for all grids.
     * @param modules - modules to register
     */

/** AG GRID INTERNAL - Module registration helper. */

/** AG GRID INTERNAL - Unregister grid scoped module. */

/**
     * AG GRID INTERNAL - Set if files are being served from a single UMD bundle to provide accurate enterprise upgrade steps.
     */

/** AG GRID INTERNAL - Assert a given module has been register, globally or individually with this grid. */

/** AG GRID INTERNAL - Is the given module registered, globally or individually with this grid. */

/** AG GRID INTERNAL - Get all registered modules globally / individually for this grid. */

/** AG GRID INTERNAL - Get the list of modules registered individually for this grid. */

/** INTERNAL */

// having in a map a) removes duplicates and b) allows fast lookup

// the callback sets the attributes, so the component has access to attributes

// before postConstruct methods in the component are executed

// register all normal beans

// register override beans, these will overwrite beans above of same name

// instantiate all beans - overridden beans will be left out

// tslint:disable-next-line

// skip constructor, as this is dealt with elsewhere

// putting all methods into a map removes duplicates

// dump methods from each level of the metadata hierarchy

// Set before doing the destroy, so if context.destroy() gets called via another bean

// we are marked as destroyed already to prevent running destroy() twice

// because this class is used both inside the context and outside the context, we do not

// use autowired attributes, as that would be confusing, as sometimes the attributes

// would be wired, and sometimes not.

//

// the global event servers used by AG Grid is autowired by the context once, and this

// setBeans method gets called once.

// the times when this class is used outside of the context (eg RowNode has an instance of this

// class) then it is not a bean, and this setBeans method is not called.

// Note: 'autoCreateListenerCollection' should only be 'true' if a listener is about to be added. For instance

// getListeners() is also called during event dispatch even though no listeners are added. This measure protects

// against 'memory bloat' as empty collections will prevent the RowNode's event service from being removed after

// the RowComp is destroyed, see noRegisteredListenersExist() below.

// Apply common properties to all dispatched events if this event service has had its beans set with gridOptionsService.

// Note there are multiple instances of EventService that are used local to components which do not set gridOptionsService.

// AG-7893 - Persist composedPath() so that its result can still be accessed by the user asynchronously.

// Within an async event handler if they call composedPath() on the event it will always return an empty [].

// this gets called inside the grid's thread, for each event that it

// wants to set async. the grid then batches the events into one setTimeout()

// because setTimeout() is an expensive operation. ideally we would have

// each event in it's own setTimeout(), but we batch for performance.

// add to the queue for executing later in the next VM turn

// check if timeout is already scheduled. the first time the grid calls

// this within it's thread turn, this should be false, so it will schedule

// the 'flush queue' method the first time it comes here. then the flag is

// set to 'true' so it will know it's already scheduled for subsequent calls.

// if not scheduled, schedule one

// mark that it is scheduled

// this happens in the next VM turn only, and empties the queue of events

// we take a copy, because the event listener could be using

// the grid, which would cause more events, which would be potentially

// added to the queue, so safe to take a copy, the new events will

// get executed in a later VM turn rather than risk updating the

// queue as we are flushing it.

// execute the queue

// using an object performs better than a Set for the number of different events we have

// Map from user listener to wrapped listener so we can remove listener provided by user

// Wrapper around a user provide column definition. The grid treats the column definition as ready only.

// This class contains all the runtime information about a column, plus some logic (the definition has no logic).

// This class implements both interfaces ColumnGroupChild and ProvidedColumnGroupChild as the class can

// appear as a child of either the original tree or the displayed tree. However the relevant group classes

// for each type only implements one, as each group can only appear in it's associated tree (eg ProvidedColumnGroup

// can only appear in OriginalColumn tree).

// sort

// sortIndex

// pinned

// gets called when user provides an alternative colDef, eg

/**
     * Returns the column definition provided by the application.
     * This may not be correct, as items can be superseded by default column options.
     * However it's useful for comparison, eg to know which application column definition matches that column.
     */

/** Returns the parent column group, if column grouping is active. */

/**
     * Used for marryChildren, helps with comparing when duplicate groups have been created to manage split groups.
     *
     * Parent may contain a duplicate but not identical group when the group is split.
     */

// this is done after constructor as it uses gridOptionsService

/** Returns `true` if column is a primary column, `false` if secondary. Secondary columns are used for pivoting. */

/** Returns `true` if column filtering is allowed. */

/** Add an event listener to the column. */

// Only construct if we need it, as it's an overhead for column construction

/** Remove event listener from the column. */

// if boolean set, then just use it

// if function, then call the function to find out

/**
     * Returns `true` if the cell for this column is editable for the given `rowNode`, otherwise `false`.
     */

// only allow editing of groups if the user has this option enabled

/** Get value from ColDef or default if it exists. */

/** If sorting is active, returns the sort direction e.g. `'asc'` or `'desc'`. */

/** If aggregation is set for the column, returns the aggregation function. */

/** Returns `true` if filter is active on the column. */

// additionalEventAttributes is used by provided simple floating filter, so it can add 'floatingFilter=true' to the event

/** Returns `true` when this `Column` is hovered, otherwise `false` */

/** Returns the column definition for this column.
     * The column definition will be the result of merging the application provided column definition with any provided defaults
     * (e.g. `defaultColDef` grid option, or column types.
     *
     * Equivalent: `getDefinition` */

/**
     * Returns the unique ID for the column.
     *
     * Equivalent: `getId`, `getUniqueId` */

/**
     * Returns the unique ID for the column.
     *
     * Equivalent: `getColId`, `getUniqueId` */

/**
     * Returns the unique ID for the column.
     *
     * Equivalent: `getColId`, `getId` */

/** Returns the current width of the column. If the column is resized, the actual width is the new size. */

/** Returns true if the header height has changed */

// colSpan must be number equal to or greater than 1

// rowSpan must be number equal to or greater than 1

// disable flex for this column if it was manually resized.

// this method should only be used by the columnModel to

// change flex when required by the applyColumnState method.

/** Returns `true` if row group is currently active for this column. */

/** Returns `true` if pivot is currently active for this column. */

/** Returns `true` if value (aggregation) is currently active for this column. */

// + renderedHeaderCell - for making header cell transparent when moving

// + renderedCell - changing left position

// + renderedCell - changing width

// + renderedCell - for changing pinned classes

// + renderedColumn - for changing visibility icon

// + every time the filter changes, used in the floating filters

// + renderedHeaderCell - marks the header with filter icon

// + renderedHeaderCell - marks the header with sort icon

// + toolpanel, for gui updates

// + dataTypeService - when waiting to infer cell data types

// used by React (and possibly other frameworks) as key for rendering. also used to

// identify old vs new columns for destroying cols when no longer used.

// The measured height of this column's header when autoHeaderHeight is enabled

// we use ! below, as we want to set the object back to the

// way it was when it was first created

// return true if at least one child is visible

// need to check that this group has at least one col showing when both expanded and contracted.

// if not, then we don't allow expanding and contracting on this group

// want to make sure the group doesn't disappear when it's open

// want to make sure the group doesn't disappear when it's closed

// if the abstractColumn is a grid generated group, there will be no colDef

// preserve the last element, then shorten array length by 1 to delete index

// first take out items from the array

// now add the objects, in same order as provided to us, that means we start at the end

// as the objects will be pushed to the right as they are inserted

// put items in backwards, otherwise inserted items end up in reverse order

/**
 * a user once raised an issue - they said that when you opened a popup (eg context menu)
 * and then clicked on a selection checkbox, the popup wasn't closed. this is because the
 * popup listens for clicks on the body, however ag-grid WAS stopping propagation on the
 * checkbox clicks (so the rows didn't pick them up as row selection selection clicks).
 * to get around this, we have a pattern to stop propagation for the purposes of AG Grid,
 * but we still let the event pass back to the body.
 * @param {Event} event
 */

/**
 * Gets the path for a browser Event or from the target on an AG Grid Event
 * https://developer.mozilla.org/en-US/docs/Web/API/Event
 * @param {Event| { target: EventTarget }} event
 * @returns {EventTarget[]}
 */

// this check is here for certain scenarios where I believe the user must be destroying

// the grid somehow but continuing for it to be used

// CellComp and GridComp and override this because they get the FrameworkOverrides from the Beans bean

// let prototype: any = Object.getPrototypeOf(this);

// const constructor: any = prototype.constructor;

// const constructorString = constructor.toString();

// const beanName = constructorString.substring(9, constructorString.indexOf("("));

/**
     * Setup a managed property listener for the given GridOption property.
     * @param event GridOption property to listen to changes for.
     * @param listener Listener to run when property value changes
     */

/**
     * Setup managed property listeners for the given set of GridOption properties.
     * The listener will be run if any of the property changes but will only run once if
     * multiple of the properties change within the same framework lifecycle event.
     * Works on the basis that GridOptionsService updates all properties *before* any property change events are fired.
     * @param events Array of GridOption properties to listen for changes too.
     * @param listener Shared listener to run if any of the properties change
     */

// ChangeSet is only set when the property change is part of a group of changes from ComponentUtils

// Direct api calls should always be run as 

// Already run the listener for this set of prop changes so don't run again

// Don't expose the underlying event value changes to the group listener.

// Ensure each set of events can run for the same changeSetId

// if we are already destroyed, we execute the func now

// for vue 3 - prevents Vue from trying to make this (and obviously any sub classes) from being reactive

// prevents vue from creating proxies for created objects and prevents identity related issues

// this was a test constructor niall built, when active, it prints after 5 seconds all beans/components that are

// not destroyed. to use, create a new grid, then api.destroy() before 5 seconds. then anything that gets printed

// points to a bean or component that was not properly disposed of.

// constructor() {

//     setTimeout(()=> {

//         if (this.isAlive()) {

//             let prototype: any = Object.getPrototypeOf(this);

//             const constructor: any = prototype.constructor;

//             const constructorString = constructor.toString();

//             const beanName = constructorString.substring(9, constructorString.indexOf("("));

//             console.log('is alive ' + beanName);

//         }

//     }, 5000);

// }

// Enable multiple grid properties to be updated together by the user but only trigger shared logic once.

// Closely related to logic in ComponentUtil.ts

/** @class */

// column key creator dishes out unique column id's in a deterministic way,

// so if we have two grids (that could be master/slave) with same column definitions,

// then this ensures the two grids use identical id's.

// we set the original parents at the end, rather than when we go along, as balancing the tree

// adds extra levels into the tree. so we can only set parents when balancing is done.

// at the end, this will be the top of the tree item.

// at this point, the nextChild is the top most item in the tree

// go through each child, for groups, recurse a level deeper,

// for columns we need to pad

// child is a group, all we do is go to the next level of recursion

// this for loop will NOT run any loops if no padded column groups are needed

// child is a column - so here we add in the padded column groups if needed

// likewise this if statement will not run if no padded groups

// make sure we remove, so if user provided duplicate id, then we don't have more than

// one column instance for colDef with common id

// see if column already exists

// flex

// width - we only set width if column is not flexing

// sort - anything but undefined will set sort, thus null or empty string will clear the sort

// pinned - anything but undefined, thus null or empty string will remove pinned

// start with empty merged definition

// merge properties from column definitions

// merge properties from default column definitions

// override the sort for row group columns where the autoGroupColDef defines these values.

// merge user defined with default column types

// if object has children, we assume it's a group

// this is static, a it is used outside of this class

// as the user is adding and removing columns, the groups are recalculated.

// this reset clears out all children, ready for children to be added again

// set our left based on first displayed column

// first get all children to setLeft, as it impacts our decision below

// this should never happen, as if we have no displayed columns, then

// this groups should not even exist.

// if at least one child is resizable, then the group is resizable

// clear out last time we calculated

// it not expandable, everything is visible

// Add cols based on columnGroupShow

// Note - the below also adds padding groups, these are always added because they never have

// colDef.columnGroupShow set.

// never add empty groups

// when set to open, only show col if group is open

// depends on the open/closed state of the group, only displaying columns are stored here

/** Everything has changed with the columns. Either complete new set of columns set, or user called applyColumnState() */

/** @deprecated - grid no longer uses this, and setSate() also fires individual events */

/** User has set in new columns. */

/** The pivot mode flag was changed */

/** A row group column was added, removed or order changed. */

/** expandAll / collapseAll was called from the api. */

/** A pivot column was added, removed or order changed. */

/** The list of grid columns has changed. */

/** A value column was added, removed or agg function was changed. */

/** A column was moved */

/** One or more columns was shown / hidden */

/** One or more columns was pinned / unpinned*/

/** A column group was opened / closed */

/** One or more columns was resized. If just one, the column in the event is set. */

/** The list of displayed columns has changed, can result from columns open / close, column move, pivot, group, etc */

/** The grid option related to suppressing movable columns has changed */

/** The grid option related to suppressing column group selection has changed */

/** The list of virtual columns has changed, results from viewport changing */

/** Column header mouse over */

/** Column header mouse leave */

/** Column header clicked */

/** Column header context menu event, such as right-click or context menu key press */

/** Async Transactions Executed */

/** A row group was opened / closed */

/** Client-Side Row Model only. The client has updated data for the grid */

/** The client has set new floating data into the grid */

/** Range selection has changed */

/** Chart was created */

/** Chart Range selection has changed */

/** Chart Options have changed */

/** Chart was destroyed */

/** For when the tool panel is shown / hidden */

/** Model was updated - grid updates the drawn rows when this happens */

/** Undo operation has started. */

/** Undo operation has ended. */

/** Redo operation has started. */

/** Redo operation has ended. */

/** 2 events for filtering. The grid LISTENS for filterChanged and afterFilterChanged */

/** Filter was change but not applied. Only useful if apply buttons are used in filters. */

/** A row was removed from the dom, for any reason. Use to clean up resources (if any) used by the row. */

/** Gets called once after the grid has finished initialising. */

/** Called once when the grid is about to get destroyed. */

/** Width of height of the main grid div has changed. Grid listens for this and does layout of grid if it's
     * changed, so always filling the space it was given. */

/** The indexes of the rows rendered has changed, eg user has scrolled to a new vertical position. */

/* The width of the scrollbar has been calculated */

/** Rows were rendered for the first time (ie on async data load). */

/** A column drag has started, either resizing a column or moving a column. */

/** A column drag has stopped */

/** Main body of grid has scrolled, either horizontally or vertically */

/** Main body of the grid has stopped scrolling, either horizontally or vertically */

/** The displayed page for pagination has changed. For example the data was filtered or sorted,
     * or the user has moved to a different page. */

/** Only used by React, Angular, Web Components and VueJS AG Grid components
     * (not used if doing plain JavaScript). If the grid receives changes due
     * to bound properties, this event fires after the grid has finished processing the change. */

/** Only used by the SSRM, called when the grid has no more rows to refresh */

/*****************************  INTERNAL EVENTS: START ******************************************* */

/** Please remember to add to ComponentUtil.EXCLUDED_INTERNAL_EVENTS to not have these events exposed to framework components. */

/** All items from here down are used internally by the grid, not intended for external use. */

// not documented, either experimental, or we just don't want users using an depending on them

// environment

// primarily for charts

// these are used for server side group and agg - only used by CS with Viewport Row Model - intention is

// to design these better around server side functions and then release to general public when fully working with

// all the row models.

// Advanced Filters

// Widgets

// class returns unique instance id's for columns.

// eg, the following calls (in this order) will result in:

// getInstanceIdForKey('country') => 0

// getInstanceIdForKey('country') => 1

// getInstanceIdForKey('country') => 2

// getInstanceIdForKey('country') => 3

// getInstanceIdForKey('age') => 0

// getInstanceIdForKey('age') => 1

// getInstanceIdForKey('country') => 4

// first time this key

// this map contains keys to numbers, so we remember what the last call was

// if doing groupDisplayType = "multipleColumns", then we call the method multiple times, once

// for each column we are grouping by

// rowGroupCol and index are missing if groupDisplayType != "multipleColumns"

// if doing multi, set the field

/**
     * Refreshes an auto group col to load changes from defaultColDef or autoGroupColDef
     */

// if one provided by user, use it, otherwise create one

// For tree data the filter is always allowed

// if showing many cols, we don't want to show more than one with a checkbox for selection

// if col is coupled sorting, and has sort attribute, we want to ignore this

// because we only accept the sort on creation of the col

// only add the default group cell renderer if user hasn't provided one

// we never allow moving the group column

// defaultAutoColDef.suppressMovable = true;

// cellRendererParams.groupKey: colDefToCopy.field;

/**
 * HTML Escapes.
 */

// we call toString() twice, in case value is an object, where user provides

// a toString() method, and first call to toString() returns back something other

// than a string (eg a number to render)

/**
 * Converts a camelCase string into startCase
 * @param {string} camelCase
 * @return {string}
 */

// either split on a lowercase followed by uppercase ie  asHereTo -> as Here To

/**
 * Converts a camelCase string into hyphenated string
 * @param {string} camelCase
 * @return {string}
 */

/**
 * It encodes any string in UTF-8 format
 * taken from https://github.com/mathiasbynens/utf8.js
 * @param {string} s
 * @returns {string}
 */

// 1-byte sequence

// 2-byte sequence

// 3-byte sequence

// 4-byte sequence

// high surrogate, and there is a next character

// low surrogate

// unmatched surrogate; only append this code unit, in case the next

// code unit is the high surrogate of a surrogate pair

// handy for organising a list into a map, where each item is mapped by an attribute, eg mapping Columns by ID

// Possible for update to be called before columns are present in which case there is nothing to do here.

// if we aren't going to force, update the auto cols in place

// add in all old columns to be destroyed

// however we don't destroy anything in the new tree. if destroying the grid, there is no new tree

// always invalidate cache on changing columns, as the column id's for the new columns

// could overlap with the old id's, so the cache would return old values for new columns.

// NOTE ==================

// we should be destroying the existing columns and groups if they exist, for example, the original column

// group adds a listener to the columns, it should be also removing the listeners

// this event is not used by AG Grid, but left here for backwards compatibility,

// in case applications use it

// this event is legacy, no grid code listens to it. instead the grid listens to New Columns Loaded

// used by clipboard service, to know what columns to paste into

// checks what columns are currently displayed due to column virtualisation. dispatches an event

// if the list of columns has changed.

// + setColumnWidth(), setViewportPosition(), setColumnDefs(), sizeColumnsToFit()

// check displayCenterColumnTree exists first, as it won't exist when grid is initialising

// we need to call setVirtualViewportLeftAndRight() at least once after the body width changes,

// as the viewport can stay the same, but in RTL, if body width changes, we need to work out the

// virtual columns again

// we need to update grid columns to cover the scenario where user has groupDisplayType = 'custom', as

// this means we don't use auto group column UNLESS we are in pivot mode (it's mandatory in pivot mode),

// so need to updateGridColumn() to check it autoGroupCol needs to be added / removed

// because of column virtualisation, we can only do this function on columns that are

// actually rendered, as non-rendered columns (outside the viewport and not rendered

// due to column virtualisation) are not present. this can result in all rendered columns

// getting narrowed, which in turn introduces more rendered columns on the RHS which

// did not get autosized in the original run, leaving the visible grid with columns on

// the LHS sized, but RHS no. so we keep looping through the visible columns until

// no more cols are available (rendered) to be resized

// we autosize after animation frames finish in case any cell renderers need to complete first. this can

// happen eg if client code is calling api.autoSizeAllColumns() straight after grid is initialised, but grid

// hasn't fully drawn out all the cells yet (due to cell renderers in animation frames).

// if already autosized, skip it

// get how wide this col should be

// preferredWidth = -1 if this col is not on the screen

// if just one column, we use this, otherwise we don't include the col

// mistake in typing, 'undefined' should be allowed, as 'null' means 'not pinned'

// Possible candidate for reuse (alot of recursive traversal duplication)

// + columnSelectPanel

// + gridPanel -> for resizing the body and setting top margin

// + headerRenderer -> setting pinned body width

// gridPanel -> ensureColumnVisible

// + csvCreator

// see which cols we should take out for column virtualisation

// if user provided a callback, means some columns may not be in the viewport.

// the user will NOT provide a callback if we are talking about pinned areas,

// as pinned areas have no horizontal scroll and do not virtualise the columns.

// if lots of columns, that means column spanning, and we set filterPasses = true

// if one or more of the columns spanned pass the filter.

// + rowRenderer

// if we are not column spanning, this just returns back the virtual centre columns,

// however if we are column spanning, then different rows can have different virtual

// columns, so we have to work out the list for each individual row.

// for headers, we never filter out autoHeaderHeight columns, if calculating

// we never filter out autoHeight columns, as we need them in the DOM for calculating Auto Height

// When running within jsdom the viewportRight is always 0, so we need to return true to allow

// tests to validate all the columns.

// used by:

// + angularGrid -> setting pinned body width

// note: this should be cached

// store all original cols and their index.

// if the column was not in the list, we add it as it's a change

// idx is irrelevant now.

// otherwise remove this col, as it's unchanged.

// returns the width we can set to this col, taking into consideration min and max widths

// @takeFromAdjacent - if user has 'shift' pressed, then pixels are taken from adjacent column

// @finished - ends up in the event, tells the user if more events are to come

// every col has a min width, so sum them all up and see if we have enough room

// for all the min widths

// if at least one columns has no max width, it means the group of columns

// then has no max width, as at least one column can take as much width as possible

// method takes sets of columns and resizes them. either all sets will be resized, or nothing

// be resized. this is used for example when user tries to resize a group and holds shift key,

// then both the current group (grows), and the adjacent group (shrinks), will get resized,

// so that's two sets for this method.

// keep track of pixels used, and last column gets the remaining,

// to cater for rounding errors, and min width adjustments

// this should never happen, but in the future, someone might introduce a bug here,

// so we stop the browser from hanging and report bug properly

// even though we are not going to resize beyond min/max size, we still need to dispatch event when finished

// make a copy of what the grid columns would look like after the move

// returns the provided cols sorted in same order as they appear in grid columns. eg if grid columns

// contains [a,b,c,d,e] and col passed is [e,a] then the passed cols are sorted into [a,e]

// Placement is a number indicating 'left' 'center' or 'right' as 0 1 2

// If placement goes down, we're not in the correct order

// + angularGrid -> for setting body width

// + rowController -> setting main row widths (when inserting and resizing)

// need to cache this

// after setColumnWidth or updateGroupsAndDisplayedColumns

// this is used by virtual col calculation, for RTL only, as a change to body width can impact displayed

// columns, due to RTL inverting the y coordinates

// + rowController

// + clientSideRowModel

// + toolPanel

// + rowController -> while inserting rows

// + clientSideRowController -> sorting, building quick filter text

// + headerRenderer -> sorting (clearing icon)

// + moveColumnController

// does an action on a set of columns. provides common functionality for looking up the

// columns based on key, getting a list of effected columns, and then updated the event

// with either one column (if it was just one col) or a list of columns

// used by: autoResize, setVisible, setPinned

// the column keys this action will be on

// the action to do - if this returns false, the column was skipped

// and won't be included in the event

// should return back a column event of the right type

// need to check for false with type (ie !== instead of !=)

// as not returning anything (undefined) would also be false

// + rowRenderer -> for navigation

// pick the last displayed column in this group

// keep moving to the next col, until we get to another group

// get group at same level as the one we are looking for

// for fast looking, store the index of each column

// auto group columns are re-created so deferring syncing with ColumnState

// Will trigger secondary column changes if pivoting modified

// autogroup cols with nothing else, apply the default

// If there are still states left over, see if we can apply them to newly generated

// secondary or auto columns. Also if defaults exist, ensure they are applied to secondary cols

// auto group columns, if missing from state list, are added to the start.

// it's common to have autoGroup missing, as grouping could be on by default

// on a column, but the user could of since removed the grouping via the UI.

// if we don't inc the insert index, autoGroups will be inserted in reverse order

// normal columns, if missing from state list, are added at the end

// this is already done in updateGridColumns, however we changed the order above (to match the order of the state

// columns) so we need to do it again. we could of put logic into the order above to take into account fixed

// columns, however if we did then we would have logic for updating fixed columns twice. reusing the logic here

// is less sexy for the code here, but it keeps consistency.

// if the first list had it, delete it, as it's unchanged.

// if the second list has it, and first doesn't, add it.

// dispatches generic ColumnEvents where all columns are returned rather than what has changed

// special handling for moved column events

// compare each value to the first value. if nothing differs, then value is common so return it.

// values differ, no common value

// we are only interested in columns that were both present and visible before and after

// we do not do aggFunc, rowGroup or pivot for auto cols or secondary cols

// Note: we do not call column.setAggFunc(null), so that next time we aggregate

// by this column (eg drag the column to the agg section int he toolpanel) it will

// default to the last aggregation function.

// used by growGroupPanel

// most of the time this method gets called the key is a string, so we put this shortcut in

// for performance reasons, to see if we can match for ID (it doesn't do auto columns, that's done below)

// location is where the column is going to appear, ie who is calling us

// only columns with aggregation active can have aggregations

// otherwise we have a measure that is active, and we are doing aggregation on it

// Skip decorating the header - in this case the label is the pivot key, not the value col

// returns the group with matching colId and instanceId. If instanceId is missing,

// matches only on the colId.

// aggFunc doesn't have index variant, cos order of value cols doesn't matter, so always return null

// aggFunc is a string, so return it's existence

// null or empty string means clear

// return false if any of the following: null, undefined, empty string

// all new columns added will have aggFunc missing, so set it to what is in the colDef

// if aggFunc provided, we always override, as reactive property

// otherwise we use initialAggFunc only if no agg func set - which happens when new column only

// sort cols with index, and add these first

// go though all cols.

// if value, change

// if default only, change only if new

// as no value or index is 'present' we use the default / initial when col is new

// second add columns that were there before and in the same order as they were before,

// so we are preserving order of current grouping of columns that simply have rowGroup=true

// lastly put in all remaining cols

// set flag=false for removed cols

// set flag=true for newly added cols

// called by headerRenderer - when a header is opened or closed

// if (key instanceof ProvidedColumnGroup) { return key; }

// otherwise, search for the column group by id

// pivot mode is on, but we are not pivoting, so we only

// show columns we are aggregating on

// also called when group opened/closed

// called from: applyColumnState, setColumnDefs, setSecondaryColumns

// if auto group cols have changed, and we have a sort order, we need to move auto cols to the start

// if group cols have changed, remove them from any previous orders and add them to the start.

// If the current columns are the same or a subset of the previous

// we keep the previous order, otherwise we go back to the order the pivot

// cols are generated in

// updateGridColumns gets called after user adds a row group. we want to maintain the order of the columns

// when this happens (eg if user moved a column) rather than revert back to the original column order.

// likewise if changing in/out of pivot mode, we want to maintain the order of the cols

// create the new auto columns

// if no parent, means we are not grouping, so just add the column to the end

// find the group the column belongs to. if no siblings at the current level (eg col in group on it's

// own) then go up one level and look for siblings there.

// if no siblings exist at any level, this means the col is in a group (or parent groups) on it's own

// find index of last column in the group

// if we are using autoGroupCols, then they should be included for quick filter. this covers the

// following scenarios:

// a) user provides 'field' into autoGroupCol of normal grid, so now because a valid col to filter leafs on

// b) using tree data and user depends on autoGroupCol for first col, and we also want to filter on this

//    (tree data is a bit different, as parent rows can be filtered on, unlike row grouping)

// gets called after we copy down grid columns, to make sure any part of the gui

// that tries to draw, eg the header, it will get empty lists of columns rather

// than stale columns. for example, the header will received gridColumnsChanged

// event, so will try and draw, but it will draw successfully when it acts on the

// virtualColumnsChanged event

// this event is picked up by the gui, headerRenderer and rowRenderer, to recalculate what columns to display

// sets the left pixel position of each column

// items left in allColumns are columns not displayed, so remove the left position. this is

// important for the rows, as if a col is made visible, then taken out, then made visible again,

// we don't want the animation of the cell floating in from the old position, whatever that was.

// go through each list of displayed columns

// a groups left value is the lest left value of it's children

// no virtualisation, so don't filter

// filter out what should be visible

// go through each group, see if any of it's cols are displayed, and if yes,

// then this group is included

// for easy lookup when building the groups.

// see if this item is within viewport

// for column, test if column is included

// If the grid has left-over space, divide it between flexing columns in proportion to their flex value.

// A "flexing column" is one that has a 'flex' value set and is not currently being constrained by its

// minWidth or maxWidth rules.

// find the last resizing col, as only cols after this one are affected by the resizing

// the width of all of the columns for which the width has been determined

// this is for performance to prevent trying to flex when unnecessary

// known columns and the minimum width of all the flex cols are too wide for viewport

// so don't flex

// No columns should flex, but all have been changed. Swap arrays so events fire properly.

// Expensive logic won't execute as flex columns is empty.

// This column is not in fact flexing as it is being constrained to a specific size

// so remove it from the list of flexing columns and start again

// called from api

// resetting cols to their original width makes the sizeColumnsToFit more deterministic,

// rather than depending on the current size of the columns. most users call sizeColumnsToFit

// immediately after grid is created, so will make no difference. however if application is calling

// sizeColumnsToFit repeatedly (eg after column group is opened / closed repeatedly) we don't want

// the columns to start shrinking / growing over time.

// NOTE: the process below will assign values to `this.actualWidth` of each column without firing events

// for this reason we need to manually dispatch resize events after the resize has been done for each column.

// no width, set everything to minimum

// backwards through loop, as we are removing items as we go

// we set the pixels for the last col based on what's left, as otherwise

// we could be a pixel or two short or extra because of rounding errors.

// if this is the last column

// see notes above

// check for reference, in case new column / group with same id is now present

/**
     * Creates new auto group columns if required
     * @returns whether auto cols have changed
     */

// we need to allow suppressing auto-column separately for group and pivot as the normal situation

// is CSRM and user provides group column themselves for normal view, but when they go into pivot the

// columns are generated by the grid so no opportunity for user to provide group column. so need a way

// to suppress auto-col for grouping only, and not pivot.

// however if using Viewport RM or SSRM and user is providing the columns, the user may wish full control

// of the group column in this instance.

// we force recreate so new group cols pick up the new

// definitions. otherwise we could ignore the new cols because they appear to be the same.

// follow approach in `resetColumnState`

// New col already exists. Add any other new cols that should be before it.

// Reached the first manually added column. Add all the new columns now.

// Rather than increment the index, just use the original order index - doesn't need to be contiguous.

// Generally columns should appear in the order they were before. For any new columns, these should appear in the original col def order.

// The exception is for columns that were added via `addGroupColumns`. These should appear at the end.

// We don't have to worry about full updates, as in this case the arrays are correct, and they won't appear in the updated lists.

// ensure things like aligned grids have linked first

// ensure render has finished

// header row count, based on user provided columns

// header row count, either above, or based on pivoting if we are pivoting

// leave level columns of the displayed trees

// all three lists above combined

// for fast lookup, to see if a column or group is still displayed

// all columns to be rendered

// A hash key to keep track of changes in viewport columns

// same as viewportColumns, except we always include columns with headerAutoHeight

// all columns to be rendered in the centre

// same as viewportColumnsCenter, except we always include columns with headerAutoHeight

// all columns & groups to be rendered, index by row. used by header rows to get all items

// to render for that row.

// when we're waiting for cell data types to be inferred, we need to defer column resizing

// quit the search, so 'result' is kept with the found result

// we should always find the path, but in case there is a bug somewhere, returning null

// will make it fail rather than provide a 'hard to track down' bug

// all displayed columns sorted - this is the columns the grid should show

// creates unique id's for the group

// whether it's left, right or center col

// we try to reuse old groups if we can, to allow gui to do animation

// store what's currently iterating so the function can build the next level of col groups

// if the last node was different, and had a null parent, then we add all the nodes to the final

// results)

// the parent differs from the previous node, so we create a group from the previous node

// and add all to the result array, except the current node.

// if the user is setting new colDefs, it is possible that the id's overlap, and we

// would have a false match from above. so we double check we are talking about the

// same original column group.

// clean out the old column group here, as we will be adding children into it again

// returns back a 2d map of ColumnGroup as follows: groupId -> instanceId -> ColumnGroup

/** You do not need to include event callbacks in this list, as they are generated automatically. */

/** These callbacks extend AgGridCommon interface */

// Vue does not have keys in prod so instead need to run through all the 

// gridOptions checking for presence of a gridOption key.

/** Combines component props / attributes with the provided gridOptions returning a new combined gridOptions object */

// shallow copy (so we don't change the provided object)

// create empty grid options if none were passed

// Loop through component props, if they are not undefined and a valid gridOption copy to gridOptions

// Only process changes to properties that are part of the gridOptions

// all events

// events that are internal to AG Grid and should not be exposed to users via documentation or generated framework components

/** Exclude the following internal events from code generation to prevent exposing these events via framework components */

// events that are available for use by users of AG Grid and so should be documented

/** EVENTS that should be exposed via code generation for the framework components.  */

// onXXX methods, based on the above events

// get name of the class as a string

// insert a dash after every capital letter

// let classEscaped = className.replace(/([A-Z])/g, "-$1").toLowerCase();

// put all to upper case

// finally store

// ARIA HELPER FUNCTIONS

// ARIA ATTRIBUTE GETTERS

// ARIA ATTRIBUTE SETTERS

/**
 * These variables are lazy loaded, as otherwise they try and get initialised when we are loading
 * unit tests and we don't have references to window or document in the unit tests
 */

/**
 * Returns true for Chrome and also for Edge (Chromium)
 */

// eslint-disable-next-line

// all browsers except safari support focus({ preventScroll: true }).

// this feature was added on Safari 15+

// FF reports the height back but still renders blank after ~6M px

// needed for WinJS apps

// if width is 0 and client width is 0, means the DOM isn't ready

// remove div

/**
 * the native method number.toLocaleString(undefined, {minimumFractionDigits: 0})
 * puts in decimal places in IE, so we use this method instead
 * from: http://blog.tompawlak.org/number-currency-formatting-javascript
 * @param {number} value
 * @returns {string}
 */

/**
 * Serialises a Date to a string of format `yyyy-MM-dd HH:mm:ss`.
 * An alternative separator can be provided to be used instead of hyphens.
 * @param date The date to serialise
 * @param includeTime Whether to include the time in the serialised string
 * @param separator The separator to use between date parts
 */

/**
 * Serialises a Date to a string of format the defined format, does not include time.
 * @param date The date to serialise
 * @param format The string to format the date to, defaults to YYYY-MM-DD
 */

/**
 * Parses a date and time from a string in the format `yyyy-MM-dd HH:mm:ss`
 */

/**
 * This method adds a class to an element and remove that class from all siblings.
 * Useful for toggling state.
 * @param {HTMLElement} element The element to receive the class
 * @param {string} elementClass The class to be assigned to the element
 * @param {boolean} otherElementClass The class to be assigned to siblings of the element, but not the element itself
 */

// returns back sizes as doubles instead of strings. similar to

// getBoundingClientRect, however getBoundingClientRect does not:

// a) work with fractions (eg browser is zooming)

// b) has CSS transitions applied (eg CSS scale, browser zoom), which we don't want, we want the un-transitioned values

/* html */

// Absolute value - for FF that reports RTL scrolls in negative numbers

// Chrome and Safari when doing RTL have the END position of the scroll as zero, not the start

/**
 * Loads the template and returns it as an element. makes up for no simple way in
 * the dom api to load html directly, eg we cannot do this: document.createElement(template)
 * @param {string} template
 * @returns {HTMLElement}
 */

// if already in right order, do nothing

// insert between the eRowBefore and the row after it

// if nextSibling is missing, means other row is at end, so just append new row at the end

// otherwise put at start

// insert it at the first location

// if previous element exists, just slot in after the previous element

// otherwise eContainer is empty, so just append it

// changes the key from camelCase into a hyphenated-string

/**
 * Makes a copy of a node list into a list
 * @param {NodeList} nodeList
 * @returns {Node[]}
 */

/**
 * cell renderers are used in a few places. they bind to dom slightly differently to other cell renders as they
 * can return back strings (instead of html element) in the getGui() method. common code placed here to handle that.
 * @param {AgPromise<ICellRendererComp>} cellRendererPromise
 * @param {HTMLElement} eTarget
 */

/**
 *
 * @param {String} inputValue The value to be compared against a list of strings
 * @param allSuggestions The list of strings to be compared against
 */

// header column group shown when expanded (click to contract)

// header column group shown when contracted (click to expand)

// tool panel column group contracted (click to expand)

// tool panel column group expanded (click to contract)

// column tool panel header expand/collapse all button, shown when some children are expanded and

//     others are collapsed

// shown on ghost icon while dragging column to the side of the grid to pin

// shown on ghost icon while dragging over part of the page that is not a drop zone

// shown on ghost icon while dragging columns to reorder

// animating icon shown when dragging a column to the right of the grid causes horizontal scrolling

// animating icon shown when dragging a column to the left of the grid causes horizontal scrolling

// shown on ghost icon while dragging over Row Groups drop zone

// shown on ghost icon while dragging over Values drop zone

// shown on ghost icon while dragging over pivot drop zone

// shown on ghost icon while dragging over drop zone that doesn't support it, e.g.

//     string column over aggregation drop zone

// shown on row group when contracted (click to expand)

// shown on row group when expanded (click to contract)

// set filter tree list group contracted (click to expand)

// set filter tree list group expanded (click to contract)

// set filter tree list expand/collapse all button, shown when some children are expanded and

// context menu chart item

// chart window title bar

// X (remove) on column 'pill' after adding it to a drop zone list

// indicates the currently active pin state in the "Pin column" sub-menu of the column menu

// "go to first" button in pagination controls

// "go to previous" button in pagination controls

// "go to next" button in pagination controls

// "go to last" button in pagination controls

// shown on top right of chart when chart is linked to range data (click to unlink)

// shown on top right of chart when chart is not linked to range data (click to link)

// "Choose colour" button on chart settings tab

// rotating spinner shown by the loading cell renderer

// button to launch enterprise column menu

// filter tool panel tab

// column tool panel tab

// button in chart regular size window title bar (click to maximise)

// button in chart maximised window title bar (click to make regular size)

// "Pin column" item in column header menu

// "Value aggregation" column menu item (shown on numeric columns when grouping is active)"

// "Group by {column-name}" item in column header menu

// "Un-Group by {column-name}" item in column header menu

// context menu copy item

// context menu cut item

// context menu paste item

// identifies the pivot drop zone

// "Row groups" drop zone in column tool panel

// columns tool panel Values drop zone

// drag handle used to pick up draggable columns

// drag handle used to pick up draggable rows

// context menu export item

// csv export

// excel export,

// icon on dropdown editors

// version of small-right used in RTL mode

// separater between column 'pills' when you add multiple columns to the header drop zone

// show on column header when column is sorted ascending

// show on column header when column is sorted descending

// show on column header when column has no sort, only when enabled with gridOptions.unSortIcon=true

// Builder button in Advanced Filter

// drag handle used to pick up Advanced Filter Builder rows

// Advanced Filter Builder row validation error

// shown on Advanced Filter Builder rows to move them up

// shown on Advanced Filter Builder rows to move them down

// shown on Advanced Filter Builder rows to add new rows

// shown on Advanced Filter Builder rows to remove row

// IMPORTANT NOTE!

// If you change the list below, copy/paste the new content into the docs page custom-icons

/**
 * If icon provided, use this (either a string, or a function callback).
 * if not, then use the default icon from the theme
 * @param {string} iconName
 * @param {GridOptionsService} gridOptionsService
 * @param {Column | null} [column]
 * @returns {Element}
 */

// check col for icon first

// now if user provided, use it

// if not in col, try grid options

// these should be used with `event.code` instead of `event.key`

// as `event.key` changes when non-latin keyboards are used

// no allowed printable chars have alt or ctrl key combinations

// if key is length 1, eg if it is 'a' for the a key, or '2' for the '2' key.

// non-printable characters have names, eg 'Enter' or 'Backspace'.

/**
 * Allows user to tell the grid to skip specific keyboard events
 * @param {GridOptionsService} gridOptionsService
 * @param {KeyboardEvent} keyboardEvent
 * @param {IRowNode} rowNode
 * @param {Column} column
 * @param {boolean} editing
 * @returns {boolean}
 */

// if no callbacks provided by user, then do nothing

// colDef get first preference on suppressing events

// if colDef func suppressed, then return now, no need to call gridOption func

// otherwise return false, don't suppress, as colDef didn't suppress and no func on gridOptions

/**
 * `True` if the event is close to the original event by X pixels either vertically or horizontally.
 * we only start dragging after X pixels so this allows us to know if we should start dragging yet.
 * @param {MouseEvent | TouchEvent} e1
 * @param {MouseEvent | TouchEvent} e2
 * @param {number} pixelCount
 * @returns {boolean}
 */

// by default, we wait 4 pixels before starting the drag

/**
 * Gets called by: a) ClientSideNodeManager and b) GroupStage to do sorting.
 * when in ClientSideNodeManager we always have indexes (as this sorts the items the
 * user provided) but when in GroupStage, the nodes can contain filler nodes that
 * don't have order id's
 * @param {RowNode[]} rowNodes
 * @param {Object} rowNodeOrder
 *
 * @returns a boolean representing whether nodes were reordered
 */

// check if the list first needs sorting

/**
 * A Util Class only used when debugging for printing time to console
 */

// if this component gets destroyed while tooltip is showing, need to make sure

// we don't end with no mouseLeave event resulting in zombie tooltip

// if `interactiveTooltipTimeoutId` is set, it means that this cell has a tooltip

// and we are in the process of moving the cursor from the tooltip back to the cell

// so we need to unlock this service here.

// there is a delay from the time we mouseOver a component and the time the

// tooltip is displayed, so we need to track mousemove to be able to correctly

// position the tooltip when showTooltip is called.

// if interaction is enabled, we need to verify if the user is moving

// the cursor from the cell onto the tooltip, so we lock the service 

// for 100ms to prevent other tooltips from being created while this is happening.

// every mouseenter should be following by a mouseleave, however for some unknown, it's possible for

// mouseenter to be called twice in a row, which can happen if editing the cell. this was reported

// in https://ag-grid.atlassian.net/browse/AG-4422. to get around this, we check the state, and if

// state is != nothing, then we know mouseenter was already received.

// if we are showing the tooltip because of focus, no delay at all

// if another tooltip was hidden very recently, we only wait 200ms to show, not the normal waiting time

// check if comp exists - due to async, although we asked for

// one, the instance may not be back yet

// focusout is dispatched when inner elements lose focus

// so we need to verify if focus is contained within the tooltip

// if we move the focus from the tooltip back to the original cell

// the tooltip should remain open, but we need to restart the hide timeout counter

// add class to fade out the tooltip

// when showing the tooltip, we need to make sure it's the most recent instance we request, as due to

// async we could request two tooltips before the first instance returns, in which case we should

// disregard the second instance.

// we check for spaces before doing the split, as doing the split

// created a performance problem (on windows only, see AG-6765)

// to minimise DOM hits, we only apply CSS classes if they have changed. as adding a CSS class that is already

// there, or removing one that wasn't present, all takes CPU.

// for registered components only, eg creates AgCheckbox instance from ag-checkbox HTML tag

// we MUST take a copy of the list first, as the 'swapComponentForNode' adds comments into the DOM

// which messes up the traversal order of the children.

// replace the tag (eg ag-checkbox) with the proper HTMLElement (eg 'div') in the dom

// context will not be available when user sets template in constructor

// ui exists if user sets template in constructor. when this happens, we have to wait for the context

// to be autoWired first before we can create child components.

// if it's a ref selector, and match is on top level component, we return

// the element. otherwise no way of components putting ref=xxx on the top

// level element as querySelector only looks at children.

// this method is for older code, that wants to provide the gui element,

// it is not intended for this to be in ag-Stack

// if false, then CSS class "ag-hidden" is applied, which sets "display: none"

// if false, then CSS class "ag-invisible" is applied, which sets "visibility: hidden"

// unique id for this row component. this is used for getting a reference to the HTML dom.

// we cannot use the RowNode id as this is not unique (due to animation, old rows can be lying

// around as we create a new rowComp instance for the same row node).

// // think we should take this out, put property bindings on the

// export function Method(eventName?: string): Function {

//     return methodFunc.bind(this, eventName);

// function methodFunc(alias: string, target: Object, methodName: string) {

//     if (alias === null) {

//         console.error("AG Grid: EventListener eventName should not be null");

//         return;

//     }

//     addToObjectProps(target, 'methods', {

//         methodName: methodName,

//         alias: alias

//     });

// this is a user component, and IComponent has "public destroy()" as part of the interface.

// so we need to override destroy() just to make the method public.

// it would be nice to check if getModelAsString was present before creating this component,

// however that is not possible, as React Hooks and VueJS don't attached the methods to the Filter until

// AFTER the filter is created, not allowing inspection before this (we create floating filters as columns

// are drawn, but the parent filters are only created when needed).

/** Provides sync access to async component. Date component can be lazy created - this class encapsulates
 * this by keeping value locally until DateComp has loaded, then passing DateComp the value. */

/* Common logic for options, used by both filters and floating filters. */

// because async, check the filter still exists after component comes back

// skip if we are moving to the left and the cursor

// is positioned to the right of the left side anchor

// skip if we are moving to the right and the cursor

// is positioned to the left of the dialog

// if the movement is bound to the right side of the dialog

// we skip if we are moving to the left and the cursor

// is to the right of the dialog

// or skip if we are moving to the right and the cursor

// is to the left of the right side anchor

// skip if we are moving to towards top and the cursor is

// below the top anchor + topBuffer

// note: topBuffer is used when moving the dialog using the title bar

// skip if we are moving to the bottom and the cursor is

// above the top anchor

// skip if we are moving towards the top and the cursor

// is below the bottom anchor

// skip if we are moving towards the bottom and the cursor

// is above the bottom anchor

// do not let the size of all siblings be higher than the parent container

// do this first to create the DOM

// override

// filter is active if we have a valid applied model

// Always empty the buttons panel before adding new buttons

// Only create the buttons panel if we need to

// The case when we need to hide the buttons panel because there are no buttons

// subclasses can override this to provide alternative debounce defaults

// May already have been applied, so don't apply again (e.g. closing filter before debounce timeout)

// we set the model from the GUI, rather than the provided model,

// so the model is consistent, e.g. handling of null/undefined will be the same,

// or if model is case-insensitive, then casing is removed.

/**
     * Applies changes made in the UI to the filter, and returns true if the model has changed.
     */

// models can be same if user pasted same content into text field, or maybe just changed the case

// and it's a case insensitive filter

// Prevent form submission

// only close if an apply button is visible, otherwise we'd be closing every time a change was made!

/**
     * By default, if the change came from a floating filter it will be applied immediately, otherwise if there is no
     * apply button it will be applied after a debounce, otherwise it will not be applied at all. This behaviour can
     * be adjusted by using the apply parameter.
     */

// tool panel is scrollable, so don't need to size

// static, as used by floating filter also

// override to control positionable feature

// after the user hits 'apply' the model gets copied to here. this is then the model that we use for

// all filtering. so if user changes UI but doesn't hit apply, then the UI will be out of sync with this model.

// this is what we want, as the UI should only become the 'active' filter once it's applied. when apply is

// inactive, this model will be in sync (following the debounce ms). if the UI is not a valid filter

// (eg the value is missing so nothing to filter on, or for set filter all checkboxes are checked so filter

// not active) then this appliedModel will be null/undefined.

// if the focusableEl is not the wrapper and the mousedown

// targets the focusableEl, we should not expand/collapse the picker.

// Note: this will happen when AgRichSelect is set with `allowTyping=true`

// this prevents a BUG where MouseDown causes the element to be focused

// after the picker is shown and focus ends up being lost.

// do not create the picker every time to save state

// Remove the autocomplete attribute if the value is explicitly set to true

// to allow the default browser autocomplete/autofill behaviour.

/**
     * This ensures that if another radio button in the same named group is selected, we deselect this radio button.
     * By default the browser does this for you, but we are managing classes ourselves in order to ensure input
     * elements are styled correctly in IE11, and the DOM 'changed' event is only fired when a button is selected,
     * not deselected, so we need to use our own event.
     */

// 1) NumberFloatingFilter & TextFloatingFilter: Always, for both when editable and read only.

// 2) DateFloatingFilter: Only when read only (as we show text rather than a date picker when read only)

/**
 * Every filter with a dropdown where the user can specify a comparing type against the filter values.
 *
 * @param M type of filter-model managed by the concrete sub-class that extends this type
 * @param V type of value managed by the concrete sub-class that extends this type
 * @param E type of UI element used for collecting user-input
 */

// floating filter calls this when user applies filter from floating filter

// both are missing

// one is missing, other present

// otherwise both present, so compare

// Check number of conditions vs maxNumConditions

// only do this when read only (so no other focusable elements), otherwise the tab order breaks

// as the tabbed layout managed focus feature will focus the body when it shouldn't

// Add specified options to condition drop-down.

// Make drop-downs read-only if there is only one option.

/**
     * @deprecated As of v29.2 filters can have more than two conditions. Check `colDef.filterParams.maxNumConditions` instead.
     */

// created dynamically

// from here, the number of elements in all the collections is correct, so can just update the values/statuses

// Collection sizes are already correct if updated via API, so only need to handle UI updates here

// remove any incomplete conditions at the end, excluding the active position

// something needs focus otherwise keyboard navigation breaks, so focus the filter body

// Reset temporary UI state that was applied to the DOM but not committed to the model

// if conditions have been removed, need to recreate new ones at the end up to the number required

// allow sub-classes to reset HTML placeholders after UI update.

// Read-only mode trumps everything.

// Check that the condition needs inputs.

// returns true if the UI represents a working filter, eg all parts are filled out.

// eg if text filter and textfield blank then returns false.

// Condition doesn't exist.

// don't show incomplete conditions when read only

// puts model values into the UI

// after floating filter changes, this sets the 'value' section. this is implemented by the base class

// (as that's where value is controlled), the 'type' part from the floating filter is dealt with in this class.

/** returns true if the row passes the said condition */

// unlike the other filters, we do two things here:

// 1) allow for different attribute names (same as done for other filters) (eg the 'from' and 'to'

//    are in different locations in Date and Number filter models)

// 2) convert the type (because Date filter uses Dates, however model is 'string')

// NOTE: The conversion of string to date also removes the timezone - i.e. when user picks

//       a date from the UI, it will have timezone info in it. This is lost when creating

//       the model. When we recreate the date again here, it's without a timezone.

// if no model provided by the parent filter use default

// never allow editing if the filter is combined (ie has two parts)

// Initial call

// readOnly is a property of ProvidedFilterParams - we need to find a better (type-safe)

// way to support reading this in the future.

// we are editable if:

// 1) there is a type (user has configured filter wrong if not type)

//  AND

// 2) the default type is not 'inRange'

// Update the read-only text field

// We don't want to update the floating filter if the floating filter caused the change,

// because the UI is already in sync. if we didn't do this, the UI would behave strangely

// as it would be updating as the user is typing.

// This is similar for data changes, which don't affect provided date floating filters

// ensures that the input element is focussed when a clear button is clicked,

// unless using safari as there is no clear button and focus does not work properly

// update the input before we call super.setValue, so it's updated before the value changed event is fired

/** Used to set an initial value into the input without necessarily setting `this.value` or triggering events (e.g. to set an invalid value) */

// Prevent default scroll events from incrementing / decrementing the input, since its inconsistent between browsers

// can't use toFixed here because we don't want to round up

// need to maintain the scientific notation format whilst typing (e.g. 1e10)

// cater for when the type doesn't need a value

// values from floating filter are directly from the input, not from the model

// trim the input, unless it is all whitespace (this is consistent with Excel behaviour)

// NumberFilter is typed as number, but actually receives string values

// only looking at one touch point at any time

// stops the tap from also been processed as a mouse click

// this stops a tripple tap ending up as two double taps

// we set passive=false, as we want to prevent default on this event

// Watch global events, as row group columns can effect their display column.

// when grouping changes so can sort indexes and icons

// we listen here for global sort events, NOT column sort events, as we want to do this

// when sorting has been set on all column (if we listened just for our col (where we

// set the asc / desc icons) then it's possible other cols are yet to get their sorting state.

// if template changed, then recreate the whole comp, the code required to manage

// a changing template is to difficult for what it's worth.

// take account of any newlines & whitespace before/after the actual template

// When suppressMenuHide is true, a tap on the menu icon will bubble up

// to the header container, in that case we should not sort

// if tapMenuButton is true `touchListener` and `menuTouchListener` are different

// so we need to make sure to destroy both listeners here

// we don't show the menu if on an iPad/iPhone, as the user cannot have a pointer device/

// However if suppressMenuHide is set to true the menu will be displayed alwasys, so it's ok

// to show it on iPad in this case (as hover isn't needed). If suppressMenuHide

// is false (default) user will need to use longpress to display the menu.

// if no menu provided in template, do nothing

// eSortIndicator will not be present when customers provided custom header

// templates, in that case, we need to look for provided sort elements and

// manually create eSortIndicator.

// we set up the indicator prior to the check for whether this column is sortable, as it allows the indicator to

// set up the multi sort indicator which can appear irrelevant of whether this column can itself be sorted.

// this can occur in the case of a non-sortable group display column.

// keep track of last time the moving changed flag was set

// add the event on the header, so when clicked, we do sorting

// sometimes when moving a column via dragging, this was also firing a clicked event.

// here is issue raised by user: https://ag-grid.zendesk.com/agent/tickets/1076

// this check stops sort if a) column is moving or b) column moved less than 200ms ago (so caters for race condition)

// adding stopPropagation to the double click for the icons prevents double click action happening

// when the icons are clicked. if the icons are double clicked, then the groups should open and

// then close again straight away. if we also listened to double click, then the group would open,

// close, then open, which is not what we want. double click should only action if the user double

// clicks outside of the icons.

// no renderer, default text render

// shift+enter allows for newlines

// we don't want to add this if full row editing, otherwise selecting will stop the

// full row editing.

// cellStartedEdit is only false if we are doing fullRow editing

// Added for AG-3238. We can't remove this explicit focus() because Chrome requires an input

// to be focused before setSelectionRange will work. But it triggers a bug in Safari where

// explicitly focusing then blurring an empty field will cause the parent container to scroll.

// gets called when tabbing through cells and in full row edit mode

// when we started editing, we want the caret at the end, not the start.

// this comes into play in two scenarios:

//   a) when user hits F2

//   b) when user hits a printable character

// the refreshCount makes sure that if the value updates again while

// the below timer is waiting, then the below timer will realise it

// is not the most recent and will not try to remove the delta value.

// we don't show the delta if we are in the middle of a filter. see comment on FilterManager

// with regards processingFilterChange

// highlight the current value, but only if it's not new, otherwise it

// would get highlighted first time the value is shown

// if old animation, remove it

// having timeout of 0 allows use to skip to the next css turn,

// so we know the previous css classes have been applied. so the

// complex set of setTimeout below creates the animation

/**
     * Replaces the data on the `rowNode`. When this method is called, the grid will refresh the entire rendered row if it is displayed.
     */

// similar to setRowData, however it is expected that the data is the same data item. this

// is intended to be used with Redux type stores, where the whole data can be changed. we are

// guaranteed that the data is the same entity (so grid doesn't need to worry about the id of the

// underlying data changing, hence doesn't need to worry about selection). the grid, upon receiving

// dataChanged event, will refresh the cells rather than rip them all out (so user can show transitions).

/**
     * Updates the data on the `rowNode`. When this method is called, the grid will refresh the entire rendered row if it is displayed.
     */

// when we are doing master / detail, the detail node is lazy created, but then kept around.

// so if we show / hide the detail, the same detail rowNode is used. so we need to keep the data

// in sync, otherwise expand/collapse of the detail would still show the old values.

// just copy the id and data, this is enough for the node to be used

// in the selection controller (the selection controller is the only

// place where daemon nodes can live).

// if row is selected but shouldn't be selectable, then deselect.

// see if user is providing the id's

// if user is providing the id's, then we set the id only after the data has been set.

// this is important for virtual pagination and viewport, where empty rows exist.

// make sure id provided doesn't start with 'row-group-' as this is reserved. also check that

// it has 'startsWith' in case the user provided a number.

// force id to be a string

// this can happen if user has set blank into the rowNode after the row previously

// having data. this happens in virtual page row model, when data is delete and

// the page is refreshed.

// if changing AWAY from master, then unexpand, otherwise

// next time it's shown it is expanded again

// if we used to be a group, and no longer, then close the node

/**
     * Sets the row height.
     * Call if you want to change the height initially assigned to the row.
     * After calling, you must call `api.onRowHeightChanged()` so the grid knows it needs to work out the placement of the rows. */

// If column spanning is active a column may not provide auto height for a row if that

// cell is not present for the given row due to a previous cell spanning over the auto height column.

// Column is present in the row, i.e not spanned over, but no auto height was provided so we cannot calculate the row height

// Ignore this column as it is spanned over and not present in the row

// At least one auto height is present

// we take min of 10, so we don't adjust for empty rows. if <10, we put to default.

// this prevents the row starting very small when waiting for async components,

// which would then mean the grid squashes in far to many rows (as small heights

// means more rows fit in) which looks crap. so best ignore small values and assume

// we are still waiting for values to render.

/**
     * Set the expanded state of this rowNode. Pass `true` to expand and `false` to collapse.
     */

/**
     * Replaces the value on the `rowNode` for the specified column. When complete,
     * the grid will refresh the rendered cell on the required row only.
     * **Note**: This method only fires `onCellEditRequest` when the Grid is in **Read Only** mode.
     *
     * @param colKey The column where the value should be updated
     * @param newValue The new value
     * @param eventSource The source of the event
     * @returns `true` if the value was changed, otherwise `false`.
     */

// if we don't check this, then the grid will render leaf groups as open even if we are not

// allowing the user to open leaf groups. confused? remember for pivot mode we don't allow

// opening leaf groups, so we have to force leafGroups to be closed in case the user expanded

// them via the API, or user user expanded them in the UI before turning on pivot mode

// sets the data for an aggregation

// find out all keys that could potentially change

// if no event service, nobody has registered for events, so no need fire event

// do a quick lookup - despite the event it's possible the column no longer exists

// in CSRM, the group property will be set before the childrenAfterGroup property, check both to prevent flickering

// stubs and footers can never have children, as they're grid rows. if tree data the presence of children

// is determined by the isServerSideGroup callback, if not tree data then the rows group property will be set.

/**
     * The first time `quickFilter` runs, the grid creates a one-off string representation of the row.
     * This string is then used for the quick filter instead of hitting each column separately.
     * When you edit, using grid editing, this string gets cleared down.
     * However if you edit without using grid editing, you will need to clear this string down for the row to be updated with the new values.
     * Otherwise new values will not work with the `quickFilter`. */

/** Returns:
    * - `true` if the node can be expanded, i.e it is a group or master row.
    * - `false` if the node cannot be expanded
    */

/** Returns:
     * - `true` if node is selected,
     * - `false` if the node isn't selected
     * - `undefined` if it's partially selected (group where not all children are selected). */

// for footers, we just return what our sibling selected state is, as cannot select a footer

/** Perform a depth-first search of this node and its children. */

// + selectionController.calculatedSelectedForAllGroupNodes()

// non-selectable nodes must be calculated from their children, or ignored if no value results.

// we only check selectable when newValue=true (ie selecting) to allow unselecting values,

// as selectable is dynamic, need a way to unselect rows when selectable becomes false.

/**
     * Select (or deselect) the node.
     * @param newValue -`true` for selection, `false` for deselection.
     * @param clearSelection - If selecting, then passing `true` will select the node exclusively (i.e. NOT do multi select). If doing deselection, `clearSelection` has no impact.
     * @param source - Source property that will appear in the `selectionChanged` event.
     */

// this is for internal use only. To make calling code more readable, this is the same method as setSelected except it takes names parameters

/**
     * Returns:
     * - `true` if node is either pinned to the `top` or `bottom`
     * - `false` if the node isn't pinned
     */

/** Add an event listener. */

/** Remove event listener. */

// if we are hiding groups, then if we are the first child, of the first child,

// all the way up to the column we are interested in, then we show the group cell.

/**
     * Returns:
     * - `true` if the node is a full width cell
     * - `false` if the node is not a full width cell
     */

/**
     * Returns the route of the row node. If the Row Node is a group, it returns the route to that Row Node.
     * If the Row Node is not a group, it returns `undefined`.
     */

// only create footer node once, otherwise we have daemons and

// the animate screws up with the daemons hanging around

// manually set oldRowTop to null so we discard any

// previous information about its position.

// get both header and footer to reference each other as siblings. this is never undone,

// only overwritten. so if a group is expanded, then contracted, it will have a ghost

// sibling - but that's fine, as we can ignore this if the header is contracted.

// we don't copy these properties as they cause the footer node

// to have properties which should be unique to the row.

// Only used by SSRM. In CSRM this is never used as footers should always be present for

// the purpose of exporting collapsed groups. In SSRM it is not possible to export collapsed

// groups anyway, so can destroy footers.

/** The current row index. If the row is filtered out or in a collapsed group, this value will be `null`. */

/** The key for the group eg Ireland, UK, USA */

/** Children mapped by the pivot columns. */

/**
         * This will be `true` if it has a rowIndex assigned, otherwise `false`.
         */

/** The row top position in pixels. */

/** The top pixel for this row last time, makes sense if data set was ordered or filtered,
         * it is used so new rows can animate in from their old position. */

/** `true` by default - can be overridden via gridOptions.isRowSelectable(rowNode) */

/** Used by sorting service - to give deterministic sort to groups. Previously we
         * just id for this, however id is a string and had slower sorting compared to numbers. */

/** When one or more Columns are using autoHeight, this keeps track of height of each autoHeight Cell,
         * indexed by the Column ID. */

/** `true` when nodes with the same id are being removed and added as part of the same batch transaction */

// when rows are loaded for the second time, this can impact the selection, as a row

// could be loaded as already selected (if user scrolls down, and then up again).

// we don't want double click on this icon to open a group

// we don't want the row clicked event to fire when selecting the checkbox, otherwise the row

// would possibly get selected twice

// for CSRM groupSelectsFiltered, we can get an indeterminate state where all filtered children are selected,

// and we would expect clicking to deselect all rather than select all

// if the isRowSelectable() is not provided the row node is selectable by default

// column will be missing if groupDisplayType = 'groupRows'

/* html*/

// if element is not visible, then width and height are zero

// checks if the mouse is on the drop target. it checks eContainer and eSecondaryContainers

// elementsFromPoint return a list of elements under

// the mouseEvent sorted from topMost to bottomMost

// loop over the sorted elementStack to find which dropTarget comes first

// we should never hit this point of the code because only

// valid dropTargets should be provided to this method.

// localise x and y to the target

// check ghost is not positioned outside of the browser

// some environments like SalesForce will throw errors

// simply by trying to read the fullscreenElement property

// returns true if all compatibility items work out

// if this is changing the drag element, delete the previous dragSource

// if shown sometimes, them some rows can have drag handle while other don't,

// so we use setVisible to keep the handles horizontally aligned (as setVisible

// keeps the empty space, whereas setDisplayed looses the space)

// when non managed, the visibility depends on suppressRowDrag property only

// in case data changes, then we need to update visibility of drag item

// only show the drag if both sort and filter are not present

// when managed, the visibility depends on sort, filter and row group, as well as suppressRowDrag property

// we do not show the component if sort, filter or grouping is active

// logic for skipping cells follows, never skip top level footer cell.

// this footer should only be non-top level. Don't need to check groupIncludeFooter

// as we won't have footer rows in that instance.

// if the groupCellRenderer is inside of a footer and groupHideOpenParents is true

// we should only display the groupCellRenderer if the current column is the rowGroupedColumn

// if we're always showing a group value

// property cleanup to avoid memory leaks

// for react, we don't use JSX, as setting attributes via jsx is slower

// if we are doing embedded full width rows, we only show the renderer when

// in the body, or if pinning in the pinned section, or if pinning and RTL,

// in the right section. otherwise we would have the cell repeated in each section.

// if we didn't find a displayed group, set it to the row node

// note - this code depends on sortService.updateGroupDataForHiddenOpenParents, where group data

// is updated to reflect the dragged down parents

// hideOpenParents means rowNode.groupData can have data for the group this column is displaying, even though

// this rowNode isn't grouping by the column we are displaying

// if no groupData at all, we are not showing a parent value

// if showing group as normal, we didn't take group info from parent

// see if we are showing a Group Value for the Displayed Group. if we are showing a group value, and this Row Node

// is not grouping by this Displayed Group, we must of gotten the value from a parent node

// this is the normal case, in that we are showing a group for which this column is configured. note that

// this means the Row Group is closed (if it was open, we would not be displaying it)

// we try and use the cellRenderer of the column used for the grouping if we can

// for full width rows, we don't do any of the below

// when grouping, the normal case is we use the cell renderer of the grouped column. eg if grouping by country

// and then rating, we will use the country cell renderer for each country group row and likewise the rating

// cell renderer for each rating group row.

// however if the user has innerCellRenderer defined, this gets preference and we don't use cell renderers

// of the grouped columns.

// so we check and use in the following order:

// 1) thisColDef.cellRendererParams.innerRenderer of the column showing the groups (eg auto group column)

// 2) groupedColDef.cellRenderer of the grouped column

// 3) groupedColDef.cellRendererParams.innerRenderer

// we check if cell renderer provided for the group cell renderer, eg colDef.cellRendererParams.innerRenderer

// only include the child count if it's included, eg if user doing custom aggregation,

// then this could be left out, or set to -1, ie no child count

// filtering changes the child count, so need to cater for it

// expand / contract as the user hits enter

// so if we expand a node, it does not also get selected.

// must use the displayedGroup, so if data was dragged down, we expand the parent, not this row

// it not expandable, show neither

// maybe if no children now, we should hide the expand / contract icons

// if we have no children, this impacts the indent

// only do this if an indent - as this overwrites the padding that

// the theme set, which will make things look 'not aligned' for the

// first group level.

// if a function, we always return true as change detection can show or hide the checkbox.

// footers cannot be selected

// pinned rows cannot be selected

// details cannot be selected

// we want to avoid acting on double click events on the expand / contract icon,

// as that icons already has expand / collapse functionality on it. otherwise if

// the icon was double clicked, we would get 'click', 'click', 'dblclick' which

// is open->close->open, however double click should be open->close only.

// so we need to have public here instead of private or protected

// setTimeout is used because some screen readers only announce `aria-live` text when

// there is a "text change", so we force a change from empty.

// will need to type params

// if we're grouping by this column then the value is a string and we need to parse it

//date

//header

//floating filters

// renderers

//editors

//filter

//overlays

// tooltips

/** Used to provide useful error messages if a user is trying to use an enterprise component without loading the module. */

// this one is unusual, as it can be LoadingCellRenderer, DetailCellRenderer, FullWidthCellRenderer or GroupRowRenderer.

// so we have to pass the type in.

// CELL RENDERER

// CELL EDITOR

// FILTER

// if compOption is a string, means we need to look the item up

// if lookup brought nothing back, and we have a default, lookup the default

// if we have a comp option, and it's a function, replace it with an object equivalent adaptor

// there are two types of js comps, class based and func based. we can only check for

// class based, by checking if getGui() exists. no way to differentiate js func based vs eg react func based

// const isJsClassComp = (comp: any) => this.agComponentUtils.doesImplementIComponent(comp);

// const fwActive = this.frameworkComponentWrapper != null;

// pull from defObject if available

// if no selector, or result of selector is empty, take from defObject

// Using framework component

// used by Floating Filter

// will be undefined if not in the map

// Excel Export

// remove touch listener only if it exists

// gets called whenever mouse down on any drag source

// Prevents the page document from moving while we are dragging items around.

// preventDefault needs to be called in the touchmove listener and never inside the

// touchstart, because using touchstart causes the click event to be cancelled on touch devices.

// temporally add these listeners, for the duration of the drag

// see if we want to start dragging straight away

// only interested in left button clicks

// if there are two elements with parent / child relationship, and both are draggable,

// when we drag the child, we should NOT drag the parent. an example of this is row moving

// and range selection - row moving should get preference when use drags the rowDrag component.

// returns true if the event is close to the original event by X pixels either vertically or horizontally.

// we only start dragging after X pixels so this allows us to know if we should start dragging yet.

// if mouse hasn't travelled from the start position enough, do nothing

// we need ONE drag action at the startEvent, so that we are guaranteed the drop target

// at the start gets notified. this is because the drag can start outside of the element

// that started it, as the mouse is allowed drag away from the mouse down before it's

// considered a drag (the isEventNearStartEvent() above). if we didn't do this, then

// it would be possible to click a column by the edge, then drag outside of the drop zone

// in less than 4 pixels and the drag officially starts outside of the header but the header

// wouldn't be notified of the dragging.

// this.___statusPanel.setInfoText(Math.random() + ' onTouchMove preventDefault stopPropagation');

// only gets called after a mouse down - as this is only added after mouseDown

// and is removed when mouseUp happens

// when `isEnableCellTextSelect` is `true`, we need to preventDefault on mouseMove

// to avoid the grid text being selected while dragging components.

// i haven't worked this out yet, but there is no matching touch

// when we get the touch up event. to get around this, we swap in

// the last touch. this is a hack to 'get it working' while we

// figure out what's going on, why we are not getting a touch in

// current event.

// if mouse was left up before we started to move, then this is a tap.

// we check this before onUpCommon as onUpCommon resets the dragging

// let tap = !this.dragging;

// let tapTarget = this.currentDragParams.eElement;

/** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */

/** Returns the `gridId` for the current grid as specified via the gridOptions property `gridId` or the auto assigned grid id if none was provided. */

/** Register a detail grid with the master grid when it is created. */

/** Unregister a detail grid from the master grid when it is destroyed. */

/** Returns the `DetailGridInfo` corresponding to the supplied `detailGridId`. */

/** Iterates through each `DetailGridInfo` in the grid and calls the supplied callback on each. */

// check for undefined, as old references will still be lying around

/** Similar to `exportDataAsCsv`, except returns the result as a string rather than download it. */

/** Downloads a CSV export of the grid's data. */

/** Similar to `exportDataAsExcel`, except instead of downloading a file, it will return a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) to be processed by the user. */

/** Downloads an Excel export of the grid's data. */

/** This is method to be used to get the grid's data as a sheet, that will later be exported either by `getMultipleSheetsAsExcel()` or `exportMultipleSheetsAsExcel()`. */

/** Similar to `exportMultipleSheetsAsExcel`, except instead of downloading a file, it will return a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) to be processed by the user. */

/** Downloads an Excel export of multiple sheets in one file. */

/**
     * Sets an ARIA property in the grid panel (element with `role=\"grid\"`), and removes an ARIA property when the value is null.
     *
     * Example: `api.setGridAriaProperty('label', 'my grid')` will set `aria-label=\"my grid\"`.
     *
     * `api.setGridAriaProperty('label', null)` will remove the `aria-label` attribute from the grid element.
     */

/** Gets the number of top pinned rows. */

/** Gets the number of bottom pinned rows. */

/** Gets the top pinned row with the specified index. */

/** Gets the bottom pinned row with the specified index. */

/**
     * Returns an object with two properties:
     *  - `top`: The top pixel position of the current scroll in the grid
     *  - `bottom`: The bottom pixel position of the current scroll in the grid
     */

/**
     * Returns an object with two properties:
     * - `left`: The left pixel position of the current scroll in the grid
     * - `right`: The right pixel position of the current scroll in the grid
     */

/** Performs change detection on all cells, refreshing cells where required. */

/** Flash rows, columns or individual cells. */

/** Remove row(s) from the DOM and recreate them again from scratch. */

/** Redraws the header. Useful if a column name changes, or something else that changes how the column header is displayed. */

/** Returns `true` if any filter is set. This includes quick filter, column filter, external filter or advanced filter. */

/** Returns `true` if any column filter is set, otherwise `false`. */

/** Returns `true` if the Quick Filter is set, otherwise `false`. */

/**
     * Returns the row model inside the table.
     * From here you can see the original rows, rows after filter has been applied,
     * rows after aggregation has been applied, and the final set of 'to be displayed' rows.
     */

/** Expand or collapse a specific row node, optionally expanding/collapsing all of its parent nodes. */

/**
     * Informs the grid that row group expanded state has changed and it needs to rerender the group nodes.
     * Typically called after updating the row node expanded state explicitly, i.e `rowNode.expanded = false`,
     * across multiple groups and you want to update the grid view in a single rerender instead of on every group change.
     */

/**
     * Refresh the Client-Side Row Model, executing the grouping, filtering and sorting again.
     * Optionally provide the step you wish the refresh to apply from. Defaults to `everything`.
     */

/** Returns `true` when there are no more animation frames left to process. */

/**
     * Returns the row node with the given ID.
     * The row node ID is the one you provide from the callback `getRowId(params)`,
     * otherwise the ID is a number (cast as string) auto-generated by the grid when
     * the row data is set.
     */

/**
     * Gets the sizes that various UI elements will be rendered at with the current theme.
     * If you override the row or header height using `gridOptions`, the override value you provided will be returned.
     */

/** Expand all groups. */

/** Collapse all groups. */

/**
     * Registers a callback to a virtual row.
     * A virtual row is a row that is visually rendered on the screen (rows that are not visible because of the scroll position are not rendered).
     * Unlike normal events, you do not need to unregister rendered row listeners.
     * When the rendered row is removed from the grid, all associated rendered row listeners will also be removed.
     * listen for this event if your `cellRenderer` needs to do cleanup when the row no longer exists.
     */

/** Get the current Quick Filter text from the grid, or `undefined` if none is set. */

/** Get the state of the Advanced Filter. Used for saving Advanced Filter state */

/** Set the state of the Advanced Filter. Used for restoring Advanced Filter state */

/** Open the Advanced Filter Builder dialog (if enabled). */

/**
     * Set all of the provided nodes selection state to the provided value.
     */

/**
     * Select all rows, regardless of filtering and rows that are not visible due to grouping being enabled and their groups not expanded.
     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAll'`
     */

/**
     * Clear all row selections, regardless of filtering.
     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAll'`
     */

/**
     * Select all filtered rows.
     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllFiltered'`
     */

/**
     * Clear all filtered selections.
     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllFiltered'`
     */

/**
     * Returns an object containing rules matching the selected rows in the SSRM.
     *
     * If `groupSelectsChildren=false` the returned object will be flat, and will conform to IServerSideSelectionState.
     * If `groupSelectsChildren=true` the returned object will be hierarchical, and will conform to IServerSideGroupSelectionState.
     */

/**
     * Set the rules matching the selected rows in the SSRM.
     *
     * If `groupSelectsChildren=false` the param will be flat, and should conform to IServerSideSelectionState.
     * If `groupSelectsChildren=true` the param will be hierarchical, and should conform to IServerSideGroupSelectionState.
     */

/**
     * Select all rows on the current page.
     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllCurrentPage'`
     */

/**
     * Clear all filtered on the current page.
     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllCurrentPage'`
     */

/** Show the 'loading' overlay. */

/** Show the 'no rows' overlay. */

/** Hides the overlay if showing. */

/**
     * Returns an unsorted list of selected nodes.
     * Getting the underlying node (rather than the data) is useful when working with tree / aggregated data,
     * as the node can be traversed.
     */

/** Returns an unsorted list of selected rows (i.e. row data that you provided). */

/**
     * Returns a list of all selected nodes at 'best cost', a feature to be used with groups / trees.
     * If a group has all its children selected, then the group appears in the result, but not the children.
     * Designed for use with `'children'` as the group selection type, where groups don't actually appear in the selection normally.
     */

/** Retrieve rendered nodes. Due to virtualisation this will contain only the current visible rows and those in the buffer. */

/**
     *  Ensures the column is visible by scrolling the table if needed.
     *
     * This will have no effect before the firstDataRendered event has fired.
     *
     * @param key - The column to ensure visible
     * @param position - Where the column will be positioned.
     * - `auto` - Scrolls the minimum amount to make sure the column is visible.
     * - `start` - Scrolls the column to the start of the viewport.
     * - `middle` - Scrolls the column to the middle of the viewport.
     * - `end` - Scrolls the column to the end of the viewport.
    */

/**
     * Vertically scrolls the grid until the provided row index is inside the visible viewport.
     * If a position is provided, the grid will attempt to scroll until the row is at the given position within the viewport.
     * This will have no effect before the firstDataRendered event has fired.
     */

/**
     * Vertically scrolls the grid until the provided row (or a row matching the provided comparator) is inside the visible viewport.
     * If a position is provided, the grid will attempt to scroll until the row is at the given position within the viewport.
     * This will have no effect before the firstDataRendered event has fired.
     */

/**
     * Similar to `forEachNode`, except lists all the leaf nodes.
     * This effectively goes through all the data that you provided to the grid before the grid performed any grouping.
     * If using tree data, goes through all the nodes for the data you provided, including nodes that have children,
     * but excluding groups the grid created where gaps were missing in the hierarchy.
     */

/**
     * Iterates through each node (row) in the grid and calls the callback for each node.
     * This works similar to the `forEach` method on a JavaScript array.
     * This is called for every node, ignoring any filtering or sorting applied within the grid.
     * If using the Infinite Row Model, then this gets called for each page loaded in the page cache.
     */

/** Similar to `forEachNode`, except skips any filtered out data. */

/** Similar to `forEachNodeAfterFilter`, except the callbacks are called in the order the rows are displayed in the grid. */

/**
     * Returns the filter component instance for a column.
     * `key` can be a string field name or a ColDef object (matches on object reference, useful if field names are not unique).
     * If your filter is created asynchronously, `getFilterInstance` will return `null` so you will need to use the `callback` to access the filter instance instead.
     */

/**
     * Returns the filter component instance for a column.
     * `key` can be a string field name or a ColDef object (matches on object reference, useful if field names are not unique).
     * This method is similar to `getFilterInstance`, but returns a `Promise` instead of using a callback.
     */

/** Destroys a filter. Useful to force a particular filter to be created from scratch again. */

/** Gets the status panel instance corresponding to the supplied `id`. */

/**
     * Returns the current column definitions.
    */

/**
     * Informs the grid that a filter has changed. This is typically called after a filter change through one of the filter APIs.
     * @param source The source of the filter change event. If not specified defaults to `'api'`.
     */

/**
     * Gets the grid to act as if the sort was changed.
     * Useful if you update some values and want to get the grid to reorder them according to the new values.
     */

/**
     * Sets the state of all the column filters. Provide it with what you get from `getFilterModel()` to restore filter state.
     * If inferring cell data types, and row data is provided asynchronously and is yet to be set,
     * the filter model will be applied asynchronously after row data is added.
     * To always perform this synchronously, set `cellDataType = false` on the default column definition,
     * or provide cell data types for every column.
     */

/** Gets the current state of all the column filters. Used for saving filter state. */

/**
     * Gets the current filter model for the specified column.
     * Will return `null` if no active filter.
     */

/**
     * Sets the filter model for the specified column.
     * Setting a `model` of `null` will reset the filter (make inactive).
     * Must wait on the response before calling `api.onFilterChanged()`.
     */

/** Returns the focused cell (or the last focused cell if the grid lost focus). */

/** Clears the focused cell. */

/** Sets the focus to the specified cell. `rowPinned` can be either 'top', 'bottom' or null (for not pinned). */

/** Adds a drop zone outside of the grid where rows can be dropped. */

/** Removes an external drop zone added by `addRowDropZone`. */

/** Returns the `RowDropZoneParams` to be used by another grid's `addRowDropZone` method. */

/** Returns `true` if the side bar is visible. */

/** Show/hide the entire side bar, including any visible panel and the tab buttons. */

/** Sets the side bar position relative to the grid. Possible values are `'left'` or `'right'`. */

/** Opens a particular tool panel. Provide the ID of the tool panel to open. */

/** Closes the currently open tool panel (if any). */

/** Returns the ID of the currently shown tool panel if any, otherwise `null`. */

/** Force refresh all tool panels by calling their `refresh` method. */

/** Returns `true` if the tool panel is showing, otherwise `false`. */

/** Gets the tool panel instance corresponding to the supplied `id`. */

/** Returns the current side bar configuration. If a shortcut was used, returns the detailed long form. */

/** Tells the grid to recalculate the row heights. */

/**
     * Sets the `rowCount` and `maxRowFound` properties.
     * The second parameter, `maxRowFound`, is optional and if left out, only `rowCount` is set.
     * Set `rowCount` to adjust the height of the vertical scroll.
     * Set `maxRowFound` to enable / disable searching for more rows.
     * Use this method if you add or remove rows into the dataset and need to reset the number of rows or instruct the grid that the entire row count is no longer known.
     */

/** Tells the grid a row height has changed. To be used after calling `rowNode.setRowHeight(newHeight)`. */

/**
     * Gets the value for a column for a particular `rowNode` (row).
     * This is useful if you want the raw value of a cell e.g. if implementing your own CSV export.
     */

/**
     * Add an event listener for the specified `eventType`.
     * Works similar to `addEventListener` for a browser DOM element.
     * Listeners will be automatically removed when the grid is destroyed.
     */

/**
     * Add an event listener for all event types coming from the grid.
     * Listeners will be automatically removed when the grid is destroyed.
     */

/** Remove an event listener. */

/** Remove a global event listener. */

/** Will destroy the grid and release resources. If you are using a framework you do not need to call this, as the grid links in with the framework lifecycle. However if you are using Web Components or native JavaScript, you do need to call this, to avoid a memory leak in your application. */

// Get framework link before this is destroyed

// this is needed as GridAPI is a bean, and GridAPI.destroy() is called as part

// of context.destroy(). so we need to stop the infinite loop.

// Set after pre-destroy so user can still use the api in pre-destroy event and it is not marked as destroyed yet.

// destroy the services

// some users were raising support issues with regards memory leaks. the problem was the customers applications

// were keeping references to the API. trying to educate them all would be difficult, easier to just remove

// all references in the API so at least the core grid can be garbage collected.

/** Returns `true` if the grid has been destroyed. */

/** Reset the Quick Filter cache text on every rowNode. */

/** Returns the list of selected cell ranges. */

/** Adds the provided cell range to the selected ranges. */

/** Clears the selected ranges. */

/** Reverts the last cell edit. */

/** Re-applies the most recently undone cell edit. */

/** Returns current number of available cell edit undo operations. */

/** Returns current number of available cell edit redo operations. */

/** Returns a list of models with information about the charts that are currently rendered from the grid. */

/** Returns the `ChartRef` using the supplied `chartId`. */

/** Returns a base64-encoded image data URL for the referenced chartId. */

/** Starts a browser-based image download for the referenced chartId. */

/** Open the Chart Tool Panel. */

/** Close the Chart Tool Panel. */

/** Used to programmatically create charts from a range. */

/** Used to programmatically create pivot charts from a grid. */

/** Used to programmatically create cross filter charts from a range. */

/** Used to programmatically update a chart. */

/** Restores a chart using the `ChartModel` that was previously obtained from `getChartModels()`. */

/** Copies data to clipboard by following the same rules as pressing Ctrl+C. */

/** Cuts data to clipboard by following the same rules as pressing Ctrl+X. */

/** Copies the selected rows to the clipboard. */

/** Copies the selected ranges to the clipboard. */

/** Copies the selected range down, similar to `Ctrl + D` in Excel. */

/** Pastes the data from the Clipboard into the focused cell of the grid. If no grid cell is focused, calling this method has no effect. */

/** Shows the column menu after and positions it relative to the provided button element. Use in conjunction with your own header template. */

// use grid column so works with pivot mode

/** Shows the column menu after and positions it relative to the mouse event. Use in conjunction with your own header template. */

/** Hides any visible context menu or column menu. */

// hide the context menu if in enterprise

// and hide the column menu always

/** Navigates the grid focus to the next cell, as if tabbing. */

/** Navigates the grid focus to the previous cell, as if shift-tabbing. */

/** Returns the list of active cell renderer instances. */

/** Returns the list of active cell editor instances. Optionally provide parameters to restrict to certain columns / row nodes. */

/** If the grid is editing, returns back details of the editing cell(s). */

/** If a cell is editing, it stops the editing. Pass `true` if you want to cancel the editing (i.e. don't accept changes). */

/** Start editing the provided cell. If another cell is editing, the editing will be stopped in that other cell. */

/** Add an aggregation function with the specified key. */

/** Add aggregations function with the specified keys. */

/** Clears all aggregation functions (including those provided by the grid). */

/** Apply transactions to the server side row model. */

/** Batch apply transactions to the server side row model. */

/**
     * Applies row data to a server side store.
     * New rows will overwrite rows at the same index in the same way as if provided by a datasource success callback.
     *
     * startRow is only applicable when `suppressServerSideInfiniteScroll=false`
    */

/** Gets all failed server side loads to retry. */

/** Update row data. Pass a transaction object with lists for `add`, `remove` and `update`. */

/** Same as `applyTransaction` except executes asynchronously for efficiency. */

/** Executes any remaining asynchronous grid transactions, if any are waiting to be executed. */

/**
     * Marks all the currently loaded blocks in the cache for reload.
     * If you have 10 blocks in the cache, all 10 will be marked for reload.
     * The old data will continue to be displayed until the new data is loaded.
     */

/**
     * Purges the cache.
     * The grid is then told to refresh. Only the blocks required to display the current data on screen are fetched (typically no more than 2).
     * The grid will display nothing while the new blocks are loaded.
     * Use this to immediately remove the old data from the user.
     */

/**
     * Refresh a server-side store level.
     * If you pass no parameters, then the top level store is refreshed.
     * To refresh a child level, pass in the string of keys to get to the desired level.
     * Once the store refresh is complete, the storeRefreshed event is fired.
     */

/** Returns info on all server side group levels. */

/** The row count defines how many rows the grid allows scrolling to. */

/** Returns `true` if grid allows for scrolling past the last row to load more rows, thus providing infinite scroll. */

/**
     * Returns an object representing the state of the cache. This is useful for debugging and understanding how the cache is working.
     */

/** Get the index of the first displayed row due to scrolling (includes invisible rendered rows in the buffer). */

/** Get the index of the last displayed row due to scrolling (includes invisible rendered rows in the buffer). */

/** Returns the displayed `RowNode` at the given `index`. */

/** Returns the total number of displayed rows. */

/**
     * Returns `true` when the last page is known.
     * This will always be `true` if you are using the Client-Side Row Model for pagination.
     * Returns `false` when the last page is not known; this only happens when using Infinite Row Model.
     */

/** Returns how many rows are being shown per page. */

/** Returns the 0-based index of the page which is showing. */

/** Returns the total number of pages. Returns `null` if `paginationIsLastPageFound() === false`. */

/** The total number of rows. Returns `null` if `paginationIsLastPageFound() === false`. */

/** Navigates to the next page. */

/** Navigates to the previous page. */

/** Navigates to the first page. */

/** Navigates to the last page. */

/** Goes to the specified page. If the page requested doesn't exist, it will go to the last page. */

// Methods migrated from old ColumnApi

/**
     * Sets columns to adjust in size to fit the grid horizontally.
     * Can provide params or a fixed pixel width to control how the columns are resized.
     * If inferring cell data types with custom column types
     * and row data is provided asynchronously, the column sizing will happen asynchronously when row data is added.
     * To always perform this synchronously, set `cellDataType = false` on the default column definition.
     **/

/** Call this if you want to open or close a column group. */

/** Returns the column group with the given name. */

/** Returns the provided column group with the given name. */

/** Returns the display name for a column. Useful if you are doing your own header rendering and want the grid to work out if `headerValueGetter` is used, or if you are doing your own column management GUI, to know what to show as the column name. */

/** Returns the display name for a column group (when grouping columns). */

/** Returns the column with the given `colKey`, which can either be the `colId` (a string) or the `colDef` (an object). */

/** Returns all the columns, regardless of visible or not. */

/** Applies the state of the columns from a previous state. Returns `false` if one or more columns could not be found. */

/** Gets the state of the columns. Typically used when saving column state. */

/** Sets the state back to match the originally provided column definitions. */

/** Gets the state of the column groups. Typically used when saving column group state. */

/** Sets the state of the column group state from a previous state. */

/** Returns `true` if pinning left or right, otherwise `false`. */

/** Returns `true` if pinning left, otherwise `false`. */

/** Returns `true` if pinning right, otherwise `false`. */

/** Returns the column to the right of the provided column, taking into consideration open / closed column groups and visible columns. This is useful if you need to know what column is beside yours e.g. if implementing your own cell navigation. */

/** Same as `getVisibleColAfter` except gives column to the left. */

/** Sets the visibility of a column. Key can be the column ID or `Column` object. */

/** Same as `setColumnVisible`, but provide a list of column keys. */

/** Sets the column pinned / unpinned. Key can be the column ID, field, `ColDef` object or `Column` object. */

/** Same as `setColumnPinned`, but provide a list of column keys. */

/**
     * Returns all the grid columns, same as `getColumns()`, except
     *
     *  a) it has the order of the columns that are presented in the grid
     *
     *  b) it's after the 'pivot' step, so if pivoting, has the value columns for the pivot.
     */

/** Same as `getAllDisplayedColumns` but just for the pinned left portion of the grid. */

/** Same as `getAllDisplayedColumns` but just for the center portion of the grid. */

/** Same as `getAllDisplayedColumns` but just for the pinned right portion of the grid. */

/** Returns all columns currently displayed (e.g. are visible and if in a group, the group is showing the columns) for the pinned left, centre and pinned right portions of the grid. */

/** Same as `getAllGridColumns()`, except only returns rendered columns, i.e. columns that are not within the viewport and therefore not rendered, due to column virtualisation, are not displayed. */

/** Moves a column to `toIndex`. The column is first removed, then added at the `toIndex` location, thus index locations will change to the right of the column after the removal. */

/** Same as `moveColumn` but works on index locations. */

/** Same as `moveColumn` but works on list. */

/** Move the column to a new position in the row grouping order. */

/** Sets the agg function for a column. `aggFunc` can be one of the built-in aggregations or a custom aggregation by name or direct function. */

/** Sets the column width on a single column. The finished flag gets included in the resulting event and not used internally by the grid. The finished flag is intended for dragging, where a dragging action will produce many `columnWidth` events, so the consumer of events knows when it receives the last event in a stream. The finished parameter is optional, and defaults to `true`. */

/** Sets the column widths on multiple columns. This method offers better performance than calling `setColumnWidth` multiple times. The finished flag gets included in the resulting event and not used internally by the grid. The finished flag is intended for dragging, where a dragging action will produce many `columnWidth` events, so the consumer of events knows when it receives the last event in a stream. The finished parameter is optional, and defaults to `true`. */

/** Get the pivot mode. */

/** Returns the pivot result column for the given `pivotKeys` and `valueColId`. Useful to then call operations on the pivot column. */

/** Set the value columns to the provided list of columns. */

/** Get a list of the existing value columns. */

/** Remove the given column from the existing set of value columns. */

/** Like `removeValueColumn` but remove the given list of columns from the existing set of value columns. */

/** Add the given column to the set of existing value columns. */

/** Like `addValueColumn` but add the given list of columns to the existing set of value columns. */

/** Set the row group columns. */

/** Remove a column from the row groups. */

/** Same as `removeRowGroupColumn` but provide a list of columns. */

/** Add a column to the row groups. */

/** Same as `addRowGroupColumn` but provide a list of columns. */

/** Get row group columns. */

/** Set the pivot columns. */

/** Remove a pivot column. */

/** Same as `removePivotColumn` but provide a list of columns. */

/** Add a pivot column. */

/** Same as `addPivotColumn` but provide a list of columns. */

/** Get the pivot columns. */

/** Same as `getAllDisplayedColumnGroups` but just for the pinned left portion of the grid. */

/** Same as `getAllDisplayedColumnGroups` but just for the center portion of the grid. */

/** Same as `getAllDisplayedColumnGroups` but just for the pinned right portion of the grid. */

/** Returns all 'root' column headers. If you are not grouping columns, these return the columns. If you are grouping, these return the top level groups - you can navigate down through each one to get the other lower level headers and finally the columns at the bottom. */

/**
     * Auto-sizes a column based on its contents. If inferring cell data types with custom column types and row data is provided asynchronously,
     * the column sizing will happen asynchronously when row data is added. To always perform this synchronously,
     * set `cellDataType = false` on the default column definition.
     */

/**
     * Same as `autoSizeColumn`, but provide a list of column keys. If inferring cell data types with custom column types
     * and row data is provided asynchronously, the column sizing will happen asynchronously when row data is added.
     * To always perform this synchronously, set `cellDataType = false` on the default column definition.
     */

/**
     * Calls `autoSizeColumns` on all displayed columns. If inferring cell data types with custom column types
     * and row data is provided asynchronously, the column sizing will happen asynchronously when row data is added.
     * To always perform this synchronously, set `cellDataType = false` on the default column definition.
     */

/** Set the pivot result columns. */

/** Returns the grid's pivot result columns. */

/** Get the current state of the grid. Can be used in conjunction with the `initialState` grid option to save and restore grid state. */

/**
     * Returns the grid option value for a provided key.
     */

/**
     * Updates a single `Managed` gridOption to the new value provided.
     * If updating multiple options, it is recommended to instead use `api.updateGridOptions()` which batches update logic.
     */

/**
     * Updates the provided subset of `Managed` gridOptions with the provided values.
     */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Set the top pinned rows. Call with no rows / undefined to clear top pinned rows.
     **/

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Set the bottom pinned rows. Call with no rows / undefined to clear bottom pinned rows.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * DOM element to use as the popup parent for grid popups (context menu, column menu etc).
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Resets the data type definitions. This will update the columns in the grid.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Set whether the grid paginates the data or not.
     *  - `true` to enable pagination
     *  - `false` to disable pagination
     */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Sets the `paginationPageSize`, then re-paginates the grid so the changes are applied immediately.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Resets the side bar to the provided configuration. The parameter is the same as the sideBar grid property. The side bar is re-created from scratch with the new config.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Sets the `groupIncludeFooter` property
     */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Sets the `groupIncludeTotalFooter` property
     */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Sets the `deltaSort` property
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Sets the `suppressRowDrag` property.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Sets the `suppressMoveWhenRowDragging` property.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Sets the `suppressRowClickSelection` property.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Enable/disable the Advanced Filter
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Updates the `includeHiddenColumnsInAdvancedFilter` grid option.
     * By default hidden columns are excluded from the Advanced Filter.
     * Set to `true` to include them.
     */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * DOM element to use as the parent for the Advanced Filter, to allow it to appear outside of the grid.
     * Set to `null` to appear inside the grid.
     */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Updates the Advanced Filter Builder parameters.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Pass a Quick Filter text into the grid for filtering.
     * */

/**
     * @deprecated As of v30, hidden columns are excluded from the Quick Filter by default. To include hidden columns, use `setIncludeHiddenColumnsInQuickFilter` instead.
     */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Updates the `includeHiddenColumnsInQuickFilter` grid option.
     * By default hidden columns are excluded from the Quick Filter.
     * Set to `true` to include them.
     */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Updates the `quickFilterParser` grid option,
     * which changes how the Quick Filter splits the Quick Filter text into search terms.
     */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Updates the `quickFilterMatcher` grid option,
     * which changes the matching logic for whether a row passes the Quick Filter.
     */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * If `true`, the horizontal scrollbar will always be present, even if not required. Otherwise, it will only be displayed when necessary.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * If `true`, the vertical scrollbar will always be present, even if not required. Otherwise it will only be displayed when necessary.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Call to set new column definitions. The grid will redraw all the column headers, and then redraw all of the rows.
     */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Call to set new auto group column definition. The grid will recreate any auto-group columns if present.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Call to set new Default Column Definition.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Call to set new Column Types.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Sets the `treeData` property.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Set new datasource for Server-Side Row Model.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Updates the `cacheBlockSize` when requesting data from the server if `suppressServerSideInfiniteScroll` is not enabled.
     *
     * Note this purges all the cached data and reloads all the rows of the grid.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Set new datasource for Infinite Row Model.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Set new datasource for Viewport Row Model.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Set the row data.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Sets the `enableCellTextSelection` property.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Sets the height in pixels for the row containing the column label header.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Switch between layout options: `normal`, `autoHeight`, `print`.
     * Defaults to `normal` if no domLayout provided.
     */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Sets the preferred direction for the selection fill handle.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Sets the height in pixels for the rows containing header column groups.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Sets the height in pixels for the row containing the floating filters.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Sets the height in pixels for the row containing the columns when in pivot mode.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     * Sets the height in pixels for the row containing header column groups when in pivot mode.
     * */

/**
     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.
     *  */

/**
     * @deprecated v31 `getRowId` is a static property and cannot be updated.
     *  */

// each part must pass, if any fails, then the whole filter fails

// at this point, processedFields contains data for which we don't have a filter working yet

// because user can provide filters, we provide useful error checking and messages

// called by:

// 1) onFilterChanged()

// 2) onNewRowsLoaded()

// this never happens, including to avoid compile error

// the only filters that can appear on secondary columns are groupAgg filters

// primary columns are only ever groupAgg filters if a) value is active and b) showing primary columns

// from here on we know: isPrimary=true, isValueActive=true, isShowingPrimaryColumns=true

// because users can do custom filters, give nice error message

// sometimes (especially in React) the filter can call onFilterChanged when we are in the middle

// of a render cycle. this would be bad, so we wait for render cycle to complete when this happens.

// this happens in react when we change React State in the grid (eg setting RowCtrl's in RowContainer)

// which results in React State getting applied in the main application, triggering a useEffect() to

// be kicked off adn then the application calling the grid's API. in AG-6554, the custom filter was

// getting it's useEffect() triggered in this way.

// because internal events are not async in ag-grid, when the dispatchEvent

// method comes back, we know all listeners have finished executing.

// if user has elected to always flash cell changes, then always return false, otherwise we suppress flashing

// changes when filtering

// check quick filter

// the row must pass ALL of the filters, so if any of them fail,

// we return true. that means if a row passes the quick filter,

// but fails the column filter, it fails overall

// first up, check quick filter

// secondly, give the client a chance to reject this row

// for backwards compatibility with Angular 1 - we

// used to allow providing back HTML from getGui().

// once we move away from supporting Angular 1

// directly, we can change this.

// When a filter changes as a side effect of a column changes,

// we report 'api' as the source, so that the client can distinguish

// onFilterChanged does this already

// Group column filters can be dependant on underlying column filters, but don't normally get created until they're used for the first time.

// Instead, create them by default when any filter changes.

// for group filters, can change dynamically whether they are allowed or not

// defer to filter component isFilterAllowed if it exists

// destroys the filter, so it no longer takes part

// Case when filter component changes

// Otherwise - Check for refresh method before destruction

// If refresh() method is implemented - call it and destroy filter if it returns false

// Otherwise - do nothing ( filter will not be destroyed - we assume new params are compatible with old ones )

// framework wrapper always implements optional methods, but returns null if no underlying method

// react hooks returns new wrappers, so check nested render method

// don't need to destroy the listeners as they are managed listeners

// this is true when the grid is processing the filter change. this is used by the cell comps, so that they

// don't flash when data changes due to filter changes. there is no need to flash when filter changes as the

// user is in control, so doesn't make sense to show flashing changes. for example, go to main demo where

// this feature is turned off (hack code to always return false for isSuppressFlashingCellsBecauseFiltering(), put in)

// 100,000 rows and group by country. then do some filtering. all the cells flash, which is silly.

// when we're waiting for cell data types to be inferred, we need to defer filter model updates

// because we are providing defaultFloatingFilterType, we know it will never be undefined;

// returns either 'print', 'autoHeight' or 'normal' (normal is the default)

// because RTL is all backwards, a change in the width of the row

// can cause a change in the scroll position, without a scroll event,

// because the scroll position in RTL is a function that depends on

// the width. to be convinced of this, take out this line, enable RTL,

// scroll all the way to the left and then resize a column

// when doing RTL, this method gets called once prematurely

// we do Math.round() rather than Math.floor(), to mirror how scroll values are applied.

// eg if a scale is applied (ie user has zoomed the browser), then applying scroll=200

// could result in 199.88, which then floor(199.88) = 199, however round(199.88) = 200.

// initially Math.floor() was used, however this caused (almost) infinite loop with aligned grids,

// as the scroll would move 1px at at time bouncing from one grid to the next (eg one grid would cause

// scroll to 200px, the next to 199px, then the first back to 198px and so on).

// the `scrollGridIfNeeded` will recalculate the rows to be rendered by the grid

// so it should only be called after `eBodyViewport` has been scrolled to the correct

// position, otherwise the `first` and `last` row could be miscalculated.

// sometimes when scrolling, we got values that extended the maximum scroll allowed. we used to

// ignore these scrolls. problem is the max scroll position could be skipped (eg the previous scroll event

// could be 10px before the max position, and then current scroll event could be 20px after the max position).

// if we just ignored the last event, we would be setting the scroll to 10px before the max position, when in

// actual fact the user has exceeded the max scroll and thus scroll should be set to the max.

// touch devices allow elastic scroll - which temporally scrolls the panel outside of the viewport

// (eg user uses touch to go to the left of the grid, but drags past the left, the rows will actually

// scroll past the left until the user releases the mouse). when this happens, we want ignore the scroll,

// as otherwise it was causing the rows and header to flicker.

// this is to cater for AG-3274, where grid is removed from the dom and then inserted back in again.

// (which happens with some implementations of tabbing). this can result in horizontal scroll getting

// reset back to the left, however no scroll event is fired. so we need to get header to also scroll

// back to the left to be kept in sync.

// adding and removing the grid from the DOM both resets the scroll position and

// triggers a resize event, so notify listeners if the scroll position has changed

// called by scrollHorizontally method and alignedGridsService

// if this is call is coming from the alignedGridsService, we don't need to validate the

// scroll, because it has already been validated by the grid firing the scroll event.

// we need to manually do the event handling (rather than wait for the event)

// for the alignedGridsService, as if we don't, the aligned grid service gets

// notified async, and then it's 'consuming' flag doesn't get used right, and

// we can end up with an infinite loop

/** Get an approximate scroll position that returns the last real value read.
     * This is useful for avoiding repeated DOM reads that force the browser to recalculate styles.
     * This can have big performance improvements but may not be 100% accurate so only use if this is acceptable.
     */

// called by the headerRootComp and moveColumnController

// gets called by rowRenderer when new data loaded, as it will want to scroll to the top

// Valid values for position are bottom, middle and top

// look for the node index we want to display

// go through all the nodes, find the one we want to show

// check object equality against node and data

// position should be {'top','middle','bottom', or undefined/null}.

// if undefined/null, then the grid will to the minimal amount of scrolling,

// eg if grid needs to scroll up, it scrolls until row is on top,

//    if grid needs to scroll down, it scrolls until row is on bottom,

//    if row is already in view, grid does not scroll

// if for print or auto height, everything is always visible

// if row is before, scroll up with row at top

// if row is after, scroll down with row at bottom

// so when we return back to user, the cells have rendered

// defensive

// this will happen anyway, as the move will cause a 'scroll' event on the body, however

// it is possible that the ensureColumnVisible method is called from within AG Grid and

// the caller will need to have the columns rendered to continue, which will be before

// the event has been worked on (which is the case for cell navigation).

// calling ensureColumnVisible on a pinned column doesn't make sense

// Used to provide approximate values of scrollTop and offsetHeight

// without forcing the browser to recalculate styles.

// builds a lits of all rows being dragged before firing events

// when entering, we fire the enter event, then in onEnterOrDragging,

// we also fire the move event. so we get both events when entering.

// this event is fired for enter and move

/* @private */

// element being focused is nested?

// element losing focus belongs to a nested grid,

// it should not be handled here.

// the grid does not contain, or the focus element is within

// a nested grid

// used by ColumnAnimationService

// if we do not do this, then the user can select a pic in the grid (eg an image in a custom cell renderer)

// and then that will start the browser native drag n' drop, which messes up with our own drag and drop.

// this is the element the focus is moving to

// see if click came from inside the viewports

// we don't want to use row animation if scaling, as rows jump strangely as you scroll,

// when scaling and doing row animation.

// we want to listen for clicks directly on the eBodyViewport, so the user has a way of showing

// the context menu if no rows or columns are displayed, or user simply clicks outside of a cell

// allow mouseWheel on the Full Width Container to Scroll the Viewport

// show it

// we do NOT want this when not in iPad

// called by rowDragFeature

// console.log('setting sticky top height ' + height);

// method will call itself if no available width. this covers if the grid

// isn't visible, but is just about to be visible.

// + rangeService

// + focusService

// when using reactUi, given UI is async, it's possible this method is called before the comp is registered

// we only need to update range borders if we are in a range

// this means we are the first column in the grid

// this means we are the last column in the grid

// if no col span is active, then we don't set it up, as it would be wasteful of CPU

// because we are col spanning, a reorder of the cols can change what cols we are spanning over

// because we are spanning over multiple cols, we check for width any time any cols width changes.

// this is expensive - really we should be explicitly checking only the cols we are spanning over

// instead of every col, however it would be tricky code to track the cols we are spanning over, so

// because hardly anyone will be using colSpan, am favouring this easier way for more maintainable code.

// if just one col, the col span is just the column we are in

// overriding to make public, as we don't dispose this bean via context

/**
 * Takes care of:
 *  #) Cell Width (including when doing cell spanning, which makes width cover many columns)
 *  #) Cell Height (when doing row span, otherwise we don't touch the height as it's just row height)
 *  #) Cell Left (the horizontal positioning of the cell, the vertical positioning is on the row)
 */

// if current was previous, skip

/** Using the IoC has a slight performance consideration, which is no problem most of the
 * time, unless we are trashing objects - which is the case when scrolling and rowComp
 * and cellComp. So for performance reasons, RowComp and CellComp do not get autowired
 * with the IoC. Instead they get passed this object which is all the beans the RowComp
 * and CellComp need. Not autowiring all the cells gives performance improvement. */

// iPad doesn't have double click - so we need to mimic it to enable editing for iPad.

// to make callback async, do in a timeout

// edit on single click, but not if extending a range

// returns true if on iPad and this is second 'click' event in 200ms

// always dispatch event to eventService

// check if colDef also wants to handle event

// to make the callback async, do in a timeout

// do not change the range for right-clicks inside an existing range

// if shift clicking, and a range exists, we keep the focus on the cell that started the

// range as the user then changes the range selection.

// this stops the cell from getting focused

// if the focused cell is editing, need to stop editing first

// focus could have been lost, so restore it to the starting cell in the range if needed

// if we don't prevent default, the grid will scroll with the navigation keys

// if we started editing, then we need to prevent default, otherwise the Enter action can get

// applied to the cell editor. this happened, for example, with largeTextCellEditor where not

// preventing default results in a 'new line' character getting inserted in the text area

// when the editing was started

// check this, in case focus is on a (for example) a text field inside the cell,

// in which cse we should not be listening for these key pressed

// if we don't prevent default, then the event also gets applied to the text field

// (at least when doing the default editor), but we need to allow the editor to decide

// what it wants to do. we only do this IF editing was started - otherwise it messes

// up when the use is not doing editing, but using rendering with text fields in cellRenderer

// (as it would block the the user from typing into text fields).

// prevent default as space key, by default, moves browser scroll down

// we need to stop the event propagation here to avoid starting a range selection while dragging

// if we cannot convert the data to json, then we do not set the type

// bad naming, as colDef here can be a group or a column,

// however most people won't appreciate the difference,

// so keeping it as colDef to avoid confusion.

// this makes no sense, why is the cell formatted value passed to the tooltip???

// because of the retry's below, it's possible the retry's go beyond

// the rows life.

// if not in doc yet, means framework not yet inserted, so wait for next VM turn,

// maybe it will be ready next VM turn

// do once to set size in case size doesn't change, common when cell is blank

// either called internally if single cell editing, or called by rowRenderer if row editing

// because of async in React, the cellComp may not be set yet, if no cellComp then we are

// yet to initialise the cell, so we re-schedule this operation for when celLComp is attached

// pass in 'true' to cancel the editing.

// note: this happens because of a click outside of the grid or if the popupEditor

// is closed with `Escape` key. if another cell was clicked, then the editing will

// have already stopped and returned on the conditional above.

/**
     * @returns `True` if the value changes, otherwise `False`.
     */

// we suppressRefreshCell because the call to rowNode.setDataValue() results in change detection

// getting triggered, which results in all cells getting refreshed. we do not want this refresh

// to happen on this call as we want to call it explicitly below. otherwise refresh gets called twice.

// if we only did this refresh (and not the one below) then the cell would flash and not be forced.

/**
     * Ends the Cell Editing
     * @param cancel `True` if the edit process is being canceled.
     * @returns `True` if the value of the `GridCell` has been updated, otherwise `False`.
     */

// passing nothing stops editing

// if the editor is present, then we just focus it

// if the editor is not present, it means async cell editor (eg React fibre)

// and we are trying to set focus before the cell editor is present, so we

// focus the cell instead

// + stop editing {forceRefresh: true, suppressFlash: true}

// + event cellChanged {}

// + cellRenderer.params.refresh() {} -> method passes 'as is' to the cellRenderer, so params could be anything

// + rowCtrl: event dataChanged {suppressFlash: !update, newData: !update}

// + rowCtrl: api refreshCells() {animate: true/false}

// + rowRenderer: api softRefreshView() {}

// if we are in the middle of 'stopEditing', then we don't refresh here, as refresh gets called explicitly

// In React, due to async, it's possible a refresh was asked for before the CellComp was created and calls setComp()

// So we do not run the cell comp refresh logic at this point in time.

// if it's 'new data', then we don't refresh the cellRenderer, even if refresh method is available.

// this is because if the whole data is new (ie we are showing stock price 'BBA' now and not 'SSD')

// then we are not showing a movement in the stock price, rather we are showing different stock.

// we do cellClassRules even if the value has not changed, so that users who have rules that

// look at other parts of the row (where the other part of the row might of changed) will work.

// cell editors call this, when they want to stop for reasons other

// than what we pick up on. eg selecting from a dropdown ends editing.

// user can also call this via API

// we want to highlight the cells, without any animation

// then once that is applied, we remove the highlight with animation

// and then to leave things as we got them, we remove the animation

// if the user provided an equals method, use that, otherwise do simple comparison

// called by rowRenderer when user navigates via tab key

// when index changes, this influences items that need the index, so we update the

// grid cell so they are working off the new index.

// when the index of the row changes, ie means the cell may have lost or gained focus

// check range selection

// Clear the saved focus event

// see if we need to force browser focus - this can happen if focus is programmatically set

// The cell comp has not been rendered yet, but the browser focus is being forced for this cell

// so lets save the event to apply it when setComp is called in the next turn.

// CSS Classes that only get applied once, they never change

// normal cells fill the height of the row. autoHeight cells have no height to let them

// fit the height of content.

// auto height uses wrappers, so need to destroy

// put the checkbox in before the value

// if previously existed, then we are only updating

// row dragging only available in default row model

// otherwise (normal case) we are creating a RowDraggingComp for the first time

// unique id to this instance, including the column ID to help with debugging in React as it's used in 'key'

// pinned rows render before the main grid body in the SSRM, only fire the event after the main body has rendered.

// this is fired within setComp as we know that the component renderer is now trying to render.

// linked with the fact the function implementation queues behind requestAnimationFrame should allow

// us to be certain that all rendering is done by the time the event fires.

// no need to calculate styles already set in constructor

// DOM DATA

// adding hover functionality adds listener to this row, so we

// do it lazily in an animation frame

// the height animation we only want active after the row is alive for 1 second.

// this stops the row animation working when rows are initially created. otherwise

// auto-height rows get inserted into the dom and resized immediately, which gives

// very bad UX (eg 10 rows get inserted, then all 10 expand, look particularly bad

// when scrolling). so this makes sure when rows are shown for the first time, they

// are resized immediately without animation.

// use by autoWidthCalculator, as it clones the elements

// areAllContainersReady asserts that centerGui is not null

// we use instanceId's rather than colId as it's possible there is a Column with same Id,

// but it's referring to a different column instance. Happens a lot with pivot, as pivot col id's are

// reused eg pivot_0, pivot_1 etc

// we want to try and keep editing and focused cells

// if the row had a previous position, we slide it in

// if the row had no previous position, we fade it in

// no refresh needed

// returns 'true' if refresh succeeded

// if the master row node has updated data, we also want to try to refresh the detail row

// if the row is rendered incorrectly, as the requirements for whether this is a FW row have changed, we force re-render this row.

// this bit of logic handles trying to refresh the FW row ctrl, or delegating to removing/recreating it if unsupported.

// if this is an update, we want to refresh, as this will allow the user to put in a transition

// into the cellRenderer refresh method. otherwise this might be completely new data, in which case

// we will want to completely replace the cells

// as data has changed update the dom row id attributes

// check for selected also, as this could be after lazy loading of the row data, in which case

// the id might of just gotten set inside the row and the row selected state may of changed

// as a result. this is what happens when selected rows are loaded in virtual pagination.

// - niall note - since moving to the stub component, this may no longer be true, as replacing

// the stub component now replaces the entire row

// as data has changed, then the style and class needs to be recomputed

// we skip animations for onDisplayedColumnChanged, as otherwise the client could remove columns and

// then set data, and any old valueGetter's (ie from cols that were removed) would still get called.

// can happen with react ui, comp not yet ready

// we don't scroll normal rows into view when we focus them, so we don't want

// to scroll Full Width rows either.

// when first developing this, we included the rowComp in the event.

// this seems very weird. so when introducing the event types, i left the 'source'

// out of the type, and just include the source in the two places where this event

// was fired (rowClicked and rowDoubleClicked). it doesn't make sense for any

// users to be using this, as the rowComp isn't an object we expose, so would be

// very surprising if a user was using it.

// we do not allow selecting groups by clicking (as the click here expands the group), or if it's a detail row,

// so return if it's a group row

// this is needed so we don't unselect other rows when we click this row, eg if this row is not selectable,

// and we click it, the selection should not change (ie any currently selected row should stay selected)

// we also don't allow selection of pinned rows

// if no selection method enabled, do nothing

// if click selection suppressed, do nothing

// selected with no multi key, must make sure anything else is unselected

// if the UI is not ready, the height can be 0, which we ignore, as otherwise a flicker will occur

// as UI goes from the default height, to 0, then to the real height as UI becomes ready. this means

// it's not possible for have 0 as auto-height, however this is an improbable use case, as even an

// empty detail grid would still have some styling around it giving at least a few pixels.

// these need to be taken out, as part of 'afterAttached' now

// if we are already stopping row edit, there is

// no need to start this process again.

// don't do it if already editing

// part 1 - rowStyle

// Return constant reference for React

// part 1 - rowStyleFunc

// Treat undefined as false, if we pass undefined down it gets treated as toggle class, rather than explicitly

// setting the required value

// because we use animation frames to do this, it's possible the row no longer exists

// by the time we get to add it

// because mouseenter and mouseleave do not propagate, we cannot listen on the gridPanel

// like we do for all the other mouse events.

// because of the pinning, we cannot simply add / remove the class based on the eRow. we

// have to check all eRow's (body & pinned). so the trick is if any of the rows gets a

// mouse hover, it sets such in the rowNode, and then all three reflect the change as

// all are listening for event on the row node.

// step 1 - add listener, to set flag on row node

// step 2 - listen for changes on row node (which any eRow can trigger)

// if hover turned off, we don't add the class. we do this here so that if the application

// toggles this property mid way, we remove the hover form the last row, but we stop

// adding hovers from that point onwards. Also, do not highlight while dragging elements around.

// for animation, we don't want to animate entry or exit to a very far away pixel,

// otherwise the row would move so fast, it would appear to disappear. so this method

// moves the row closer to the viewport if it is far away, so the row slide in / out

// at a speed the user can see.

// check for exists first - if the user is resetting the row height, then

// it will be null (or undefined) momentarily until the next time the flatten

// stage is called where the row will then update again with a new height

// If the row height is coming from a function, this means some rows can

// be smaller than the theme had intended. so we set --ag-line-height on

// the row, which is picked up by the theme CSS and is used in a calc

// for the CSS line-height property, which makes sure the line-height is

// not bigger than the row height, otherwise the row text would not fit.

// We do not use rowNode.rowHeight here, as this could be the result of autoHeight,

// and we found using the autoHeight result causes a loop, where changing the

// line-height them impacts the cell height, resulting in a new autoHeight,

// resulting in a new line-height and so on loop.

// const heightFromFunc = this.gridOptionsService.getRowHeightForNode(this.rowNode).height;

// note - this is NOT called by context, as we don't wire / unwire the CellComp for performance reasons.

// why do we have this method? shouldn't everything below be added as a destroy func beside

// the corresponding create logic?

// if we are editing, destroying the row will stop editing

// if we are editing, then moving the focus out of a row will stop editing

// it is possible this row is in the new page, but the page number has changed, which means

// it needs to reposition itself relative to the new page

// the pixel offset is used when calculating rowTop to set on the row DIV

// applies pagination offset, eg if on second page, and page height is 500px, then removes

// 500px from the top position, so a row with rowTop 600px is displayed at location 100px.

// reverse will take the offset away rather than add.

// print layout uses normal flow layout for row positioning

// need to make sure rowTop is not null, as this can happen if the node was once

// visible (ie parent group was expanded) but is now not visible

// the top needs to be set into the DOM element when the element is created, not updated afterwards.

// otherwise the transition would not work, as it would be transitioning from zero (the unset value).

// for example, suppose a row that is outside the viewport, then user does a filter to remove other rows

// and this row now appears in the viewport, and the row moves up (ie it was under the viewport and not rendered,

// but now is in the viewport) then a new RowComp is created, however it should have it's position initialised

// to below the viewport, so the row will appear to animate up. if we didn't set the initial position at creation

// time, the row would animate down (ie from position zero).

// if sliding in, we take the old row top. otherwise we just set the current row top.

// first up, check for cell directly linked to this column

// second up, if not found, then check for spanned cols.

// we do this second (and not at the same time) as this is

// more expensive, as spanning cols is a

// infrequently used feature so we don't need to do this most

// of the time

// we only bother updating if the rowIndex is present. if it is not present, it means this row

// is child of a group node, and the group node was closed, it's the only way to have no row index.

// when this happens, row is about to be de-rendered, so we don't care, rowComp is about to die!

// calls to `isFullWidth()` only work after `setRowType` has been called.

// we do NOT want this when not in iPad, otherwise we will be doing

// if not a scroll key, then we pass onto cell

// perform clipboard and undo / redo operations

// check if ctrl or meta key pressed

// if the cell the event came from is editing, then we do not

// want to do the default shortcut keys, otherwise the editor

// (eg a text field) would not be able to do the normal cut/copy/paste

// centerContainer gets horizontal resizes

// eBodyViewport gets vertical resizes

// remove 50px from the bodyWidth to give some margin

// gets called every time the viewport size changes. we use this to check visibility of scrollbars

// in the grid panel, and also to check size and position of viewport for row and column virtualisation.

// results in updating anything that depends on scroll showing

// fires event if height changes, used by PaginationService, HeightScalerService, RowRenderer

// check for virtual columns for ColumnController

// because of column animation (which takes 200ms), we have to do this twice.

// eg if user removes cols anywhere except at the RHS, then the cols on the RHS

// will animate to the left to fill the gap. this animation means just after

// the cols are removed, the remaining cols are still in the original location

// at the start of the animation, so pre animation the H scrollbar is still needed,

// but post animation it is not.

// this gets called whenever a change in the viewport, so we can inform column controller it has to work

// out the virtual columns again. gets called from following locations:

// + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged

// sticky section must show rows in set order

// when editing a pinned row, if the cell is half outside the scrollable area, the browser can

// scroll the column into view. we do not want this, the pinned sections should never scroll.

// so we listen to scrolls on these containers and reset the scroll if we find one.

// this methods prevents the grid views from being scrolled while the dragService is being used

// eg. the view should not scroll up and down while dragging rows using the rowDragComp.

// we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser

// this just justifies if the ctrl is in the correct place, this will be fed with zombie rows by the

// row renderer, so should not block them as they still need to animate -  the row renderer

// will clean these up when they finish animating

// Maintaining a constant reference enables optimization in React.

// used by pagination service - to know page height

// used by header container

// we put the instance id onto the main DOM element. this is used for events, when grids are inside grids,

// so the grid can work out if the even came from this grid or a grid inside this one. see the ctrl+v logic

// for where this is used.

// walks the path of the event, and returns true if this grid is the first one that it finds. if doing

// master / detail grids, and a child grid is found, then it returns false. this stops things like copy/paste

// getting executed on many grids at the same time.

// handle home and end when ctrl & alt are NOT pressed

// handle when ctrl is pressed only, if shift is pressed

// it will be handled by the rangeService

// handle page up and page down when ctrl & alt are NOT pressed

// setFocusedCell relies on the browser default focus behavior to scroll the focused cell into view,

// however, this behavior will cause the cell border to be cut off, or if we have sticky rows, the

// cell will be completely hidden, so we call ensureIndexVisible without a position to guarantee

// minimal scroll to get the row into view.

// if we don't do this, the range will be left on the last cell, which will leave the last focused cell

// highlighted.

// this method is throttled, see the `constructor`

// because autoHeight will calculate the height of rows after scroll

// first we scroll towards the required point, then we add a small

// delay to allow the height to be recalculated, check which index

// should be focused and then finally navigate to that index.

// TODO: we should probably have an event fired once to scrollbar has

// settled and all rowHeights have been calculated instead of relying

// on a setTimeout of 50ms.

// home brings focus to top left cell, end brings focus to bottom right, grid scrolled to bring

// same cell into view (which means either scroll all the way up, or all the way down).

// result of keyboard event

// only prevent default if we found a cell. so if user is on last cell and hits tab, then we default

// to the normal tabbing so user can exit the grid.

// if we didn't move to next cell, then need to tab out of the cells, ie to the header (if going

// backwards)

// if the case it's a popup editor, the focus is on the editor and not the previous cell.

// in order for the tab navigation to work, we need to focus the browser back onto the

// previous cell.

// comes from API

// if no focus, then cannot navigate

// if cell is not editing, there is still chance row is editing if it's Full Row Editing

// if a cell wasn't found, it's possible that focus was moved to the header

// if we are editing, we know it's not a Full Width Row (RowComp)

// before we stop editing, we need to focus the cell element

// so the grid doesn't detect that focus has left the grid

// need to do this before getting next cell to edit, in case the next cell

// has editable function (eg colDef.editable=func() ) and it depends on the

// result of this cell, so need to save updates from the first edit, in case

// the value is referenced in the function.

// find the next cell to start editing

// called by the cell, when tab is pressed while editing.

// @return: RenderedCell when navigation successful, otherwise null

// allow user to override what cell to go to next

// if no 'next cell', means we have got to last cell of grid, so nothing to move to,

// so bottom right cell going forwards, or top left going backwards

// if editing, but cell not editable, skip cell. we do this before we do all of

// the 'ensure index visible' and 'flush all frames', otherwise if we are skipping

// a bunch of cells (eg 10 rows) then all the work on ensuring cell visible is useless

// (except for the last one) which causes grid to stall for a while.

// note - for full row edit, we do focus non-editable cells, as the row stays in edit mode.

// we have to call this after ensureColumnVisible - otherwise it could be a virtual column

// or row that is not currently in view, hence the renderedCell would not exist

// if next cell is fullWidth row, then no rendered cell,

// as fullWidth rows have no cells, so we skip it

// we successfully tabbed onto a grid cell, so return true

// by default, when we click a cell, it gets selected into a range, so to keep keyboard navigation

// consistent, we set into range here also.

// we use index for rows, but column object for columns, as the next column (by index) might not

// be visible (header grouping) so it's not reliable, so using the column object instead.

// we keep searching for a next cell until we find one. this is how the group rows get skipped

// if the current cell is spanning across multiple columns, we need to move

// our current position to be the last cell on the right before finding the

// the next target.

// eg if going down, and nextCell=undefined, means we are gone past the last row

// no next cell means we have reached a grid boundary, eg left, right, top or bottom of grid

// allow user to override what cell to go to next. when doing normal cell navigation (with keys)

// we allow this, however if processing 'enter after edit' we don't allow override

// ensureCellVisible first, to make sure cell at position is rendered.

// not guaranteed to have a cellComp when using the SSRM as blocks are loading.

// we call this again, as nextCell can be different to it's previous value due to Column Spanning

// (ie if cursor moving from right to left, and cell is spanning columns, then nextCell was the

// last column in the group, however now it's the first column in the group). if we didn't do

// ensureCellVisible again, then we could only be showing the last portion (last column) of the

// merged cells.

// we do not allow focusing on detail rows and full width rows

// this scrolls the row into view

// this can happen if the users asks for the cell to refresh, but we are not showing the vale as we are editing

// this means firstRender will be true for one pass only, as it's initialised to undefined

// all of these have dependencies on the eGui, so only do them after eGui is set

// returns true if wrapper was changed

// if empty, userComponentFactory already did a console message

// if different Cell Renderer configured this time (eg user is using selector, and

// returns different component) then don't refresh, force recreate of Cell Renderer

// this can return null in the event that the user has switched from a renderer component to nothing, for example

// when using a cellRendererSelect to return a component or null depending on row data etc

// never use task service if animation frame service is turned off.

// and lastly we never use it if doing auto-height, as the auto-height service checks the

// row height directly after the cell is created, it doesn't wait around for the tasks to complete        

// we only use task service when rendering for first time, which means it is not used when doing edits.

// if we changed this (always use task service) would make sense, however it would break tests, possibly

// test of users.

// if focus is inside the cell, we move focus to the cell itself

// before removing it's contents, otherwise errors could be thrown.

// if a popup, then we wrap in a popup editor and return the popup

// if the row is also getting destroyed, then we don't need to remove from dom,

// as the row will also get removed, so no need to take out the cells from the row

// if the row is going (removing is an expensive operation, so only need to remove

// the top part)

// every time we go into edit mode, or back again, this gets incremented.

// it's the components way of dealing with the async nature of framework components,

// so if a framework component takes a while to be created, we know if the object

// is still relevant when creating is finished. eg we could click edit / un-edit 20

// times before the first React edit component comes back - we should discard

// the first 19.

// could be old reference, ie removed cell

// check cellComp belongs in this container

// destroys all row comps

// don't create new row comps for rows which are not displayed. still want the existing components

// as they may be animating out.

/** Callback for when drag enters */

// in pivot mode, we don't accept any drops if functions are read only

// we don't allow adding secondary columns

/** Callback for when drag leaves */

// if we are taking columns out of the center, then we remove them from the report

/** Callback for when dragging */

/** Callback for when drag stops */

// the two check below stop an error when the user grabs a group my a middle column, then

// it is possible the mouse pointer is to the right of a column while been dragged left.

// so we need to make sure that the mouse pointer is actually left of the left most column

// if moving left, and right of the right most column if moving right

// we check 'fromEnter' below so we move the column to the new spot if the mouse is coming from

// outside the grid, eg if the column is moving from side panel, mouse is moving left, then we should

// place the column to the RHS even if the mouse is moving left and the column is already on

// the LHS. otherwise we stick to the rule described above.

// if the event was faked by a change in column pin state, then the original location of the column

// is not reliable for dictating where the column may now be placed.

// don't consider 'fromEnter' when dragging header cells, otherwise group can jump to opposite direction of drag

// only allow left drag if this column is moving left

// only allow right drag if this column is moving right

// From when we find a move that passes all the rules

// Remember what that move would look like in terms of displayed cols

// keep going with further moves until we find a different result in displayed output

// In this way potentialMoves contains all potential moves over 'hidden' columns

// Stop looking for potential moves if the displayed result changes from the target

// The best move is the move with least group fragmentation

// returns the index of the first column in the list ONLY if the cols are all beside

// each other. if the cols are not beside each other, then returns null

// A measure of how fragmented in terms of groups an order of columns is

// iterate over the longest one

// this is the list of cols on the screen, so it's these we use when comparing the x mouse position

// but this list is the list of all cols, when we move a col it's the index within this list that gets used,

// so the result we return has to be and index location for this list

// if we are dragging right, then the columns will be to the left of the mouse, so we also want to

// include the width of the moving columns

// now count how many of the displayed columns will fit to the left

// trial and error, if going right, we adjust by one, i didn't manage to quantify why, but it works

// the display index is with respect to all the showing columns, however when we move, it's with

// respect to all grid columns, so we need to translate from display index to grid index

// add in other valid moves due to hidden columns and married children. for example, a particular

// move might break a group that has married children (so move isn't valid), however there could

// be hidden columns (not displayed) that we could jump over to make the move valid. because

// they are hidden, user doesn't see any different, however it allows moves that would otherwise

// not work. for example imagine a group with 9 columns and all columns are hidden except the

// middle one (so 4 hidden to left, 4 hidden to right), then when moving 'firstValidMove' will

// be relative to the not-shown column, however we need to consider the move jumping over all the

// hidden children. if we didn't do this, then if the group just described was at the end (RHS) of the

// grid, there would be no way to put a column after it (as the grid would only consider beside the

// visible column, which would fail valid move rules).

// if dragging right, then we add all the additional moves to the right. so in other words

// if the next move is not valid, find the next move to the right that is valid.

// adding columns here means the order is now messed up

// takes into account visible=false and group=closed, ie it is not displayed

// if dragging left we do the reverse of dragging right, we add in all the valid moves to the

// left. however we also have to consider moves to the right for all hidden columns first.

// (this logic is hard to reason with, it was worked out with trial and error,

// more observation rather than science).

// add moves to the right

// add moves to the left

// flip the coordinate if doing RTL

// adjust for scroll only if centre container (the pinned containers don't scroll)

// we do dummy drag, so make sure column appears in the right location when first placed

// the if statement doesn't work if drag leaves grid, then enters again

// if moving up or down (ie not left or right) then do nothing

// if the user is dragging into the panel, ie coming from the side panel into the main grid,

// we don't want to scroll the grid this time, it would appear like the table is jumping

// each time a column is dragged in.

// if not pin locked, then always allowed to be in this container

// the amounts we move get bigger at each interval, so the speed accelerates, starting a bit slow

// and getting faster. this is to give smoother user experience. we max at 100px to limit the speed.

// we count the failed move attempts. if we fail to move 7 times, then we pin the column.

// this is how we achieve pining by dragging the column to the edge of the grid.

// we want to use the bodyPivotTarget if the user is dragging columns in from the toolPanel

// and we are in pivot mode, as it has to logic to set pivot/value/group on the columns when

// dropped into the grid's body.

// in pivot mode, then if moving a column (ie didn't come from toolpanel) then it's

// a standard column move, however if it came from the toolpanel, then we are introducing

// dimensions or values to the grid

// we pick the drop listener depending on whether we are in pivot mode are not. if we are

// in pivot mode, then dropping cols changes the row group, pivot, value stats. otherwise

// we change visibility state and position.

//noinspection JSUnusedLocalSymbols

// ordering the columns by left position orders them in the order they appear on the screen

// if elements within the header are focused, we don't process the event

// if shiftKey and altKey are not pressed, it's cell navigation so we don't process the event

// when in print layout, the left position is also dependent on the width of the pinned sections.

// so additionally update left if any column width changes.

// setting left has a dependency on print layout

// we must keep track of the left we want to set to, as this would otherwise lead to a race

// condition, if the user changed the left value many times in one VM turn, then we want to make

// make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left

// position. eg if user changes column position twice, then setLeft() below executes twice in next

// VM turn, but only one (the correct one) should get applied.

// test this left value is the latest one to be applied, and if not, do nothing

// if the value is null, then that means the column is no longer

// displayed. there is logic in the rendering to fade these columns

// out, so we don't try and change their left positions.

// empty abstract method

// when the focus is already within the component,

// we default to the browser's behavior

// this is unusual - we need a params value OUTSIDE the component the params are for.

// the params are for the floating filter component, but this property is actually for the wrapper.

// filter button and UI can change based on params, so always want to update

// optionally inverts the drag, depending on pinned and RTL

// note - this method is duplicated in RenderedHeaderGroupCell - should refactor out?

// for RTL, dragging left makes the col bigger, except when pinning left

// for LTR (ie normal), dragging left makes the col smaller, except when pinning right

// in case user is trying this feature with the wrong model type

// make sure checkbox is showing the right state

/// THIS IS BAD - we are assuming the header is not a user provided comp

// class already added, no need to apply it, but remove from old set

// class new since last time, so apply it

// now old set only has classes that were applied last time, but not this time, so remove them

// we do this as a refresh happens after colDefs change, and it's possible the column has had it's

// draggable property toggled. no need to call this if not refreshing, as setDragSource is done

// as part of appendHeaderComp

// if no refresh method, then we want to replace the headerComp

// display name can change if aggFunc different, eg sum(Gold) is now max(Gold)

// we should still be allowed drag the column, even if it can't be moved, if the column

// can be dragged to a rowGroup or pivot drop zone

// this is what makes the header go dark when it is been moved (gives impression to

// user that the column was picked up).

// if spanning has stopped then need to reset these values.

// In theory we could rely on the resize observer for everything - but since it's debounced

// it can be a little janky for smooth movement. in this case its better to react to our own events

// And unfortunately we cant _just_ rely on our own events, since custom components can change whenever

// Displaying the sort icon changes the available area for text, so sort changes can affect height

// Rendering changes for sort, happen after the event... not ideal

// get list of all the column keys we are responsible for

// not all cols in the group may be participating with auto-resize

// note - this method is duplicated in RenderedHeaderCell - should refactor out?

// we need to listen to changes in child columns, as they impact our width

// the children belonging to this group can change, so we need to add and remove listeners as they change

// the child listeners are not tied to this components life-cycle, as children can get added and removed

// to the group - hence they are on a different life-cycle. so we must make sure the existing children

// listeners are removed when we finally get destroyed

// first destroy any old listeners

// the children can change, we keep destroy functions related to listening to the children here

// check to avoid throwing when a component has not been setup yet (React 18)

// having different classes below allows the style to not have a bottom border

// on the group header, if no group is specified

// unlike columns, this will only get called once, as we don't react on props on column groups

// (we will always destroy and recreate this comp if something changes)

// we add in the original group leaf columns, so we move both visible and non-visible items

// when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,

// and in the order they are currently in the screen.

// capture visible state, used when re-entering grid to dictate which columns should be visible

// create and return dragItem

// we are left with non-visible columns, stick these in at the end

// if any child is fixed, then don't allow moving

/**
     *
     * @param comp Proxy to the actual component
     * @param initCompState Should the component be initialised with the current state of the controller. Default: true
     */

// width is managed directly regardless of framework and so is not included in initCompState

// fix for a Safari rendering bug that caused the header to flicker above chart panels

// as you move the mouse over the header

// when print layout changes, it changes what columns are in what section

// if not printing, just return the width as normal

// we want to keep columns that are focused, otherwise keyboard navigation breaks

// skip groups that have no displayed children. this can happen when the group is broken,

// and this section happens to have nothing to display for the open / closed state.

// (a broken group is one that is split, ie columns in the group have a non-group column

// in between them)

// if we already have this cell rendered, do nothing

// for print layout, we add all columns into the center

// when in normal layout, we add the columns for that container only

// grid cols have changed - this also means the number of rows in the header can have

// changed. so we remove all the old rows and insert new ones for a complete refresh

// can happen at initialisation, width not yet set

/* tslint:enable */

// only gets called for center section

// only gets called for pinned sections

// for left and right, we add rows directly to the root element,

// but for center container we add elements to the child container.

/*
     * This method navigates grid header vertically
     * @return {boolean} true to preventDefault on the event that caused this navigation.
     */

/*
     * This method navigates grid header horizontally
     * @return {boolean} true to preventDefault on the event that caused this navigation.
     */

// either navigating to the left or isRtl (cannot be both)

// for setting ag-pivot-on / ag-pivot-off CSS classes

// change the body cursor, so when drag moves out of the drag bar, the cursor is still 'resize' (or 'move'

// we don't want text selection outside the grid (otherwise it looks weird as text highlights when we move)

// need to make sure the filter is present before positioning, as only

// after filter it is visible can we find out what the width of it is

// for standard, we show menu if filter is enabled, and the menu is not suppressed by passing an empty array

// ensure the tab guards are only re-instated once the event has finished processing, to avoid the browser

// tabbing to the tab guard from inside the component

// remove tab guards from this component from list of focusable elements

// focus is in header, move into body of popup

// Safari needs a small timeout or it will fire a scroll event to position 0

// initialise to the current width and height, so first call will have no changes

// the callback function we return sets running to false

// make sure set scheduled to false and clear clear array

// before executing the funcs, as the funcs could add more funcs

// this method is for our AG Grid sanity only - if animation frames are turned off,

// then no place in the code should be looking to add any work to be done in animation

// frames. this stops bugs - where some code is asking for a frame to be executed

// when it should not.

// sort first by row index (taking into account scroll direction), then by

// order of task creation (always ascending, so cells will render left-to-right)

// check for the existence of requestAnimationFrame, and if

// it's missing, then we polyfill it with setTimeout()

// a debounce utility used for parts of the app involved with rendering.

// the advantage over normal debounce is the client can call flushAllFrames()

// to make sure all rendering is complete. we don't wait any milliseconds,

// as this is intended to batch calls in one VM turn.

// p1 and p2 are create tasks are to do with row and cell creation.

// for them we want to execute according to row order, so we use

// TaskItem so we know what index the item is for.

// eg drawing back-ground of rows

// eg cell renderers, adding hover functionality

// destroy tasks are to do with row removal. they are done after row creation as the user will need to see new

// rows first (as blank is scrolled into view), when we remove the old rows (no longer in view) is not as

// important.

// we need to know direction of scroll, to build up rows in the direction of

// the scroll. eg if user scrolls down, we extend the rows by building down.

// expand all parents recursively, except root node.

// we don't really want the user calling this if only one rowNode was expanded, instead they should be

// calling rowNode.setExpanded(boolean) - this way we do a 'keepRenderedRows=false' so that the whole

// grid gets refreshed again - otherwise the row with the rowNodes that were changed won't get updated,

// and thus the expand icon in the group cell won't get 'opened' or 'closed'.

// this is the trick: we create a dummy container and clone all the cells

// into the dummy, then check the dummy's width. then destroy the dummy

// as we don't need it any more.

// drawback: only the cells visible on the screen are considered

// cell isn't visible

// we only consider the lowest level cell, not the group cell. in 99% of the time, this

// will be enough. if we consider groups, then it gets too complicated for what it's worth,

// as the groups can span columns and this class only considers one column at a time.

// position fixed, so it isn't restricted to the boundaries of the parent

// only append the dummyContainer to the DOM after it contains all the necessary items

// this element has to be a form, otherwise form elements within a cell

// will be validated while being cloned. This can cause issues such as 

// radio buttons being reset and losing their values.

// we are finished with the dummy container, so get rid of it

// make a deep clone of the cell

// the original has a fixed width, we remove this to allow the natural width based on content

// the original has position = absolute, we need to remove this so it's positioned normally

// we skip ag-row-position-absolute, as this has structural CSS applied that stops the

// element from fitting into it's parent, and we need the element to stretch the parent

// as we are measuring the parents width

// the twig on the branch, the branch on the tree, the tree in the hole,

// the hole in the bog, the bog in the clone, the clone in the parent,

// the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....

// Tree Data will have `childrenAfterSort` without any nodes, but

// the current node will still be marked as expansible.

// if the rowModel is `serverSide` as only `clientSide` and `serverSide` create this feature.

// only happens when pivoting, and we are showing root node

// added logic to break out of the loop when the row calculation

// changes while rows are becoming sticky (happens with auto height)

// if first row is an open group, and practically shown, it needs

// to be stuck

// Only spread if we need to.

// in a clean design, each cell would register for each of these events. however when scrolling, all the cells

// registering and de-registering for events is a performance bottleneck. so we register here once and inform

// all active cells.

// only for printLayout - because we are rendering all the cells in the same row, regardless of pinned state,

// then changing the width of the containers will impact left position. eg the center cols all have their

// left position adjusted by the width of the left pinned column, so if the pinned left column width changes,

// all the center cols need to be shifted to accommodate this. when in normal layout, the pinned cols are

// in different containers so doesn't impact.

// add listeners to the grid columns

// if the grid columns change, then refresh the listeners again

// executes all functions in destroyFuncsForColumnListeners and then clears the list

// this function adds listeners onto all the grid columns, which are the column that we could have cellComps for.

// when the grid columns change, we add listeners again. in an ideal design, each CellComp would just register to

// the column it belongs to on creation, however this was a bottleneck with the number of cells, so do it here

// once instead.

// for row models that have datasources, when we update the datasource, we need to force the rowRenderer

// to redraw all rows. otherwise the old rows from the old datasource will stay displayed.

// because this is a model updated event (not pinned rows), we

// can skip updating the pinned rows. this is needed so that if user

// is doing transaction updates, the pinned rows are not getting constantly

// trashed - or editing cells in pinned rows are not refreshed and put into read mode

// if no row nodes provided, then refresh everything

// if the dom is not actually focused on a cell, then we don't try to refocus. the problem this

// solves is with editing - if the user is editing, eg focus is on a text field, and not on the

// cell itself, then the cell can be registered as having focus, however it's the text field that

// has the focus and not the cell div. therefore, when the refresh is finished, the grid will focus

// the cell, and not the textfield. that means if the user is in a text field, and the grid refreshes,

// the focus is lost from the text field. we do not want this.

// gets called from:

// +) initialisation (in registerGridComp) params = null

// +) onDomLayoutChanged, params = null

// +) onPageLoaded, recycleRows, animate, newData, newPage from event, onlyBody=true

// +) onPinnedRowDataChanged, recycleRows = true

// +) redrawRows (from Grid API), recycleRows = true/false

// if a cell was focused before, ensure focus now.

// when doing print layout, we don't explicitly set height on the containers

// we need at least 1 pixel for the horizontal scroll to work. so if there are now rows,

// we still want the scroll to be present, otherwise there would be no way to scroll the header

// which might be needed us user wants to access columns

// on the RHS - and if that was where the filter was that cause no rows to be presented, there

// is no way to remove the filter.

// sets the focus to the provided cell, if the cell is provided. this way, the user can call refresh without

// worry about the focus been lost. this is important when the user is using keyboard navigation to do edits

// and the cellEditor is calling 'refresh' to get other cells to update (as other cells might depend on the

// edited cell).

// we don't wish to dispatch an event as the rowRenderer is not capable of changing the selected cell,

// so we mock a change event for the full width rows and cells to ensure they update to the newly selected

// state

// refresh the full width rows too

// skip this row if it is missing from the provided list

/**
     * @param rowNodes if provided, returns the RowCtrls for the provided rowNodes. otherwise returns all RowCtrls.
     */

// returns CellCtrl's that match the provided rowNodes and columns. eg if one row node

// and two columns provided, that identifies 4 cells, so 4 CellCtrl's returned.

// remove all stub nodes, they can't be reused, as no rowNode id

// takes array of row indexes

// if no fromIndex then set to -1, which will refresh everything

// let realFromIndex = -1;

// gets called when rows don't change, but viewport does, so after:

// 1) height of grid body changes, ie number of displayed rows has changed

// 2) grid scrolled to new position

// 3) ensure index visible (which is a scroll)

// only try to refocus cells shifting in and out of sticky container

// if the browser supports focus ({ preventScroll })

// AfterScroll results in flushSync in React but we need to disable flushSync for sticky row group changes to avoid flashing

// for speedy lookup, dump into map

// if we are redrawing due to scrolling change, then old rows are in this.rowCompsByIndex

// if we are redrawing due to model update, then old rows are in rowsToRecycle

// all in all indexes in the viewport

// the row can already exist and be in the following:

// rowsToRecycle -> if model change, then the index may be different, however row may

//                         exist here from previous time (mapped by id).

// this.rowCompsByIndex -> if just a scroll, then this will contain what is currently in the viewport

// never animate when doing print layout - as we want to get things ready to print as quickly as possible,

// otherwise we risk the printer printing a row that's half faded (half way through fading in)

// Don't animate rows that have been added or removed as part of scrolling

// when embedding, what gets showed in each section depends on what is pinned. eg if embedding group expand / collapse,

// then it should go into the pinned left area if pinning left, or the center area if not pinning.

// if either of the pinned panels has shown / hidden, then need to redraw the fullWidth bits when

// embedded, as what appears in each section depends on whether we are pinned or not

// include just full width

// if Row Nodes provided, we exclude where Row Node is missing

// if no row comp, see if we can get it from the previous rowComps

// create a new one

// this should never happen - if somehow we are trying to create

// a row for a rowNode that does not exist.

// set node as 'alreadyRendered' to ensure we only recycle rowComps that have been rendered, this ensures

// we don't reuse rowComps that have been removed and then re-added in the same batch transaction.

// if row was used, then it's null

// this ensures we fire displayedRowsChanged AFTER all the 'executeInAWhileFuncs' get

// executed, as we added it to the end of the list.

// adjust, in case buffer extended actual size

// sometimes user doesn't set CSS right and ends up with grid with no height and grid ends up

// trying to render all the rows, eg 10,000+ rows. this will kill the browser. so instead of

// killing the browser, we limit the number of rows. just in case some use case we didn't think

// of, we also have a property to not do this operation.

/**
     * This event will only be fired once, and is queued until after the browser next renders.
     * This allows us to fire an event during the start of the render cycle, when we first see data being rendered
     * but not execute the event until all of the data has finished being rendered to the dom.
     */

// See AG-7018

// ensureRowHeightsVisible only works with CSRM, as it's the only row model that allows lazy row height calcs.

// all the other row models just hard code so the method just returns back false

// check that none of the rows to remove are editing or focused as:

// a) if editing, we want to keep them, otherwise the user will loose the context of the edit,

//    eg user starts editing, enters some text, then scrolls down and then up, next time row rendered

//    the edit is reset - so we want to keep it rendered.

// b) if focused, we want ot keep keyboard focus, so if user ctrl+c, it goes to clipboard,

//    otherwise the user can range select and drag (with focus cell going out of the viewport)

//    and then ctrl+c, nothing will happen if cell is removed from dom.

// c) if detail record of master detail, as users complained that the context of detail rows

//    was getting lost when detail row out of view. eg user expands to show detail row,

//    then manipulates the detail panel (eg sorts the detail grid), then context is lost

//    after detail panel is scrolled out of / into view.

// if we deffo don't want to keep it,

// editing row, only remove if it is no longer rendered, eg filtered out or new data set.

// the reason we want to keep is if user is scrolling up and down, we don't want to loose

// the context of the editing in process.

// we don't use animations frames for printing, so the user can put the grid into print mode

// and immediately print - otherwise the user would have to wait for the rows to draw in the background

// (via the animation frames) which is awkward to do from code.

// we only do the animation frames after scrolling, as this is where we want the smooth user experience.

// having animation frames for other times makes the grid look 'jumpy'.

// returns true if any row between startIndex and endIndex is rendered. used by

// SSRM or IRM, as they don't want to purge visible blocks from cache.

// map of row ids to row objects. keeps track of which elements

// are rendered for which rows in the dom.

// we only allow one refresh at a time, otherwise the internal memory structure here

// will get messed up. this can happen if the user has a cellRenderer, and inside the

// renderer they call an API method that results in another pass of the refresh,

// then it will be trying to draw rows in the middle of a refresh.

// map for fast access

// list for keeping order

// use supplied formatter if provided, e.g. set filter items can have their own value formatters

// if we don't do this, then arrays get displayed as 1,2,3, but we want 1, 2, 3 (i.e. with spaces)

// this should never happen, just in case, 0 is graceful failure

// only need to range check against the top pixel, as we are going through the list

// in order, first row to hit the pixel wins

/** Transaction was successfully applied */

/**
     * Store was not found, transaction not applied.
     * Either invalid route, or the parent row has not yet been expanded.
     */

/**
     * Store is loading, transaction not applied.
     */

/**
     * Store is loading (as max loads exceeded), transaction not applied.
     */

/**
     * Store load attempt failed, transaction not applied.
     */

/**
     * Store is type Partial, which doesn't accept transactions
     */

/**
     * Transaction was cancelled, due to grid.
     * Callback isApplyServerSideTransaction() returning false
     */

/**
     * Store has not started yet, transaction not applied
     */

// when doing transactions, or change detection, and grouping is present

// in the data, there is no need for the ClientSideRowModel to update each

// group after an update, ony parts that were impacted by the change.

// this class keeps track of all groups that were impacted by a transaction.

// the the different CSRM operations (filter, sort etc) use the forEach method

// to visit each group that was changed.

// can be set inactive by:

// a) ClientSideRowModel, if no transactions or

// b) PivotService, if secondary columns changed

// traverseLeafNodes -> used when NOT doing changed path, ie traversing everything. the callback

// will be called for child nodes in addition to parent nodes.

// if we are active, then use the change path to callback

// only for updated groups

// we are not active, so callback for everything, walk the entire path

// if columns, add the columns in all the way to parent, merging

// in any other columns that might be there already

// called by

// 1) change detection (provides cols) and

// 2) groupStage if doing transaction update (doesn't provide cols)

// we cannot do  both steps below in the same loop as

// the second loop has a dependency on the first loop.

// ie the hierarchy cannot be stitched up yet because

// we don't have it built yet

// create the new PathItem objects.

// link in the node items

// update columns

// whether changed path is active of not. it is active when a) doing

// a transaction update or b) doing change detection. if we are doing

// a CSRM refresh for other reasons (after sort or filter, or user calling

// setRowData() without delta mode) then we are not active. we are also

// marked as not active if secondary columns change in pivot (as this impacts

// aggregations)

// for each node in the change path, we also store which columns need

// to be re-aggregated.

// for quick lookup, all items in the change path are mapped by nodeId

// in case any current loads in progress, this will have their results ignored

// thisIsMostRecentRequest - if block was refreshed, then another request

// could of been sent after this one.

// weAreNotDestroyed - if InfiniteStore is purged, then blocks are destroyed

// and new blocks created. so data loads of old blocks are discarded.

// need to dispatch load complete before processing the data, as PaginationComp checks

// RowNodeBlockLoader to see if it is still loading, so the RowNodeBlockLoader needs to

// be updated first (via LoadComplete event) before PaginationComp updates (via processServerResult method)

// 2 is the default

// note that we do not remove this listener when removing the block. this is because the

// cache can get destroyed (and containing blocks) when a block is loading. however the loading block

// is still counted as an active loading block and we must decrement activeBlockLoadsCount when it finishes.

// important to keep rendered rows, otherwise every time grid is resized,

// we would destroy all the rows.

/** This is only for state setting before data has been loaded */

// we say <=0 (rather than =0) as viewport returns -1 when no rows

// const csrm = <ClientSideRowModel> this.rowModel;

// const rootNode = csrm.getRootNode();

// const masterRows = rootNode.childrenAfterSort;

// masterRows[masterPageStartIndex].rowIndex;

// if showing the last master row, then we want to show the very last row of the model

//masterRows[masterPageEndIndex + 1].rowIndex;

// this gets the index of the last child - eg current row is open, we want to display all children,

// the index of the last child is one less than the index of the next parent row.

// in case className = 'my-class1 my-class2', we need to split into individual class names

// if we're not applying a previous class now, make sure we remove it

// we remove all classes first, then add all classes second,

// in case a class appears in more than one rule, this means it will be added

// if appears in at least one truthy rule

// bad coder here - we are not populating all values of the cellRendererParams

// do this in an animation frame to prevent loops

/**
     * Returns true if the view had to be scrolled, otherwise, false.
     */

// ensure height is applied before attempting to redraw rows

// remove any rows that are no longer required

// refresh any existing rows

// insert any required new rows

// check this row actually exists (in case overflow buffer window exceeds real data)

// keep the DOM order consistent with the order of the rows

// to be replaced later

// if `values` is not present, it means the valuesList was set asynchronously

// make sure the virtual list has been sized correctly

// this second call to refresh is necessary to force scrolled elements

// to be rendered with the correct index info.

// if we don't preventDefault the page body and/or grid scroll will move.

// maxPickerHeight needs to be set after expanding `config`

// Prevent event bubbling to other event handlers such as PopupService triggering

// premature closing of any open sub-menu popup.

// bubble menu item selected events

// wait to see if the user enters the open sub-menu

// activate immediately

// wait to see if the user enters the sub-menu

// de-activate immediately

// called when user hits the 'x' in the top right

// for RTL, try left first

// for LTR, try right first

// if popup is overflowing to the bottom, move it up

// Mouse tracking will recalculate positioning when moving, so won't need to recalculate here

// Only need to reposition when first open, so can clean up after a bit of time

// subtract the popup parent borders, because popupParent.getBoundingClientRect

// returns the rect outside the borders, but the 0,0 coordinate for absolute

// positioning is inside the border, leading the popup to be off by the width

// of the border

// we don't hide popup if the event was on the child, or any

// children of this child

// this method should only be called once. the client can have different

// paths, each one wanting to close, so this method may be called multiple times.

// if we add these listeners now, then the current mouse

// click will be included, which we don't want

// keeps popup positioned under created, eg if context menu, if user scrolls

// using touchpad and the cell moves, it moves the popup to keep it with the cell.

// if the user did not write their own Custom Element to be rendered as popup

// and this component has an additional popup element, they should have the

// `ag-custom-component-popup` class to be detected as part of the Custom Component

// putting in blank if missing, so at least the user can click on it

// reset

// top match is shortest value that starts with the search string, otherwise shortest value that includes the search string

// input position is updated after this is called, so do async

// clicking on the list loses focus, so restore

// ensure the caret is visible

// this is unmanaged as it gets destroyed/created each time it is opened

// for Vanilla JS, we just add the event to the element

/** The base frameworks, eg React & Angular, override this bean with implementations specific to their requirement. */

// returns null if no cell to focus on, ie at the end of the grid

// finished will be true when either:

// a) cell found that we can focus on

// b) run out of cells (ie the method returns null)

// starting with the provided cell, we keep moving until we find a cell we can

// focus on.

// if already on top row, do nothing

// never any rows after pinned bottom

// if on last row of pinned top, then next row is main body (if rows exist),

// otherwise it's the pinned bottom

// if in the main body, then try pinned bottom, otherwise return nothing

// check if end of the row, and if so, go forward a row

// If we are tabbing and there is a paging panel present, tabbing should go

// to the paging panel instead of loading the next page.

// Extract the GridApi from a ref or component

// common logic across all the fire methods

// if we are already consuming, then we are acting on an event from a master,

// so we don't cause a cyclic firing of events

// iterate through the aligned grids, and pass each aligned grid service to the callback

// common logic across all consume methods. very little common logic, however extracting

// guarantees consistency across the methods.

// we cannot support pivoting with aligned grids as the columns will be out of sync as the

// grids will have columns created based on the row data of the grid.

// likewise for column group

// if event was with respect to a master column, that is not present in this

// grid, then we ignore the event

// in time, all the methods below should use the column ids, it's a more generic way

// of handling columns, and also allows for single or multi column events

// don't set flex columns width

// flag to mark if we are consuming. to avoid cyclic events (ie other grid firing back to master

// while processing a master event) we mark this if consuming an event, and if we are, then

// we don't fire back any events.

// groupSelectsFiltered only makes sense when group selects children

// if node is a footer, we don't do selection, just pass the info

// to the sibling (the parent of the group)

// when deselecting nodes, we want to use the last deselected node

// as starting point for deselection

// when groupSelectsFiltered, then this node may end up intermediate despite

// trying to set it to true / false. this group will be calculated further on

// down when we call calculatedSelectedForAllGroupNodes(). we need to skip it

// here, otherwise the updatedCount would include it.

// clear other nodes if not doing multi select

// only if we selected something, then update groups and fire events

// selects all rows between this node and the last selected node (or the top if this is the first selection).

// not to be mixed up with 'cell range selection' where you drag the mouse, this is row range selection, by

// holding down 'shift'.

/**
     * This method is used by the CSRM to remove groups which are being disposed of,
     * events do not need fired in this case
     */

// should only be called if groupSelectsChildren=true

// we only do this when group selection state depends on selected children

// also only do it if CSRM (code should never allow this anyway)

// we do not store the group rows when the groups select children

// if the id has changed for the node, then this means the rowNode

// is getting used for a different data item, which breaks

// our selectedNodes, as the node now is mapped by the old id

// which is inconsistent. so to keep the old node as selected,

// we swap in the clone (with the old id and old data). this means

// the oldNode is effectively a daemon we keep a reference to,

// so if client calls api.getSelectedNodes(), it gets the daemon

// in the result. when the client un-selects, the reference to the

// daemon is removed. the daemon, because it's an oldNode, is not

// used by the grid for rendering, it's a copy of what the node used

// to be like before the id was changed.

// returns a list of all nodes at 'best cost' - a feature to be used

// with groups / trees. if a group has all it's children selected,

// then the group appears in the result, but not the children.

// Designed for use with 'children' as the group selection type,

// where groups don't actually appear in the selection normally.

// recursive function, to find the selected nodes

// remember the reference can be to null, as we never 'delete' from the map

// this clears down the map (whereas above only sets the items in map to 'undefined')

// the above does not clean up the parent rows if they are selected

// if no rows, always have it unselected

// if mix of selected and unselected, this is indeterminate

/**
     * @param justFiltered whether to just include nodes which have passed the filter
     * @param justCurrentPage whether to just include nodes on the current page
     * @returns all nodes including unselectable nodes which are the target of this selection attempt
     */

// if the group node is expanded, the pagination proxy will include the visible nodes to select

/** @deprecated v31 use `api.sizeColumnsToFit()` instead.   */

/** @deprecated v31 use `api.setColumnGroupOpened() instead. */

/** @deprecated v31 use `api.getColumnGroup() instead. */

/** @deprecated v31 use `api.getProvidedColumnGroup() instead. */

/** @deprecated v31 use `api.getDisplayNameForColumn() instead. */

/** @deprecated v31 use `api.getDisplayNameForColumnGroup() instead. */

/** @deprecated v31 use `api.getColumn() instead. */

/** @deprecated v31 use `api.getColumns() instead. */

/** @deprecated v31 use `api.applyColumnState() instead. */

/** @deprecated v31 use `api.getColumnState() instead. */

/** @deprecated v31 use `api.resetColumnState() instead. */

/** @deprecated v31 use `api.getColumnGroupState() instead. */

/** @deprecated v31 use `api.setColumnGroupState() instead. */

/** @deprecated v31 use `api.resetColumnGroupState() instead. */

/** @deprecated v31 use `api.isPinning() instead. */

/** @deprecated v31 use `api.isPinningLeft() instead. */

/** @deprecated v31 use `api.isPinningRight() instead. */

/** @deprecated v31 use `api.getDisplayedColAfter() instead. */

/** @deprecated v31 use `api.getDisplayedColBefore() instead. */

/** @deprecated v31 use `api.setColumnVisible() instead. */

/** @deprecated v31 use `api.setColumnsVisible() instead. */

/** @deprecated v31 use `api.setColumnPinned() instead. */

/** @deprecated v31 use `api.setColumnsPinned() instead. */

/** @deprecated v31 use `api.getAllGridColumns() instead. */

/** @deprecated v31 use `api.getDisplayedLeftColumns() instead. */

/** @deprecated v31 use `api.getDisplayedCenterColumns() instead. */

/** @deprecated v31 use `api.getDisplayedRightColumns() instead. */

/** @deprecated v31 use `api.getAllDisplayedColumns() instead. */

/** @deprecated v31 use `api.getAllDisplayedVirtualColumns() instead. */

/** @deprecated v31 use `api.moveColumn() instead. */

/** @deprecated v31 use `api.moveColumnByIndex() instead. */

/** @deprecated v31 use `api.moveColumns() instead. */

/** @deprecated v31 use `api.moveRowGroupColumn() instead. */

/** @deprecated v31 use `api.setColumnAggFunc() instead. */

/** @deprecated v31 use `api.setColumnWidth() instead. */

/** @deprecated v31 use `api.setColumnWidths() instead. */

/** @deprecated v31 use `api.setPivotMode() instead. */

/** @deprecated v31 use `api.isPivotMode() instead. */

/** @deprecated v31 use `api.getPivotResultColumn() instead. */

/** @deprecated v31 use `api.setValueColumns() instead. */

/** @deprecated v31 use `api.getValueColumns() instead. */

/** @deprecated v31 use `api.removeValueColumn() instead. */

/** @deprecated v31 use `api.removeValueColumns() instead. */

/** @deprecated v31 use `api.addValueColumn() instead. */

/** @deprecated v31 use `api.addValueColumns() instead. */

/** @deprecated v31 use `api.setRowGroupColumns() instead. */

/** @deprecated v31 use `api.removeRowGroupColumn() instead. */

/** @deprecated v31 use `api.removeRowGroupColumns() instead. */

/** @deprecated v31 use `api.addRowGroupColumn() instead. */

/** @deprecated v31 use `api.addRowGroupColumns() instead. */

/** @deprecated v31 use `api.getRowGroupColumns() instead. */

/** @deprecated v31 use `api.setPivotColumns() instead. */

/** @deprecated v31 use `api.removePivotColumn() instead. */

/** @deprecated v31 use `api.removePivotColumns() instead. */

/** @deprecated v31 use `api.addPivotColumn() instead. */

/** @deprecated v31 use `api.addPivotColumns() instead. */

/** @deprecated v31 use `api.getPivotColumns() instead. */

/** @deprecated v31 use `api.getLeftDisplayedColumnGroups() instead. */

/** @deprecated v31 use `api.getCenterDisplayedColumnGroups() instead. */

/** @deprecated v31 use `api.getRightDisplayedColumnGroups() instead. */

/** @deprecated v31 use `api.getAllDisplayedColumnGroups() instead. */

/** @deprecated v31 use `api.autoSizeColumn() instead. */

/** @deprecated v31 use `api.autoSizeColumns() instead. */

/** @deprecated v31 use `api.autoSizeAllColumns() instead. */

/** @deprecated v31 use `api.setPivotResultColumns() instead. */

/** @deprecated v31 use `api.getPivotResultColumns() instead. */

// hack - the grid is getting refreshed before this bean gets initialised, race condition.

// really should have a way so they get initialised in the right order???

// pull these out to make code below easier to read

// this is for group footers in SSRM, as the SSRM row won't have groupData, need to extract

// the group value from the data using the row field

// the result could be an expression itself, if we are allowing cell values to be expressions

/**
     * Sets the value of a GridCell
     * @param rowNode The `RowNode` to be updated
     * @param colKey The `Column` to be updated
     * @param newValue The new value to be set
     * @param eventSource The event source
     * @returns `True` if the value has been updated, otherwise`False`.
     */

// this will only happen if user is trying to paste into a group row, which doesn't make sense

// the user should not be trying to paste into group rows

// if no change to the value, then no need to do the updating, or notifying via events.

// otherwise the user could be tabbing around the grid, and cellValueChange would get called

// all the time.

// in case user forgot to return something (possible if they are not using TypeScript

// and just forgot we default the return value to true, so we always refresh.

// reset quick filter on this row

// if inside the same turn, just return back the value we got last time

// if a turn is active, store the value in case the grid asks for it again

// used by row grouping and pivot, to get key for a row. col can be a pivot col or a row grouping col

// if already a string, or missing, just return it

// valueGetter is an expression, so execute the expression

// the expression failed, which can happen, as it's the client that

// provides the expression. so print a nice message

// check cache first

// if not found in cache, return the function

// store in cache

// if the expression has the 'return' word in it, then use as is,

// if not, then wrap it with return and ';' to make a function

// returns the template if it is loaded, or null if it is not loaded

// but will call the callback when it is loaded

// caller needs to wait for template to load, so return null

// first time this was called, so need a new list for callbacks

// add this callback

// response success, so process it

// in IE9 the response is in - responseText

// inform all listeners that this is now in the cache

// we could pass the callback the response, however we know the client of this code

// is the cell renderer, and it passes the 'cellRefresh' method in as the callback

// which doesn't take any parameters.

// this drop target is just used to see if the drop event is inside the grid

// we want to override the default behaviour to do nothing for onTabKeyDown

// auto correct - if sort not legal value, then set it to 'no sort' (which is null)

// sortIndex used for knowing order of cols when multi-col sort

// reset sort index on everything

// gets called by API, so if data changes, use can call this, which will end up

// working out the sort order again of the rows.

// pull out all the columns that have sorting set

// Do not clear if either holding shift, or if column in question was clicked

// add to list of cleared cols when sort direction is set

// setting to 'undefined' as null means 'none' rather than cleared, otherwise issue will arise

// if sort order is: ['desc', null , 'asc'], as it will start at null rather than 'desc'.

// verify the sort type exists, as the user could provide the sortingOrder, need to make sure it's valid

/**
     * @returns a map of sort indexes for every sorted column, if groups sort primaries then they will have equivalent indices
     */

// if linked sorting, replace all columns with the display group column for index purposes, and ensure uniqueness

// put the columns in order of which one got sorted first

// add the row group cols back

// used by server side row models, to sent sort to server

// if column has unique data, its sorting is independent - but can still be mixed

// if the columns change, check and see if this column still exists. if it does, then

// we can keep the focused cell. if it doesn't, then we need to drop the focused cell.

// we check if the browser is focusing something, and if it is, and

// it's the cell we think is focused, then return the cell. so this

// methods returns the cell if a) we think it has focus and b) the

// browser thinks it has focus. this then returns nothing if we

// first focus a cell, then second click outside the grid, as then the

// grid cell will still be focused as far as the grid is concerned,

// however the browser focus will have moved somewhere else.

// we check that the browser is actually focusing on the grid, if it is not, then

// we have nothing to worry about. we check for ROW data, as this covers both focused Rows (for Full Width Rows)

// and Cells (covers cells as cells live in rows)

// we have nothing to worry about

// Clear the restore focused cell position after the timeout to avoid

// the cell being focused again and stealing focus from another part of the app.

// The restoredFocusedCellPosition is used in the React Rendering engine as we have to be able

// to support restoring focus after an async rendering.

// if column doesn't exist, then blank the focused cell and return. this can happen when user sets new columns,

// and the focused cell is in a column that no longer exists. after columns change, the grid refreshes and tries

// to re-focus the focused cell.

// if suppressCellFocus is `true`, it means the user does not want to

// navigate between the cells using tab. Instead, we put focus on either

// the header or after the grid, depending on whether tab or shift-tab was pressed.

// up the count, so we can tell if someone else has updated the count

// by the time the 'wait' func executes

// only remove the class if this thread was the last one to update it

// Clipboard service manages its own change detection, so no need to do it here.

// The clipboard manages its own as otherwise this would happen once for every cell

// that got updated as part of a paste operation, so e.g. if 100 cells in a paste operation,

// this doChangeDetection would get called 100 times (once for each cell), instead clipboard

// service executes the logic we have here once (in essence batching up all cell changes

// into one change detection).

// step 1 of change detection is to update the aggregated values

// add all nodes impacted by aggregation, as they need refreshed also.

// step 2 of change detection is to refresh the cells

// this item is required for custom themes

// because we are talking pixels, no point in confusing things with half numbers

// the scrollY position

// how tall the body is

/**
     * Used by CSRM only, to update selectable state after group state changes.
     */

// Only in the CSRM, we allow group node selection if a child has a selectable=true when using groupSelectsChildren

// Needs to be depth first in this case, so that parents can be updated based on child.

// Normal case, update all rows

// When `pivotMode=true` and no grouping or value columns exist, a single 'hidden' group row (root node) is in

// the grid and the pagination totals will correctly display total = 1. However this is confusing to users as

// they can't see it. To address this UX issue we simply set the totals to zero in the pagination panel.

// a group node with no group or agg data will not be visible to users

// wrapping in outer div, and wrapper, is needed to center the loading icon

// if both missing

// if only one missing

// tests if this row selection is before the other row selection

// we we are floating top, and other isn't, then we are always before

// if we are floating bottom, and the other isn't, then we are never before

// if we are not floating, but the other one is floating...

// undo / redo is restricted to actual editing so we clear the stacks when other operations are

// performed that change the order of the row / cols.

// checks if the row has been filtered out

// when single cells are being processed, they should be considered

// as ranges when the rangeService is present (singleCellRanges).

// otherwise focus will be restore but the range will not.

// if type==null, means the header level didn't exist

// we don't include padding groups, as the column groups provided

// by application didn't have these. the whole point of padding groups

// is to balance the column tree that the user provided.

// if colDef for this group already exists, use it

// if we added to result, it would be the second time we did it

// we don't want to continue up the tree, as it has already been

// done for this group

// Ensure we don't get stuck in an infinite loop

// we use absolute position unless we are doing print layout

// part 2 - rowClassFunc

// not catered for, if creating, no need

// to remove class as it was never there

// if a leaf, and a parent exists, put a level of the parent, else put level of 0 for top level item

// Iterate columns, return the first that doesn't match

//if comparator provided, use it

// All matched, we make is so that the original sort order is kept:

// comparator on col get preference over everything else

// if a 'field' is supplied on the autoGroupColumnDef we need to use the associated column comparator

// because they're group rows, no display cols exist, so groupData never populated.

// instead delegate to getting value from leaf child.

// initialiseInvisibleScrollbar should only be called once, but the reason

// this can't be inside `setComp` or `PostConstruct` is the DOM might not

// be ready, so we call it until eventually, it gets calculated.

// we pad the right based on a) if cols are pinned to the right and

// b) if v scroll is showing on the right (normal position of scroll)

// because the user can call rowNode.setExpanded() many times in one VM turn,

// we throttle the calls to ClientSideRowModel using animationFrameService. this means for 100

// row nodes getting expanded, we only update the CSRM once, and then we fire all events after

// CSRM has updated.

// if we did not do this, then the user could call setExpanded on 100+ rows, causing the grid

// to re-render 100+ times, which would be a performance lag.

// we use animationFrameService

// rather than _.debounce() so this will get done if anyone flushes the animationFrameService

// (eg user calls api.ensureRowVisible(), which in turn flushes ).

// if not using CSRM, we don't debounce. otherwise this breaks the SSRM.

// supported on all row models, but need module for client side.

// This is quicker then having code call gridOptionsService.get('context')

// Ensure the propertyEventService has framework overrides set so that it can fire events outside of angular

// sets an initial calculation for the scrollbar width

/**
     * Get the raw value of the GridOptions property provided.
     * @param property
     */

/**
     * Get the GridOption callback but wrapped so that the common params of api,columnApi and context are automatically applied to the params.
     * @param property GridOption callback properties based on the fact that this property has a callback with params extending AgGridCommon
     */

/**
     * Returns `true` if a value has been specified for this GridOption.
     * @param property GridOption property
     */

/**
    * Wrap the user callback and attach the api, columnApi and context to the params object on the way through.
    * @param callback User provided callback
    * @returns Wrapped callback where the params object not require api, columnApi and context
    */

// changeSet should just include the properties that have changed.

// *************** Helper methods ************************** //

// Methods to share common GridOptions related logic that goes above accessing a single property

// the user might be using some non-standard scrollbar, eg a scrollbar that has zero

// width and overlays (like the Safari scrollbar, but presented in Chrome). so we

// allow the user to provide the scroll width before we work it out.

// check the function first, in case use set both function and

// number, when using virtual pagination then function can be

// used for pinned rows and the number for the body rows.

// if autoHeight, we want the height to grow to the new height starting at 1, as otherwise a flicker would happen,

// as the detail goes to the default (eg 200px) and then immediately shrink up/down to the new measured height

// (due to auto height) which looks bad, especially if doing row animation.

// we don't allow dynamic row height for virtual paging

// returns the dom data, or undefined if not found

// if user is providing document, we use the users one,

// otherwise we use the document on the global namespace.

// never allow animating if enforcing the row order

// if we are doing hideOpenParents we also show multiple columns, otherwise hideOpenParents would not work

// we never allow groupDisplayType = 'groupRows' if in pivot mode, otherwise we won't see the pivot values.

/**
     * Handles value coercion including validation of ranges etc. If value is invalid, undefined is set, allowing default to be used.
     */

// responsible for calling the onXXX functions on gridOptions

// It forces events defined in GridOptionsService.alwaysSyncGlobalEvents to be fired synchronously.

// This is required for events such as GridPreDestroyed.

// Other events can be fired asynchronously or synchronously depending on config.

// prevent events from being fired _after_ the grid has been destroyed

// remove to maintain correct ordering

// only if it's valid do we override with a provided one

// the resulting type of these will be the same, so we call valueFormatter anyway

// we don't want to double format the value

// as this is already formatted by using the valueFormatter as the keyCreator

// `groupHideOpenParents` passes leaf values in the group column, so need to format still.

// If it's not a string, we know it hasn't been formatted. Otherwise check the data type matcher.

// if the column state has been updated, don't update again

// can be empty space with legacy copy

// keep track of any column state updates whilst waiting for data types to be inferred

// we wait until the UI has finished initialising before setting in columns and rows

// hide overlay if columns and rows exist, this can happen if columns are loaded after data.

// this problem exists before of the race condition between the services (column controller in this case)

// and the view (grid panel). if the model beans were all initialised first, and then the view beans second,

// this race condition would not happen.

// sidebar reads the initial state itself, so don't need to set

// aggregation

// columnOrder

// columnPinning

// columnSizing

// columnVisibility

// pivot

// rowGroup

// any column

// reset sidebar as it could have updated when columns changed

// We want to suppress any grid events, but not user events.

// Using a timeout here captures things like column resizing and emits a single grid initializing event.

// We only want the grid initializing source.

// this is a sub validator.

// deprecated properties generally

// properties to recommend

// Vue adds these properties to all objects, so we ignore them when checking for invalid properties

// When the paginationPageSize option is set to a value that is

// not in the list of page size options.

// Toggle the selector to force a refresh of the options and hide the empty option,

// as it's no longer needed.

/**
 * Creates a grid inside the provided HTML element.
 * @param eGridDiv Parent element to contain the grid.
 * @param gridOptions Configuration for the grid.
 * @param params Individually register AG Grid Modules to this grid.
 * @returns api to be used to interact with the grid.
 */

// Ensure we do not mutate the provided gridOptions

// @deprecated v31 api / columnApi no longer mutated onto the provided gridOptions

// Instead we place a getter that will log an error when accessed and direct users to the docs

// Only apply for direct usages of createGrid, not for frameworks

/**
 * @deprecated v31 use createGrid() instead
 */

// need to remove these, as we don't own the lifecycle of the gridOptions, we need to

// remove the references in case the user keeps the grid options, we want the rest

// of the grid to be picked up by the garbage collector

// Maintain existing behaviour by mutating gridOptions with the apis for deprecated new Grid()

// Shallow copy to prevent user provided gridOptions from being mutated.

// Detailed error message will have been printed by createBeansList

// only load beans matching the required row model

// assert that the relevant module has been loaded

// beans should only contain SERVICES, it should NEVER contain COMPONENTS

// creates services of grid only, no UI, so frameworks can use this if providing

// their own UI

// we use rootNode as the parent, however if using ag-grid-enterprise, the grouping stage

// sets the parent node on each row (even if we are not grouping). so setting parent node

// here is for benefit of ag-grid-community users

// we do this regardless of nodes to unselect or not, as it's possible

// a new node was inserted, so a parent that was previously selected (as all

// children were selected) should not be tri-state (as new one unselected against

// all other selected children).

// create new row nodes for each data item

// new rows are inserted in one go by concatenating them in between the existing rows at the desired index.

// this is much faster than splicing them individually into 'allLeafChildren' when there are large inserts.

// add new row nodes to the transaction add items

// do delete - setting 'suppressFinishActions = true' to ensure EVENT_SELECTION_CHANGED is not raised for

// each row node updated, instead it is raised once by the calling code if any selected nodes exist.

// so row renderer knows to fade row out (and not reposition it)

// NOTE: were we could remove from allLeaveChildren, however _.removeFromArray() is expensive, especially

// if called multiple times (eg deleting lots of rows) and if allLeafChildren is a large list

// _.removeFromArray(this.rootNode.allLeafChildren, rowNode);

// find rowNode using id

// find rowNode using object references

// this is the default, for when doing grid data

// when user is provide the id's, we also keep a map of ids to row nodes for convenience

// doesn't need done if doing full reset

// Property listeners which call `refreshModel` at different stages

// Omitted Properties

// We do not act reactively on all functional properties, as it's possible the application is React and

// has not memoised the property and it's getting set every render.

// ** LIST OF NON REACTIVE, NO ARGUMENT

// getDataPath, getRowId, isRowMaster -- these are called once for each Node when the Node is created.

//                                    -- these are immutable Node properties (ie a Node ID cannot be changed)

// 

// getRowHeight - this is called once when Node is created, if a new getRowHeight function is provided,

//              - we do not revisit the heights of each node.

// pivotDefaultExpanded - relevant for initial pivot column creation, no impact on existing pivot columns. 

// deltaSort - this changes the type of algorithm used only, it doesn't change the sort order. so no point

//           - in doing the sort again as the same result will be got. the new Prop will be used next time we sort.

// ** LIST OF NON REACTIVE, SOME ARGUMENT

// ** For these, they could be reactive, but not convinced the business argument is strong enough,

// ** so leaving as non-reactive for now, and see if anyone complains.

// processPivotResultColDef, processPivotResultColGroupDef

//                       - there is an argument for having these reactive, that if the application changes

//                       - these props, we should re-create the Pivot Columns, however it's highly unlikely

//                       - the application would change these functions, far more likely the functions were

//                       - non memoised correctly.

// we do this multiple times as changing the row heights can also change the first and last rows,

// so the first pass can make lots of rows smaller, which means the second pass we end up changing

// more rows.

// returns false if row was moved, otherwise true

// if hideOpenParents, and this row open, then this row is now displayed at this index, first child is

// for updates, if the row is updated at all, then we re-calc all the values

// in that row. we could compare each value to each old value, however if we

// did this, we would be calling the valueService twice, once on the old value

// and once on the new value. so it's less valueGetter calls if we just assume

// each column is different. that way the changedPath is used so that only

// the impacted parent rows are recalculated, parents who's children have

// not changed are not impacted.

// return true if we are only doing update transactions

// this goes through the pipeline of stages. what's in my head is similar

// to the diagram on this page:

// http://commons.apache.org/sandbox/commons-pipeline/pipeline_basics.html

// however we want to keep the results of each stage, hence we manually call

// each step rather than have them chain each other.

// fallthrough in below switch is on purpose,

// eg if STEP_FILTER, then all steps below this

// step get done

// let start: number;

// console.log('======= start =======');

// depends on agg fields

// set all row tops to null, then set row tops on all visible rows. if we don't

// do this, then the algorithm below only sets row tops, old row tops from old rows

// will still lie around

// if lastSelectedNode is missing, we start at the first row

// range has been closed, skip till end

// check if this is the last node we're going to be adding

// still haven't hit a boundary node, keep searching

// only select leaf nodes if groupsSelectChildren

// do binary search of tree

// http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/

// quick check, if the pixel is out of bounds, then return last row

// if pixel is less than or equal zero, it's always the first row

// iterates through each item in memory, and calls the callback function

// nodes - the rowNodes to traverse

// callback - the user provided callback

// recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc

// index - works similar to the index in forEach in javascript's array function

// go to the next level if it is a group

// depending on the recursion type, we pick a difference set of children

// for pivot, we don't go below leafGroup levels

// it's possible to recompute the aggregate without doing the other parts

// + api.refreshClientSideRowModel('aggregate')

// If filterAggregatesStage is undefined, then so is the grouping stage, so all children should be on the rootNode.

// + gridApi.expandAll()

// + gridApi.collapseAll()

// although id is typed a string, this could be called by the user, and they could have passed a number

// rows: the rows to put into the model

// no need to invalidate cache, as the cache is stored on the rowNode,

// so new rowNodes means the cache is wiped anyway.

// - clears selection, done before we set row data to ensure it isn't readded via `selectionService.syncInOldRowNode`

// this event kicks off:

// - shows 'no rows' overlay if needed

// do callbacks in next VM turn so it's async

// if doing immutableData, addIndex is never present. however if doing standard transaction, and user

// provided addIndex, then this is used in updateRowData. However if doing Enterprise, then the rowGroup

// stage also uses the

// common to updateRowData and batchUpdateRowData

/** This method is debounced. It is used for row auto-height. If we don't debounce,
     * then the Row Models will end up recalculating each row position
     * for each row height change and result in the Row Renderer laying out rows.
     * This is particularly bad if using print layout, and showing eg 1,000 rows,
     * each row will change it's height, causing Row Model to update 1,000 times.
     */

// when pivotMode but pivot not active, root node is displayed on its own

// because it's only ever displayed alone, refreshing the model (onRowHeightChanged) is not required

// we keep the height each row is at, however we set estimated=true rather than clear the height.

// this means the grid will not reset the row heights back to defaults, rather it will re-calc

// the height for each row as the row is displayed. otherwise the scroll will jump when heights are reset.

// App can start using API to add transactions, so need to add data into the node manager if not started

// the rows mapped to rows to display

/** Has the start method been called */

/** E.g. data has been set into the node manager already */

/**
         * This is to prevent refresh model being called when it's already being called.
         * E.g. the group stage can trigger initial state filter model to be applied. This fires onFilterChanged,
         * which then triggers the listener here that calls refresh model again but at the filter stage
         * (which is about to be run by the original call).
         */

// even if not doing grouping, we do the mapping, as the client might

// of passed in data that already has a grouping in it somewhere

// these two are mutually exclusive, so if first set, we don't set the second

// check all these cases, for working out if this row should be included in the final mapped list

// if we are pivoting, we never map below the leaf group

// we traverse the group if it is expended, however we always traverse if the parent node

// was removed (as the group will never be opened if it is not displayed, we show the children instead)

// ensure node is available.

// remove node if it's unnecessary.

// duplicated method, it's also in floatingRowModel

// we clear out the 'pull down open parents' first, as the values mix up the sorting

// if there's no sort to make, skip this step

// all leaf level nodes in the transaction were impacted

// Merge two sorted arrays into each other

// Traverse both array, adding them in order

// Check if current element of first

// array is smaller than current element

// of second array. If yes, store first

// array element and increment first array

// index. Otherwise do same with second array

// add remaining from arr1

// add remaining from arr2

// recurse breadth first over group nodes after sort to 'pull down' group data to child groups

// if doing a clear operation, we clear down the value for every possible group column

// recursively get all children that are groups to also filter

// result of filter for this node. when filtering tree data, includeChildNodes = true when parent passes

// a group is included in the result if it has any children of it's own.

// by this stage, the child groups are already filtered

// both leaf level nodes and tree data nodes have data. these get added if

// the data passes the filter

// note - tree data nodes pass either if a) they pass themselves or b) any children of that node pass

// tree data filter traverses the hierarchy depth first and includes child nodes if parent passes

// filter, and parent nodes will be include if any children exist.

// first check if current node passes filter before invoking child nodes

// this property is a backwards compatibility property, for those who want

// the old behaviour of Row ID's but NOT Immutable Data.

// converts the setRowData() command to a transaction

// split all the new data in the following:

// if new, push to 'add'

// if update, push to 'update'

// if not changed, do not include in the transaction

// otherwise, if data not changed, we just don't include it anywhere, as it's not a delta

// remove from list, so we know the item is not to be removed

// at this point, all rows that are left, should be removed

// convert the data into a transaction object by working out adds, removes and updates

// DO NOT UPDATE MANUALLY: Generated from script during build time

// this means if the user is not providing id's we just use the

// index for the row. this will allow selection to work (that is based

// on index) as long user is not inserting or deleting rows,

// or wanting to keep selection between server side sorting or filtering

// put in timeout, to force result to be async

// todo - this method has better handling in SSRM

// creates empty row nodes, data is missing as not loaded yet

// if the node had no id and was rendered, but we have data for it now, then

// destroy the old row and copy its position into new row. This prevents an additional

// set of events being fired as the row renderer tries to understand the changing id

// clean up the old row

// this is needed, so row render knows to fade out the row, otherwise it

// sees row top is present, and thinks the row should be shown.

// we don't need to calculate these now, as the inputs don't change,

// however it makes the code easier to read if we work them out up front

// the rowRenderer will not pass dontCreatePage, meaning when rendering the grid,

// it will want new pages in the cache as it asks for rows. only when we are inserting /

// removing rows via the api is dontCreatePage set, where we move rows between the pages.

// we have this on infinite row model only, not server side row model,

// because for server side, it would leave the children in inconsistent

// state - eg if a node had children, but after the refresh it had data

// for a different row, then the children would be with the wrong row node.

// block calls this, when page loaded

// if we are not active, then we ignore all events, otherwise we could end up getting the

// grid to refresh even though we are no longer the active cache

// we fire cacheUpdated even if the row count has not changed, as some items need updating even

// if no new rows to render. for example the pagination panel has '?' as the total rows when loading

// is underway, which would need to get updated when loading finishes.

// we exclude checking for the page just created, as this has yet to be accessed and hence

// the lastAccessed stamp will not be updated for the first time yet

// at this point, block is not needed, so burn baby burn

// if client provided a last row, we always use it, as it could change between server calls

// if user deleted data and then called refresh on the grid.

// if undefined is passed, we do not set this value, if one of {true,false}

// is passed, we do set the value.

// if we are still searching, then the row count must not end at the end

// of a particular page, otherwise the searching will not pop into the

// next page

// gets called 1) row count changed 2) cache purged 3) items inserted

// if the virtualRowCount is shortened, then it's possible blocks exist that are no longer

// in the valid range. so we must remove these. this can happen if user explicitly sets

// the virtual row count, or the datasource returns a result and sets lastRow to something

// less than virtualRowCount (can happen if user scrolls down, server reduces dataset size).

// if zero rows in the cache, we need to get the SSRM to start asking for rows again.

// otherwise if set to zero rows last time, and we don't update the row count, then after

// the purge there will still be zero rows, meaning the SSRM won't request any rows.

// to kick things off, at least one row needs to be asked for.

// if only one node passed, we start the selection at the top

// this property says how many empty blocks should be in a cache, eg if scrolls down fast and creates 10

// blocks all for loading, the grid will only load the last 2 - it will assume the blocks the user quickly

// scrolled over are not needed to be loaded.

// we don't implement as lazy row heights is not supported in this row model

// if cache params, we require reset only if sort model has changed. we don't need to check

// for filter model, as the filter manager will fire an event when columns change that result

// in the filter changing.

// only reset if we have a valid datasource to working with

// important to return here, as the user could be setting filter or sort before

// data-source is set

// if user is providing id's, then this means we can keep the selection between datasource hits,

// as the rows will keep their unique id's even if, for example, server side sorting or filtering

// is done.

// not sure if these should all be false - noticed if after implementing,

// maybe they should be true?

// if not first time creating a cache, need to destroy the old one

// the user provided datasource

// sort and filter model

// properties - this way we take a snapshot of them, so if user changes any, they will be

// used next time we create a new cache, which is generally after a filter or sort change,

// or a new datasource is set

// if user doesn't provide overflow, we use default overflow of 1, so user can scroll past

// the current page and request first row of next page

// page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the

// server for one page at a time. so the default if not specified is 100.

// the cache could create this, however it is also used by the pages, so handy to create it

// here as the settings are also passed to the pages

// for iRowModel

// we render the group summary text e.g. "-> Parent -> Child"...

// only on group rows

// if this is a top level footer, always render`Total` in the left-most cell

// @ts-ignore

// replace whatever newlines are supplied with the style we're using

// first pass, put in the header names of the cols

// if we are in pivotMode, then the grid will show the root node only

// if it's not a leaf group

// when in pivot mode, we always render cols on screen, never 'all columns'

// must be enterprise, so we can just loop through all the nodes

// onlySelectedAllPages: user doing pagination and wants selected items from

// other pages, so cannot use the standard row model as it won't have rows from

// other pages.

// onlySelectedNonStandardModel: if user wants selected in non standard row model

// (eg viewport) then again RowModel cannot be used, so need to use selected instead.

// serialize each node

// here is everything else - including standard row model and selected. we don't use

// the selection model even when just using selected, so that the result is the order

// of the rows appearing on the screen.

// if the level is the same, compare these nodes, or their parents

// if level is different, match levels

// sort the nodes either by existing row index or compare them

// last modified time

// last modified date

// compressed size

// uncompressed size

// file name length

// extra field

// external file attributes

// relative offset of local header

// file name

// total number of entries in the central folder

// size of the central folder

// central folder start offset

// table for crc calculation

// from: https://referencesource.microsoft.com/#System/sys/System/IO/compression/Crc32Helper.cs,3b31978c7d7f7246,references

/* 15 */

/* 16 */

// 7.1.13 ToObject(argument)

/* 17 */

// ag-grid-react v31.0.3

/* 18 */

/* 19 */

/* 20 */

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */

// Don't bother if no value provided

// Force an array if not already something iterable

/*eslint no-param-reassign:0*/

// Iterate over array values

// Iterate over object keys

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */

/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */

/* 21 */

/* 22 */

/* 23 */

// to indexed object, toObject with fallback for non-array-like ES3 strings

/* 24 */

// important to not make a copy if nothing has changed, so react

// won't trigger a render cycle on new object instance

/**
 * The aim of this function is to maintain references to prev or next values where possible.
 * If there are not real changes then return the prev value to avoid unnecessary renders.
 * @param maintainOrder If we want to maintain the order of the elements in the dom in line with the next array
 * @returns
 */

// If same array instance nothing to do.

// If both empty arrays maintain reference of prev.

// If maintaining dom order just return next

// If prev is empty just return next immediately as no previous order to maintain

// If prev was not empty but next is empty return next immediately

// if dom order not important, we don't want to change the order

// of the elements in the dom, as this would break transition styles

// All the same values exist just maybe in a different order so maintain the existing reference

// All new values so avoid spreading the new array to maintain the reference

/* 25 */

// eslint-disable-next-line no-useless-call

/* 26 */

// DCE check should happen before ReactDOM bundle executes so that

// DevTools can report bad minification during injection.

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

// Verify that the code above has been dead code eliminated (DCE'd).

// DevTools shouldn't crash React, no matter what.

// We should still report in case we break this code.

/* 27 */

// optional / simple context binding

/* 28 */

/* 29 */

// 7.1.4 ToInteger

/* 30 */

/* 31 */

// most Object methods by ES6 should accept primitives

/* 32 */

// 0 -> Array#forEach

// 1 -> Array#map

// 2 -> Array#filter

// 3 -> Array#some

// 4 -> Array#every

// 5 -> Array#find

// 6 -> Array#findIndex

// map

// some

// find

// findIndex

// filter

// every

/* 33 */

/* 34 */

// 7.2.1 RequireObjectCoercible(argument)

/* 35 */

// eslint-disable-next-line no-undef

/* , mapfn, thisArg */

/* , end */

/* , thisArg */

/* , start, end */

// eslint-disable-line no-unused-vars

/* , fromIndex */

/* , initialValue */

/* , offset */

/* noop */

// eslint-disable-next-line max-statements

// eslint-disable-line no-new

// `ws` module bug, temporarily remove validation length for Uint8Array

// https://github.com/websockets/ws/pull/645

/* 36 */

// do nothing

/* 37 */

// 7.1.1 ToPrimitive(input [, PreferredType])

// instead of the ES6 spec version, we didn't implement @@toPrimitive case

// and the second argument - flag - preferred type is a string

/* 38 */

// object ID

// return primitive with prefix

// can't set metadata to uncaught frozen object

// not necessary to add metadata

// add missing metadata

/* 39 */

/* 40 */

/* 41 */

/* 42 */

// 19.1.2.14 / 15.2.3.14 Object.keys(O)

/* 43 */

/* 44 */

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])

// Thrash, waste and sodomy: IE GC bug

// eslint-disable-line no-script-url

// createDict = iframe.contentWindow.Object;

// html.removeChild(iframe);

// add "__proto__" for Object.getPrototypeOf polyfill

/* 45 */

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

/* 46 */

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)

/* 47 */

// 22.1.3.31 Array.prototype[@@unscopables]

/* 48 */

/* 49 */

/* 50 */

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js

/* 51 */

/* 52 */

/* 53 */

/* 54 */

/* 55 */

/* 56 */

/* 57 */

// This works in non-strict mode

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// g can still be undefined, but nothing to do about it...

// We return undefined, instead of nothing here, so it's

// easier to handle this case. if(!global) { ...}

/* 58 */

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/

// css base code, injected by the css-loader

// eslint-disable-next-line func-names

// return the list of modules as css string

// eslint-disable-next-line prefer-destructuring

// Adapted from convert-source-map (MIT)

// import a list of modules into the list

// eslint-disable-next-line no-param-reassign

/* 59 */

// Test for IE <= 9 as proposed by Browserhacks

// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805

// Tests for existence of standard globals is to allow style-loader

// to operate correctly into non-standard environments

// @see https://github.com/webpack-contrib/style-loader/issues/177

// Special case to return head of iframe instead of iframe itself

// This will throw an exception if access to iframe is blocked

// due to cross-origin restrictions

// istanbul ignore next

/* istanbul ignore next  */

// For old IE

/* istanbul ignore if  */

// istanbul ignore if

// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>

// tags it will allow on a page

/* 60 */

/**
 * Show a JS Component
 * @returns Effect Cleanup function
 */

// in case we were destroyed before async comp was returned

// almost all JS Comps are NOT async, however the Floating Multi Filter is Async as it could

// be wrapping a React filter, so we need to cater for async comps here.

// js comps are never async

/* 61 */

/* 62 */

// fallback for non-array-like ES3 and non-enumerable old V8 strings

// eslint-disable-next-line no-prototype-builtins

/* 63 */

/* 64 */

// getting tag from 19.1.3.6 Object.prototype.toString()

/* 65 */

// 7.3.20 SpeciesConstructor(O, defaultConstructor)

/* 66 */

/* 67 */

// false -> Array#indexOf

// true  -> Array#includes

// Array#includes uses SameValueZero equality algorithm

// eslint-disable-next-line no-self-compare

// Array#indexOf ignores holes, Array#includes - not

/* 68 */

/* 69 */

// 7.2.2 IsArray(argument)

/* 70 */

// eslint-disable-next-line no-throw-literal

/* 71 */

// 21.2.5.3 get RegExp.prototype.flags

/* 72 */

// `RegExpExec` abstract operation

// https://tc39.github.io/ecma262/#sec-regexpexec

/* 73 */

// #replace needs built-in support for named groups.

// #match works fine because it just return the exec results, even if it has

// a "grops" property.

// String methods call symbol-named RegEp methods

// Symbol-named RegExp methods call .exec

// RegExp[@@split] doesn't call the regex's exec method, but first creates

// a new one. We need to return the patched regex when creating the new one.

// 21.2.5.6 RegExp.prototype[@@match](string)

// 21.2.5.9 RegExp.prototype[@@search](string)

/* 74 */

// fast case for arrays with default iterator

/* 75 */

/* 76 */

// V8 ~ Chromium 42- fails only with 5+ elements

// weak collections should not contains .clear method

// create collection constructor

/* 77 */

/* 78 */

/* 79 */

/* 80 */

/* 81 */

/* 82 */

/* 83 */

/* 84 */

// IE 8- don't enum bug keys

/* 85 */

/* 86 */

// Works with __proto__ only. Old v8 can't work with null proto objects.

/* eslint-disable no-proto */

// eslint-disable-line

/* 87 */

/* 88 */

/* 89 */

/* 90 */

// 20.2.2.28 Math.sign(x)

/* 91 */

// 20.2.2.14 Math.expm1(x)

/* 92 */

// true  -> String#at

// false -> String#codePointAt

/* 93 */

// Fix native

// Set @@toStringTag to native iterators

// fix for some old engines

// fix Array#{values, @@iterator}.name in V8 / FF

// Define iterator

// Plug for library

/* 94 */

// helper for String#{startsWith, endsWith, includes}

/* 95 */

// 7.2.8 IsRegExp(argument)

/* 96 */

/* 97 */

// check on default Array iterator

/* 98 */

/* 99 */

/* 100 */

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

/* , start = 0, end = @length */

/* 101 */

// 22.1.3.4 Array.prototype.entries()

// 22.1.3.13 Array.prototype.keys()

// 22.1.3.29 Array.prototype.values()

// 22.1.3.30 Array.prototype[@@iterator]()

// target

// next index

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

/* 102 */

// Fix browsers whose `exec` methods don't consistently return `undefined`

// for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/

// eslint-disable-next-line no-loop-func

/* 103 */

// `AdvanceStringIndex` abstract operation

// https://tc39.github.io/ecma262/#sec-advancestringindex

/* 104 */

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:

// eslint-disable-next-line no-new-func

// Node.js 0.8-

/* 105 */

// IEEE754 conversions based on https://github.com/feross/ieee754

// iOS Safari 7.x bug

/* , littleEndian */

/* 106 */

/* 107 */

/* 108 */

/* 109 */

/* 110 */

/* 111 */

/* unused harmony export noAuto */

/* unused harmony export config */

/* unused harmony export toHtml */

/* unused harmony export layer */

/* unused harmony export text */

/* unused harmony export counter */

/* unused harmony export library */

/* unused harmony export dom */

// Getting an empty string will occur if the attribute is set on the HTML tag but without a value

// We'll assume that this is an indication that it should be toggled to true

// For example <script data-search-pseudo-elements src="..."></script>

/**
   * Font Awesome 4 used the prefix of `fa` for all icons. With the introduction
   * of new styles we needed to differentiate between them. Prefix `fa` is now an alias
   * for `fas` so we'll easy the upgrade process for our users by automatically defining
   * this as well.
   */

/* 112 */

/* 113 */

/* 114 */

/* 115 */

// Don't enum bug & hidden keys

/* 116 */

/* 117 */

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

/* 118 */

// 19.1.2.1 Object.assign(target, source, ...)

// should work with symbols and should have deterministic property order (V8 bug)

/* 119 */

// 7.2.9 SameValue(x, y)

/* 120 */

/* , ...args */

/* 121 */

// fast apply, http://jsperf.lnkit.com/fast-apply/5

/* 122 */

/* 123 */

/* 124 */

/* 125 */

// 20.1.2.3 Number.isInteger(number)

/* 126 */

// 20.2.2.20 Math.log1p(x)

/* 127 */

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

/* 128 */

// call something on iterator step with safe closing on error

// 7.4.6 IteratorClose(iterator, completion)

/* 129 */

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)

/* 130 */

/* 131 */

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

/* = 0 */

/* = 0, end = @length */

/* 132 */

/* 133 */

/* 134 */

// 21.2.5.3 get RegExp.prototype.flags()

/* 135 */

// correct subclassing with @@species support

// unhandled rejections tracking support, NodeJS Promise without it fails @@species test

// may throw

// variable length - can't use forEach

// Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

// unwrap

// constructor polyfill

// 25.4.3.1 Promise(executor)

// eslint-disable-next-line no-unused-vars

// <- awaiting reactions

// <- checked in isUnhandled reactions

// <- state

// <- done

// <- value

// <- rejection state, 0 - default, 1 - handled, 2 - unhandled

// 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)

// 25.4.5.1 Promise.prototype.catch(onRejected)

// statics

// 25.4.4.5 Promise.reject(r)

// 25.4.4.6 Promise.resolve(x)

// 25.4.4.1 Promise.all(iterable)

// 25.4.4.4 Promise.race(iterable)

/* 136 */

// 25.4.1.5 NewPromiseCapability(C)

/* 137 */

/* 138 */

// fast case

// frozen object case

// collection type

// index

// first entry

// last entry

// size

// 23.1.3.1 Map.prototype.clear()

// 23.2.3.2 Set.prototype.clear()

// 23.1.3.3 Map.prototype.delete(key)

// 23.2.3.4 Set.prototype.delete(value)

// 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)

// 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)

/* , that = undefined */

// revert to the last existing entry

// 23.1.3.7 Map.prototype.has(key)

// 23.2.3.7 Set.prototype.has(value)

// change existing entry

// <- index

// <- key

// <- previous entry

// <- next entry

// add to index

// add .keys, .values, .entries, [@@iterator]

// 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11

// kind

// get next entry

// return step by kind

// or finish the iteration

// add [@@species], 23.1.2.2, 23.2.2.2

/* 139 */

// collection id

// leak store for uncaught frozen objects

// 23.3.3.2 WeakMap.prototype.delete(key)

// 23.4.3.3 WeakSet.prototype.delete(value)

// 23.3.3.4 WeakMap.prototype.has(key)

// 23.4.3.4 WeakSet.prototype.has(value)

/* 140 */

// https://tc39.github.io/ecma262/#sec-toindex

/* 141 */

// all object keys, includes non-enumerable and symbols

/* 142 */

// https://github.com/tc39/proposal-string-pad-start-end

/* 143 */

/* 144 */

/* 145 */

/* 146 */

// DOM APIs, for completeness

// Does not start the time, just sets up the members needed.

// setimmediate attaches itself to the global object

// On some exotic environments, it's not clear which object `setimmediate` was

// able to install onto.  Search each possibility in the same order as the

// `setimmediate` library.

/* 147 */

// shim for using process in browser

// cached from whatever global is present so that test runners that stub it

// don't break things.  But we need to wrap it in a try catch in case it is

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// function because try/catches deoptimize in certain engines.

//normal enviroments in sane situations

// if setTimeout wasn't available but was latter defined

// when when somebody has screwed with setTimeout but no I.E. maddness

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// if clearTimeout wasn't available but was latter defined

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// v8 likes predictible objects

// empty string to avoid regexp issues

/* 148 */

/* 149 */

// DEPRECATED - use componentInstance.getReactContainerStyle or componentInstance.getReactContainerClasses instead

// so user can have access to the react container, to add css class or style

// fixed fragmentsFuncRendererCreateDestroy funcRendererWithNan (changeDetectionService too for NaN)

// instance not ready yet - wait for it

// grab hold of the actual instance created

// we only do this for cellRenderers

// we've no way of knowing if a component returns null without rendering it first

// so we render it to markup and check the output - if it'll be null we know and won't timeout

// waiting for a component that will never be created

// if a user is doing anything that uses useLayoutEffect (like material ui) then it will throw and we

// can't do anything to stop it; this is just a warning and has no effect on anything so just suppress it

// for this single operation

/*
    * fallback methods - these will be invoked if a corresponding instance method is not present
    * for example if refresh is called and is not available on the component instance, then refreshComponent on this
    * class will be invoked instead
    *
    * Currently only refresh is supported
    */

/* 150 */

// ensure prop updates have happened

/* 151 */

/* 152 */

/* 153 */

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */

/* 154 */

/* 155 */

// Only Node.JS has a process variable that is of [[Class]] process

// For browsers use XHR adapter

/* Ignore */

/**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */

/* 156 */

// Add responseType to request if needed

// HTTP basic authentication

// Set the request timeout in MS

// Listen for ready state

// The request errored out and we didn't get a response, this will be

// handled by onerror instead

// With one exception: request that using file: protocol, most browsers

// will return status as 0 even though it's a successful request

// Clean up request

// Handle browser request cancellation (as opposed to a manual cancellation)

// Handle low level network errors

// Real errors are hidden from us by the browser

// onerror should only fire if it's a network error

// Handle timeout

// Add xsrf header

// This is only done if running in a standard browser environment.

// Specifically not if we're in a web worker, or react-native.

// Add headers to the request

// Remove Content-Type if data is undefined

// Otherwise add header to the request

// Add withCredentials to request if needed

// Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.

// But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.

// Handle progress if needed

// Not all browsers support upload events

// Handle cancellation

// Send the request

/* 157 */

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */

/* 158 */

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */

/* 159 */

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

/* 160 */

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

/* 161 */

/* 162 */

/* 163 */

/* 164 */

/* 165 */

/* 166 */

/* 167 */

/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as a safe reference for `undefined` in pre-ES5 environments. */

// Use `util.types` for Node.js 10+.

// Legacy `process.binding('util')` for Node.js < 10.

/** Used as the semantic version number. */

/*--------------------------------------------------------------------------*/

/**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */

/**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */

/**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */

/**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */

/**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */

/**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */

/**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */

/**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */

/**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */

/**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */

/**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */

/**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */

/**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */

/**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */

/**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

/**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */

/**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

/**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

/**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

/**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */

/**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */

/**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */

/**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */

/**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */

/**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */

/**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */

/**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */

/**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */

/**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */

/**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */

/**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */

/**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

/**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */

/**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */

/**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */

/**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */

// Latin-1 Supplement block.

// Latin Extended-A block.

/**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */

/**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */

/**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */

/**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */

/**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */

/**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */

/**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */

/**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */

/**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */

/**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */

/**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */

/**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */

/**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

/**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

/**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */

/**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */

/**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */

/** Built-in constructor references. */

/** Used for built-in method references. */

/*------------------------------------------------------------------------*/

/**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */

/**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */

/**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */

// No operation performed.

/**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */

/**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */

/**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */

/**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */

/**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */

/**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */

/**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */

/**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */

/**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */

/**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */

/**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */

/**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */

/**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */

/**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */

/**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */

// Safari 9 has enumerable `arguments.length` in strict mode.

// Node.js 0.10 has enumerable non-index properties on buffers.

// PhantomJS 2 has enumerable non-index properties on typed arrays.

// Skip index properties.

/**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */

/**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */

/**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */

/**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */

/**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */

/**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */

/**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */

/**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */

/**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */

/**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */

/**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */

/**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */

// Add properties assigned by `RegExp#exec`.

/**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */

/**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */

/**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */

/**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */

/**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */

/**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */

/**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */

// Check for circular references and return its corresponding clone.

// Recursively populate clone (susceptible to call stack limits).

/**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */

/**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */

/**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */

/**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */

/**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */

/**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */

/**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */

/**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */

/**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */

/**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */

/**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */

// Ensure wrappers are instances of `baseLodash`.

// Ensure `LazyWrapper` is an instance of `baseLodash`.

// Add methods to `Hash`.

/**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

/**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */

/**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

/**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */

// Add methods to `ListCache`.

/**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

/**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */

/**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

/**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */

// Add methods to `MapCache`.

/**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

/**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */

/**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

/**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */

// Add methods to `SetCache`.

/**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */

// Add methods to `Stack`.

/**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

/**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */

/**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

/**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */

/**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */

/**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */

/**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */

/**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */

/**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */

/**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */

// Recursively flatten arrays (susceptible to call stack limits).

/**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */

/**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */

/**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */

/**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */

/**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */

/**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */

/**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */

/**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */

/**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */

/**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */

/**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */

/**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */

/**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */

/**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */

/**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */

// Coerce booleans to `1` or `0` and dates to milliseconds.

// Invalid dates are coerced to `NaN`.

// Coerce regexes to strings and treat strings, primitives and objects,

// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring

// for more details.

// Assume cyclic values are equal.

// Recursively compare objects (susceptible to call stack limits).

// Check that cyclic values are equal.

/**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */

/**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */

/**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */

/**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */

/**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */

// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.

// See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.

/**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */

/**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */

/**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */

/**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */

/**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */

/**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */

/**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */

// Recursively merge objects and arrays (susceptible to call stack limits).

/**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */

/**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */

/**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */

// Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications

// that causes it, under certain circumstances, to provide the same value for

// `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247

// This also ensures a stable sort in V8 and other engines.

// See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.

/**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */

/**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */

/**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */

/**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */

/**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */

/**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */

/**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */

/**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */

// Leverage the exponentiation by squaring algorithm for a faster repeat.

// See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.

/**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */

/**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */

/**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */

/**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */

/**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */

/**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */

/**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */

/**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */

/**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */

/**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */

/**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */

/**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */

/**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */

// Exit early for strings to avoid a performance hit in some environments.

/**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */

/**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */

/**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */

/**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */

/**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */

/**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */

/**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */

/**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */

/**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */

/**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */

/**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */

/**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */

/**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */

/**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */

/**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */

/**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */

/**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */

/**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */

/**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */

/**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */

/**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */

/**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */

/**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */

/**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */

/**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */

/**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */

/**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */

/**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */

/**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */

// Use a `switch` statement to work with class constructors. See

// http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist

// Mimic the constructor's `return` behavior.

// See https://es5.github.io/#x13.2.2 for more details.

/**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */

/**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */

/**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */

/**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */

/**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */

/**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */

/**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */

/**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */

/**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */

/**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */

/**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */

/**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */

// Ensure the sign of `-0` is preserved.

/**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */

/**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */

/**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */

/**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */

/**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */

/**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */

// Exit early if metadata can't be merged.

// Use source `thisArg` if available.

// Set when currying a bound function.

// Compose partial right arguments.

// Use source `argPos` if available.

// Use source `ary` if it's smaller.

// Use source `arity` if one is not provided.

// Use source `func` and merge bitmasks.

/**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */

/**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */

/**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */

/**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */

// Ignore non-index properties.

// Recursively compare arrays (susceptible to call stack limits).

/**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */

/**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */

/**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */

/**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */

/**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */

/**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */

/**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */

/**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */

/**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */

/**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */

/**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */

/**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */

/**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */

/**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */

/**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */

/**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */

/**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */

/**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */

/**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */

/**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */

/**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */

/**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

/**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */

/**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */

/**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */

/**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */

/**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */

/**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */

/**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */

/**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */

/**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */

/**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */

/**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */

/**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */

/**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */

/**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */

/* . */

/**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */

/**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */

/**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */

/**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */

/**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */

/**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */

/**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */

/**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */

/**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */

/**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */

/**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */

/**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */

/**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */

/**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */

/**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */

/**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */

/**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */

/**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */

/**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */

/**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */

/**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */

/**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */

/**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */

/**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */

/**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */

/**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */

/**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */

/**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */

/**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */

/**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */

/**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */

/**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */

/**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */

/**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */

/**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */

/**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */

/**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */

/**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */

/**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */

/**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */

/**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */

/**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */

/**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */

/**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */

/**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */

/**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */

/**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */

/**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */

/**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */

/**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */

/**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */

/**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */

/**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */

/**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */

/**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */

/**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */

/**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */

// Either this is the first call, activity has stopped and we're at the

// trailing edge, the system time has gone backwards and we're treating

// it as the trailing edge, or we've hit the `maxWait` limit.

// Restart the timer.

// Only invoke if we have `lastArgs` which means `func` has been

// debounced at least once.

// Reset any `maxWait` timer.

// Start the timer for the trailing edge.

// Handle invocations in a tight loop.

/**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */

/**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */

/**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */

// Expose `MapCache`.

/**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */

/**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */

/**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */

/**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */

/**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */

/**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */

/**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */

/**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */

/**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */

/**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */

/**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */

/**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */

/**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */

/**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */

/**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */

/**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */

// The use of `Object#toString` avoids issues with the `typeof` operator

// in Safari 9 which returns 'object' for typed arrays and other constructors.

/**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */

/**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */

/**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */

/**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */

/**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */

/**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */

/**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */

/**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */

/**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */

/**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */

/**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */

/**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */

/**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */

/**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */

/**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */

/**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */

/**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */

/**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */

/**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */

/**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */

/**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */

/**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */

/**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */

/**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */

/**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */

/**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */

/**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */

/**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */

/**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */

/**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */

/**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */

/**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */

/**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */

/**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */

/**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */

/**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */

/**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */

/**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */

/**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */

/**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */

/**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */

/**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */

/**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */

/**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */

/**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */

/**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */

/**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */

/**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */

/**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */

/**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */

/**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */

/**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */

/**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */

/**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */

/**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */

/**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */

/**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */

/**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */

/**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */

/**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */

/**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */

/**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */

/**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */

/**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */

/**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */

/**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */

/**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */

/**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */

/**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */

/**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */

/**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */

/**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */

/**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */

/**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */

/**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */

/**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */

/**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */

/**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */

/**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */

/**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */

/**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */

/**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */

/**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */

/**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */

/**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */

/**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */

/**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */

/**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */

/**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */

/**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */

// Add methods that return wrapped values in chain sequences.

/**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */

/**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */

/**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */

/**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */

/**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */

/**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */

/**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */

/**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */

/**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */

/**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */

/**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */

/**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */

/**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */

/**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */

/**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */

/**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */

/**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */

/**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */

/**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */

/**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */

/**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */

/**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */

/**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */

/**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */

/**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */

/**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */

/**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */

/**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */

/**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */

/**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */

/**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */

/**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */

/**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */

/**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */

/**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */

/**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */

/**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */

/**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */

/**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */

/**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */

/**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */

/**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */

/**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */

/**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */

/**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */

/**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */

/**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */

/**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */

/**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */

/**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */

/**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */

/**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */

/**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */

/**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */

/**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */

/**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */

/**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */

/**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */

/**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */

/**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */

/**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */

// Add aliases.

// Add methods to `lodash.prototype`.

// Add methods that return unwrapped values in chain sequences.

/**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */

/**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */

/**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */

/**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */

/**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */

/**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */

/**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */

/**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */

/**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */

/**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */

/**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */

/**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */

/**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */

/**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */

/**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */

/**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */

/**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */

/**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */

/**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */

/**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */

// An `NaN` primitive is the only value that is not equal to itself.

// Perform the `toStringTag` check first to avoid errors with some

// ActiveX objects in IE.

/**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */

/**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */

/**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */

/**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */

/**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */

/**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */

/**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */

/**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */

/**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */

/**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */

/**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */

/**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */

/**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */

/**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */

/**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */

/**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */

/**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */

/**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */

/**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */

/**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */

/**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */

/**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */

/**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */

// Ensure the loop is entered when path is empty.

/**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */

/**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */

/**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */

/**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */

/**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */

/**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */

/**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */

/**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */

/**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */

// Based on John Resig's `tmpl` implementation

// (http://ejohn.org/blog/javascript-micro-templating/)

// and Laura Doktorova's doT.js (https://github.com/olado/doT).

// The JS engine embedded in Adobe products needs `match` returned in

// order to produce the correct `offset` value.

// Escape characters that can't be included in string literals.

// Replace delimiters with snippets.

// Cleanup code by stripping empty strings.

// Frame code as the function body.

// Provide the compiled function's source by its `toString` method or

// the `source` property as a convenience for inlining compiled templates.

/**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */

/**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */

/**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */

/**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */

/**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */

/**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */

/**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */

/**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */

// Assign default placeholders.

// Add `LazyWrapper` methods for `_.drop` and `_.take` variants.

// Add `LazyWrapper` methods that accept an `iteratee` value.

// Add `LazyWrapper` methods for `_.head` and `_.last`.

// Add `LazyWrapper` methods for `_.initial` and `_.tail`.

// Add `LazyWrapper` methods to `lodash.prototype`.

// Avoid lazy use if the iteratee has a "length" value other than `1`.

// Add `Array` methods to `lodash.prototype`.

// Map minified method names to their real names.

// Add methods to `LazyWrapper`.

/**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */

/**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */

/**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */

// Add chain sequence methods to the `lodash` wrapper.

/**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */

/**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */

/**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */

/**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */

/**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */

/**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */

// Add lazy aliases.

// Export lodash.

// Expose Lodash on the global object to prevent errors when Lodash is

// loaded by a script tag in the presence of an AMD loader.

// See http://requirejs.org/docs/errors.html#mismatch for more details.

// Use `_.noConflict` to remove Lodash from the global object.

/* 168 */

/* 169 */

/* 170 */

/* 171 */

/* 172 */

// ECMAScript 6 symbols shim

// 19.4.1.1 Symbol([description])

// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14

// 19.4.2.1 Symbol.for(key)

// 19.4.2.5 Symbol.keyFor(sym)

// 19.1.2.2 Object.create(O [, Properties])

// 19.1.2.4 Object.defineProperty(O, P, Attributes)

// 19.1.2.3 Object.defineProperties(O, Properties)

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)

// 19.1.2.7 Object.getOwnPropertyNames(O)

// 19.1.2.8 Object.getOwnPropertySymbols(O)

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives

// https://bugs.chromium.org/p/v8/issues/detail?id=3443

// 24.3.2 JSON.stringify(value [, replacer [, space]])

// MS Edge converts symbol values to JSON as {}

// WebKit converts symbol values to JSON as null

// V8 throws on boxed symbols

// IE8 returns string on undefined

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

// 19.4.3.5 Symbol.prototype[@@toStringTag]

// 20.2.1.9 Math[@@toStringTag]

// 24.3.3 JSON[@@toStringTag]

/* 173 */

/* 174 */

// all enumerable object keys, includes symbols

/* 175 */

/* 176 */

// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)

/* 177 */

// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)

/* 178 */

/* 179 */

// 19.1.2.9 Object.getPrototypeOf(O)

/* 180 */

// 19.1.2.14 Object.keys(O)

/* 181 */

/* 182 */

// 19.1.2.5 Object.freeze(O)

/* 183 */

// 19.1.2.17 Object.seal(O)

/* 184 */

// 19.1.2.15 Object.preventExtensions(O)

/* 185 */

// 19.1.2.12 Object.isFrozen(O)

/* 186 */

// 19.1.2.13 Object.isSealed(O)

/* 187 */

// 19.1.2.11 Object.isExtensible(O)

/* 188 */

// 19.1.3.1 Object.assign(target, source)

/* 189 */

// 19.1.3.10 Object.is(value1, value2)

/* 190 */

// 19.1.3.19 Object.setPrototypeOf(O, proto)

/* 191 */

// 19.1.3.6 Object.prototype.toString()

/* 192 */

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)

/* 193 */

// 19.2.4.2 name

/* 194 */

// 19.2.3.6 Function.prototype[@@hasInstance](V)

// for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

/* 195 */

// 18.2.5 parseInt(string, radix)

/* 196 */

// 18.2.4 parseFloat(string)

/* 197 */

// Number('+0x1') should be NaN, old V8 fix

// fast equal /^0b[01]+$/i

// fast equal /^0o[0-7]+$/i

// parseInt parses a string to a first unavailable symbol

// but ToNumber should return NaN if a string contains unavailable symbols

// ES3:

/* 198 */

// V8 ~ Android 4.3-

/* 199 */

// IE7-

/* 200 */

// 20.1.2.1 Number.EPSILON

/* 201 */

// 20.1.2.2 Number.isFinite(number)

/* 202 */

/* 203 */

// 20.1.2.4 Number.isNaN(number)

/* 204 */

// 20.1.2.5 Number.isSafeInteger(number)

/* 205 */

// 20.1.2.6 Number.MAX_SAFE_INTEGER

/* 206 */

// 20.1.2.10 Number.MIN_SAFE_INTEGER

/* 207 */

// 20.1.2.12 Number.parseFloat(string)

/* 208 */

// 20.1.2.13 Number.parseInt(string, radix)

/* 209 */

// 20.2.2.3 Math.acosh(x)

/* 210 */

// 20.2.2.5 Math.asinh(x)

// Tor Browser bug: Math.asinh(0) -> -0

/* 211 */

// 20.2.2.7 Math.atanh(x)

// Tor Browser bug: Math.atanh(-0) -> 0

/* 212 */

// 20.2.2.9 Math.cbrt(x)

/* 213 */

// 20.2.2.11 Math.clz32(x)

/* 214 */

// 20.2.2.12 Math.cosh(x)

/* 215 */

/* 216 */

// 20.2.2.16 Math.fround(x)

/* 217 */

/* 218 */

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])

/* 219 */

// 20.2.2.18 Math.imul(x, y)

// some WebKit versions fails with big numbers, some has wrong arity

/* 220 */

// 20.2.2.21 Math.log10(x)

/* 221 */

/* 222 */

// 20.2.2.22 Math.log2(x)

/* 223 */

/* 224 */

// 20.2.2.30 Math.sinh(x)

// V8 near Chromium 38 has a problem with very small numbers

/* 225 */

// 20.2.2.33 Math.tanh(x)

/* 226 */

// 20.2.2.34 Math.trunc(x)

/* 227 */

// length should be 1, old FF problem

// 21.1.2.2 String.fromCodePoint(...codePoints)

/* 228 */

// 21.1.2.4 String.raw(callSite, ...substitutions)

/* 229 */

// 21.1.3.25 String.prototype.trim()

/* 230 */

// 21.1.3.27 String.prototype[@@iterator]()

/* 231 */

// 21.1.3.3 String.prototype.codePointAt(pos)

/* 232 */

// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

/* , endPosition = @length */

/* 233 */

// 21.1.3.7 String.prototype.includes(searchString, position = 0)

/* , position = 0 */

/* 234 */

// 21.1.3.13 String.prototype.repeat(count)

/* 235 */

// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

/* 236 */

// B.2.3.2 String.prototype.anchor(name)

/* 237 */

// B.2.3.3 String.prototype.big()

/* 238 */

// B.2.3.4 String.prototype.blink()

/* 239 */

// B.2.3.5 String.prototype.bold()

/* 240 */

// B.2.3.6 String.prototype.fixed()

/* 241 */

// B.2.3.7 String.prototype.fontcolor(color)

/* 242 */

// B.2.3.8 String.prototype.fontsize(size)

/* 243 */

// B.2.3.9 String.prototype.italics()

/* 244 */

// B.2.3.10 String.prototype.link(url)

/* 245 */

// B.2.3.11 String.prototype.small()

/* 246 */

// B.2.3.12 String.prototype.strike()

/* 247 */

// B.2.3.13 String.prototype.sub()

/* 248 */

// B.2.3.14 String.prototype.sup()

/* 249 */

// 20.3.3.1 / 15.9.4.4 Date.now()

/* 250 */

/* 251 */

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

// PhantomJS / old WebKit has a broken implementations

/* 252 */

/* 253 */

/* 254 */

/* 255 */

/* 256 */

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)

/* 257 */

// 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)

/* , mapfn = undefined, thisArg = undefined */

// if object isn't iterable or it's array with default iterator - use simple case

/* 258 */

// WebKit Array.of isn't generic

// 22.1.2.3 Array.of( ...items)

/* 259 */

// 22.1.3.13 Array.prototype.join(separator)

// fallback for not array-like strings

/* 260 */

// fallback for not array-like ES3 strings and DOM objects

/* 261 */

// IE8-

// V8 bug

// Old WebKit

// 22.1.3.25 Array.prototype.sort(comparefn)

/* 262 */

// 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])

/* 263 */

// cross-realm fallback

/* 264 */

// 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])

/* 265 */

// 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])

/* 266 */

// 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])

/* 267 */

// 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])

/* 268 */

// 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])

/* 269 */

// 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])

/* 270 */

// 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])

/* , fromIndex = 0 */

/* 271 */

// 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])

/* , fromIndex = @[*-1] */

// convert -0 to +0

/* 272 */

/* 273 */

/* 274 */

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

// Shouldn't skip holes

/* 275 */

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

/* 276 */

/* 277 */

// RegExp constructor can alter flags and IsRegExp works correct with @@match

/* 278 */

// 21.2.5.14 RegExp.prototype.toString()

/* 279 */

// @@match logic

// `String.prototype.match` method

// https://tc39.github.io/ecma262/#sec-string.prototype.match

// `RegExp.prototype[@@match]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match

/* 280 */

// @@replace logic

// `String.prototype.replace` method

// https://tc39.github.io/ecma262/#sec-string.prototype.replace

// `RegExp.prototype[@@replace]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace

// NOTE: This is equivalent to

//   captures = result.slice(1).map(maybeToString)

// but for some reason `nativeSlice.call(result, 1, result.length)` (called in

// the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and

// causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

// https://tc39.github.io/ecma262/#sec-getsubstitution

// \d\d?

/* 281 */

// @@search logic

// `String.prototype.search` method

// https://tc39.github.io/ecma262/#sec-string.prototype.search

// `RegExp.prototype[@@search]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search

/* 282 */

// @@split logic

// based on es5-shim implementation, need to rework it

// If `separator` is not a regex, use native split

// Avoid an infinite loop

// `String.prototype.split` method

// https://tc39.github.io/ecma262/#sec-string.prototype.split

// `RegExp.prototype[@@split]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split

// NOTE: This cannot be properly polyfilled in engines that don't support

// the 'y' flag.

/* 283 */

// Node.js

// Promise.resolve without an argument throws an error in LG WebOS 2

// strange IE + webpack dev server bug - use .call(global)

/* 284 */

/* 285 */

// 23.1 Map Objects

// 23.1.3.6 Map.prototype.get(key)

// 23.1.3.9 Map.prototype.set(key, value)

/* 286 */

// 23.2 Set Objects

// 23.2.3.1 Set.prototype.add(value)

/* 287 */

// 23.3.3.3 WeakMap.prototype.get(key)

// 23.3.3.5 WeakMap.prototype.set(key, value)

// IE11 WeakMap frozen keys fix

// store frozen objects on internal weakmap shim

/* 288 */

// 23.4 WeakSet Objects

// 23.4.3.1 WeakSet.prototype.add(value)

/* 289 */

// 24.1.3.1 ArrayBuffer.isView(arg)

// 24.1.4.3 ArrayBuffer.prototype.slice(start, end)

// FF fix

/* 290 */

/* 291 */

/* 292 */

/* 293 */

/* 294 */

/* 295 */

/* 296 */

/* 297 */

/* 298 */

/* 299 */

/* 300 */

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)

// MS Edge argumentsList argument is optional

/* 301 */

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])

/* , newTarget */

// w/o altered newTarget, optimization for 0-4 arguments

// w/o altered newTarget, lot of arguments case

// with altered newTarget, not support built-in constructors

/* 302 */

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false

/* 303 */

// 26.1.4 Reflect.deleteProperty(target, propertyKey)

/* 304 */

// 26.1.5 Reflect.enumerate(target)

// keys

/* 305 */

// 26.1.6 Reflect.get(target, propertyKey [, receiver])

/* , receiver */

/* 306 */

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)

/* 307 */

// 26.1.8 Reflect.getPrototypeOf(target)

/* 308 */

// 26.1.9 Reflect.has(target, propertyKey)

/* 309 */

// 26.1.10 Reflect.isExtensible(target)

/* 310 */

// 26.1.11 Reflect.ownKeys(target)

/* 311 */

// 26.1.12 Reflect.preventExtensions(target)

/* 312 */

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])

/* 313 */

// 26.1.14 Reflect.setPrototypeOf(target, proto)

/* 314 */

/* 315 */

// https://github.com/tc39/Array.prototype.includes

/* 316 */

/* 317 */

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap

/* 318 */

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

/* 319 */

/* 320 */

/* , fillString = ' ' */

/* 321 */

/* 322 */

/* 323 */

/* 324 */

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim

/* 325 */

/* 326 */

/* 327 */

/* 328 */

/* 329 */

/* 330 */

// https://github.com/tc39/proposal-object-getownpropertydescriptors

/* 331 */

/* 332 */

// https://github.com/tc39/proposal-object-values-entries

/* 333 */

/* 334 */

/* 335 */

/* 336 */

// https://github.com/tc39/proposal-promise-finally

/* 337 */

/* 338 */

// ie9- setTimeout & setInterval additional parameters fix

/* 339 */

/* 340 */

// TODO: Not spec compliant, should be false.

/* 341 */

// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.

// The ._invoke method unifies the implementations of the .next,

// .throw, and .return methods.

// Be forgiving, per 25.3.3.3.3 of the spec:

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume

// Call delegate.iterator[context.method](context.arg) and handle the

// result, either by returning a { value, done } result from the

// delegate iterator, or by modifying context.method and context.arg,

// setting context.delegate to null, and returning the ContinueSentinel.

// A .throw or .return when the delegate iterator has no .throw

// method always terminates the yield* loop.

// Note: ["return"] must be used for ES3 parsing compatibility.

// If the delegate iterator has a return method, give it a

// chance to clean up.

// If maybeInvokeDelegate(context) changed context.method from

// "return" to "throw", let that override the TypeError below.

// Re-yield the result returned by the delegate method.

// The delegate iterator is finished, so forget it and continue with

// the outer generator.

// Assign the result of the finished delegate to the temporary

// variable specified by delegate.resultName (see delegateYield).

// Resume execution at the desired location (see delegateYield).

// If context.method was "throw" but the delegate handled the

// exception, let the outer generator proceed normally. If

// context.method was "next", forget context.arg since it has been

// "consumed" by the delegate iterator. If context.method was

// "return", allow the original .return call to continue in the

// outer generator.

// Define Generator.prototype.{next,throw,return} in terms of the

// unified ._invoke helper method.

// Setting context._sent for legacy support of Babel's

// function.sent implementation.

// If an exception is thrown from innerFn, we leave state ===

// GenStateExecuting and loop back for another invocation.

// Dispatch the exception by looping back around to the

// context.dispatchException(context.arg) call above.

// Try/catch helper to minimize deoptimizations. Returns a completion

// record like context.tryEntries[i].completion. This interface could

// have been (and was previously) designed to take a closure to be

// invoked without arguments, but in all the cases we care about we

// already have an existing method we want to call, so there's no need

// to create a new function object. We can even get away with assuming

// the method takes exactly one argument, since that happens to be true

// in every case, so we don't have to touch the arguments object. The

// only additional allocation required is the completion record, which

// has a stable shape and so hopefully should be cheap to allocate.

// Dummy constructor functions that we use as the .constructor and

// .constructor.prototype properties for functions that return Generator

// objects. For full spec compliance, you may wish to configure your

// minifier not to mangle the names of these two functions.

// This is a polyfill for %IteratorPrototype% for environments that

// don't natively support it.

// This environment has a native %IteratorPrototype%; use it instead

// of the polyfill.

// Helper for defining the .next, .throw, and .return methods of the

// Iterator interface in terms of a single ._invoke method.

// Define the unified helper method that is used to implement .next,

// .throw, and .return (see defineIteratorMethods).

// When a yielded Promise is resolved, its final value becomes

// the .value of the Promise<{value,done}> result for the

// current iteration.

// If a rejected Promise was yielded, throw the rejection back

// into the async generator function so it can be handled there.

// If enqueue has been called before, then we want to wait until

// all previous Promises have been resolved before calling invoke,

// so that results are always delivered in the correct order. If

// enqueue has not been called before, then it is important to

// call invoke immediately, without waiting on a callback to fire,

// so that the async generator function has the opportunity to do

// any necessary setup in a predictable way. This predictability

// is why the Promise constructor synchronously invokes its

// executor callback, and why async functions synchronously

// execute code before the first await. Since we implement simple

// async functions in terms of async generators, it is especially

// important to get this right, even though it requires care.

// Avoid propagating failures to Promises returned by later

// invocations of the iterator.

// The root entry object (effectively a try statement without a catch

// or a finally block) gives us a place to store values thrown from

// locations where there is no enclosing try statement.

// Return an iterator with no values.

// Regardless of whether this script is executing as a CommonJS module

// or not, return the runtime object so that we can declare the variable

// regeneratorRuntime in the outer scope, which allows this module to be

// injected easily by `bin/regenerator --include-runtime script.js`.

// For the native GeneratorFunction constructor, the best we can

// do is to check its .name property.

// Within the body of any async function, `await x` is transformed to

// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test

// `hasOwn.call(value, "__await")` to determine if the yielded value is

// meant to be awaited.

// Note that simple async functions are implemented on top of

// AsyncIterator objects; they just return a Promise for the value of

// the final result produced by the iterator.

// A Generator should always return itself as the iterator object when the

// @@iterator function is called on it. Some browsers' implementations of the

// iterator prototype chain incorrectly implement this, causing the Generator

// object to not be returned from this call. This ensures that doesn't happen.

// See https://github.com/facebook/regenerator/issues/274 for more details.

// Rather than returning an object with a next method, we keep

// things simple and return the next function itself.

// To avoid creating an additional object, we just hang the .value

// and .done properties off the next function object itself. This

// also ensures that the minifier will not anonymize the function.

// Resetting context._sent for legacy support of Babel's

// Not sure about the optimal order of these conditions:

// If the dispatched exception was caught by a catch block,

// then let that catch block handle the exception normally.

// Exception thrown outside of any try block that could handle

// it, so set the completion value of the entire function to

// throw the exception.

// Ignore the finally entry if control is not jumping to a

// location outside the try/catch block.

// The context.catch method must only be called with a location

// argument that corresponds to a known catch block.

// Deliberately forget the last sent value so that we don't

// accidentally pass it on to the delegate.

// This module should not be running in strict mode, so the above

// assignment should always work unless something is misconfigured. Just

// in case runtime.js accidentally runs in strict mode, we can escape

// strict mode using a global Function call. This could conceivably fail

// if a Content Security Policy forbids using Function, but in that case

// the proper solution is to fix the accidental strict mode problem. If

// you've misconfigured your bundler to force strict mode and applied a

// CSP to forbid Function, and you're not willing to fix either of those

// problems, please detail your unique predicament in a GitHub issue.

/* 342 */

/* 343 */

// https://github.com/tc39/proposal-global

/* 344 */

// prevent global pollution for namespaces

// make static versions for prototype methods

// export proto methods to core.%CONSTRUCTOR%.methods.%NAME%

/* 345 */

/* 346 */

/* 347 */

/* 348 */

/* 349 */

/* 350 */

/* 351 */

/* 352 */

/* 353 */

/* 354 */

/* 355 */

/**
 *
 *
 * @author Jerry Bendy <jerry@icewingcc.com>
 * @licence MIT
 *
 */

// There is a bug in safari 10.1 (and earlier) that incorrectly decodes `%2B` as an empty space and not a plus.

// Fix bug in Edge which cannot encode ' &' correctly

/**
     * Make a URLSearchParams instance
     *
     * @param {object|string|URLSearchParams} search
     * @constructor
     */

// support construct object with another URLSearchParams instance

/**
     * Appends a specified key/value pair as a new search parameter.
     *
     * @param {string} name
     * @param {string} value
     */

// if `search` is an array, treat it as a sequence

// remove first '?'

/**
     * Deletes the given search parameter, and its associated value,
     * from the list of all search parameters.
     *
     * @param {string} name
     */

/**
     * Returns the first value associated to the given search parameter.
     *
     * @param {string} name
     * @returns {string|null}
     */

/**
     * Returns all the values association with a given search parameter.
     *
     * @param {string} name
     * @returns {Array}
     */

/**
     * Returns a Boolean indicating if such a search parameter exists.
     *
     * @param {string} name
     * @returns {boolean}
     */

/**
     * Sets the value associated to a given search parameter to
     * the given value. If there were several values, delete the
     * others.
     *
     * @param {string} name
     * @param {string} value
     */

/**
     * Returns a string containg a query string suitable for use in a URL.
     *
     * @returns {string}
     */

/*
     * Apply polifill to global object and append other prototype into it
     */

// Safari 10.0 doesn't support Proxy, so it won't extend URLSearchParams on safari 10.0

/**
     *
     * @param {function} callback
     * @param {object} thisArg
     */

/**
     * Sort all name-value pairs
     */

/**
     * Returns an iterator allowing to go through all keys of
     * the key/value pairs contained in this object.
     *
     * @returns {function}
     */

/**
     * Returns an iterator allowing to go through all values of
     * the key/value pairs contained in this object.
     *
     * @returns {function}
     */

/**
     * Returns an iterator allowing to go through all key/value
     * pairs contained in this object.
     *
     * @returns {function}
     */

/* 356 */

/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* 357 */

/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

/* 358 */

/* 359 */

/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* 360 */

// From the spec: "Wait until any invocations of this algorithm started before this one have completed."

// So if we're currently running a task, we'll need to delay this invocation.

// Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a

// "too much recursion" error.

// Installs an event handler on `global` for the `message` event: see

// * https://developer.mozilla.org/en/DOM/window.postMessage

// * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

// Don't get fooled by e.g. browserify environments.

// The test against `importScripts` prevents this implementation from being installed inside a web worker,

// where `global.postMessage` means something completely different and can't be used for this purpose.

// For web workers, where supported

// For IE 6–8

// Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted

// into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.

// For non-IE10 modern browsers

// Callback can either be a function or a string

// Copy function arguments

// Store and register the task

/* 361 */

/* 362 */

// Module

// Exports

/* 363 */

/* 364 */

/* 365 */

/* 366 */

/* 367 */

/* 368 */

/* 369 */

/* 370 */

// only cell renderers and tool panel should use fallback methods

// Define DetailCellRenderer and ReactFrameworkOverrides here to avoid circular dependency

// should never happen, means master/detail module not loaded

// when disposed, current is null, so nothing to do, and the resize observer will

// be disposed of soon

/* 371 */

// remove props in IDataParams but not BaseDateParams

/* 372 */

/* 373 */

/* 374 */

/* 375 */

/**
 * @license React
 * react-dom-server-legacy.browser.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* 376 */

/**
 * @license React
 * react-dom-server.browser.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* 377 */

// remove props in IFilterParams but not CustomFilterProps

/* 378 */

/* 379 */

/* 380 */

/* 381 */

/* 382 */

/* 383 */

// destroyed?

// if the grid has been destroyed in the meantime just resolve

// last check - we check if this is a null value being rendered - we do this last as using SSR to check the value

// can mess up contexts

/* 384 */

// force new instance when grid tries to refresh

// we do not memo() here, as it would stop the forwardRef working

/* 385 */

// initialise the extra components

// we wait for initialised before rending the children, so GridComp has created and registered with it's

// GridCtrl before we create the child GridBodyComp. Otherwise the GridBodyComp would initialise first,

// before we have set the the Layout CSS classes, causing the GridBodyComp to render rows to a grid that

// doesn't have it's height specified, which would result if all the rows getting rendered (and if many rows,

// hangs the UI)

/* 386 */

/* 387 */

/* 388 */

// centre only

// pinned only

/* 389 */

/* 390 */

// js comps

// add drag handling, must be done after component is added to the dom

/* 391 */

/* 392 */

// We skip when it's un-setting

/* 393 */

// Keep a record of the rowCtrls in case we need to reset the Dom order.

/* 394 */

// puts autoHeight onto full with detail rows. this needs trickery, as we need

// the HTMLElement for the provided Detail Cell Renderer, however the Detail Cell Renderer

// could be a stateless React Func Comp which won't work with useRef, so we need

// to poll (we limit to 10) looking for the Detail HTMLElement (which will be the only

// child) after the fullWidthCompDetails is set.

// I think this looping could be avoided if we use a ref Callback instead of useRef,

// because React is asynchronous, it's possible the RowCtrl is no longer a valid RowCtrl. This can

// happen if user calls two API methods one after the other, with the second API invalidating the rows

// the first call created. Thus the rows for the first call could still get created even though no longer needed.

// the rowTop is managed by state, instead of direct style manipulation by rowCtrl (like all the other styles)

// as we need to have an initial value when it's placed into he DOM for the first time, for animation to work.

// i found using React for managing classes at the row level was to slow, as modifying classes caused a lot of

// React code to execute, so avoiding React for managing CSS Classes made the grid go much faster.

// if we don't maintain the order, then cols will be ripped out and into the dom

// when cols reordered, which would stop the CSS transitions from working

/* 395 */

// cellEditor is written to be a popup editor, however colDef.cellEditorPopup is not set

// cellEditor is a popup and is trying to position itself the deprecated way

// we cannot set state inside render, so hack is to do it in next VM turn

// if not updating renderDetails, do nothing

// increasing the render key forces the refresh. this is undocumented (for React users,

// we don't document the refresh method, instead we tell them to act on new params).

// however the GroupCellRenderer has this logic in it and would need a small refactor

// to get it working without using refresh() returning false. so this hack staying in,

// in React if refresh() is implemented and returns false (or undefined), we force a refresh

// start editing

// stop editing

// if we're using the proxy, we have to manually clear the ref

// Restore focus to the cell if it was focused before and not editing.

// If it is editing then it is likely the focus was moved to the editor and we should not move it back.

/* 396 */

/* 397 */

/** This should only be used a last resort for working around StrictMode!
 * Currently only used for Popup Editor due to our approach of showing a popup.
 */

// only execute the effect first time around

// this forces one render after the effect is run

// if the comp didn't render since the useEffect was called,

// we know it's the dummy React cycle

// otherwise this is not a dummy destroy, so call the destroy func

/* 398 */

// create or refresh JS cell renderer

// if not showing comp, destroy any existing one and return

// attempt refresh if refresh method exists

// if refresh worked, nothing else to do

// if refresh didn't work, we destroy it and continue, so new cell renderer created below

// this effect makes sure destroyCellRenderer gets called when the

// component is destroyed. as the other effect only updates when there

// is a change in state

/* 399 */

/* 400 */

// Clean up after both refs have been removed

/* 401 */

/* 402 */

// *** Hooks ***

/** Hook to allow custom cell editor component callbacks to be provided to the grid */

/** Hook to allow custom floating filter component callbacks to be provided to the grid */

/* 403 */

/**
 * Function to retrieve the React component from an instance returned by the grid.
 * @param wrapperComponent Instance component from the grid
 * @param callback Callback which is provided the underlying React custom component
 */

/* 404 */

/* 405 */

/* 406 */

/* 407 */

/* 408 */

/* 409 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// Important!

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

/* 410 */

/* 411 */

/* 412 */

/* 413 */

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */

// Copy axios.prototype to instance

// Copy context to instance

// Create the default instance to be exported

// Expose Axios class to allow class inheritance

// Factory for creating new instances

// Expose Cancel & CancelToken

// Expose all/spread

// Allow use of default import syntax in TypeScript

/* 414 */

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

/* 415 */

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */

// Allow for axios('example/url'[, config]) a la fetch API

// Hook up interceptors middleware

// Provide aliases for supported request methods

/*eslint func-names:0*/

/* 416 */

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */

/* 417 */

/**
 * Throws a `Cancel` if cancellation has been requested.
 */

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */

// Support baseURL config

// Ensure headers exist

// Transform request data

// Flatten headers

// Transform response data

/* 418 */

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */

/* 419 */

/* 420 */

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */

/* 421 */

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

// Standard

// Microsoft

// Mozilla

// Axios

/* 422 */

// Headers whose duplicates are ignored by node

// c.f. https://nodejs.org/api/http.html#http_message_headers

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

/* 423 */

/**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */

// urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

// IE needs attribute set twice to normalize properties

// Standard browser envs have full support of the APIs needed to test

// whether the request URL is of the same origin as current location.

/* 424 */

/* 425 */

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

// A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).

// RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed

// by any combination of letters, digits, plus, period, or hyphen.

/* 426 */

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

/* 427 */

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */

/* 428 */

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

/* 429 */

/* 430 */

/* 431 */

// module.parent = undefined by default

/* 432 */

/* 433 */

/* 434 */

/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* 435 */

// EXTERNAL MODULE: ./node_modules/react/index.js

// getSnapshotBeforeUpdate(prevProps) {

//   let nextStatus = null

//   if (prevProps !== this.props) {

//     const { status } = this.state

//     if (this.props.in) {

//       if (status !== ENTERING && status !== ENTERED) {

//         nextStatus = ENTERING

//       }

//     } else {

//       if (status === ENTERING || status === ENTERED) {

//         nextStatus = EXITING

//   }

//   return { nextStatus }

// TODO: remove fallback for next major

// nextStatus will always be ENTERING or EXITING.

// no enter animation skip right to ENTERED

// if we are mounting and running this it means appear _must_ be set

// no exit animation skip right to EXITED

// This shouldn't be necessary, but there are weird race conditions with

// setState callbacks and unmounting in testing, so always make sure that

// we can cancel any pending setState callbacks after we unmount.

// allows for nested Transitions

// Name the function so it is clearer in the documentation

/* harmony default export */

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js

// CONCATENATED MODULE: ./node_modules/react-transition-group/esm/utils/ChildMapping.js

/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */

// run the map function here instead so that the key is the computed one

/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */

// For each key of `next`, the list of keys to insert before that key in

// the combined list

// Finally, add the keys which didn't appear before any key in `next`

// item is new (entering)

// item hasn't changed transition states

// copy over the last transition props;

// console.log('unchanged', key)

// item is old (exiting)

// console.log('leaving', key)

// console.log('entering', key)

// CONCATENATED MODULE: ./node_modules/react-transition-group/esm/TransitionGroup.js

// Initial children should all be entering, dependent on appear

// node is `undefined` when user provided `nodeRef` prop

/**
   * Enqueue the event at the end of the call stack
   * Doing so let the user call toast as follow:
   * toast('1')
   * toast('2')
   * toast('3')
   * Without setTimemout the code above will not work
   */

/**
   * The animation delay which determine when to close the toast
   */

/**
   * Whether or not the animation is running or paused
   */

/**
   * Func to close the current toast
   */

/**
   * Support rtl content
   */

/**
   * Optional type : info, success ...
   */

/**
   * Hide or not the progress bar
   */

/**
   * Optionnal className
   */

/**
   * Controlled progress value
   */

/**
   * Tell wether or not controlled progress bar is used
   */

// prevent false positif during a toast click

// Maybe I could bind the event in the ToastContainer and rely on delegation

// prevent toast from closing when user drags the toast

// Check for multi-container and also for duplicate toastId

// Maybe it would be better to extract it

// ⚠️ if no options.key, this.toastKey - 1 is assigned

// add closeToast function to react component only

// group toast by position

/**
   * Set toast position
   */

/**
   * Disable or set autoClose delay
   */

/**
   * Disable or set a custom react element for the close button
   */

/**
   * Hide or not progress bar when autoClose is enabled
   */

/**
   * Pause toast duration on hover
   */

/**
   * Dismiss toast on click
   */

/**
   * Newest on top
   */

/**
   * An optional className
   */

/**
   * An optional style
   */

/**
   * An optional className for the toast
   */

/**
   * An optional className for the toast body
   */

/**
   * An optional className for the toast progress bar
   */

/**
   * An optional style for the toast progress bar
   */

/**
   * Define enter and exit transition using react-transition-group
   */

/**
   * Support rtl display
   */

/**
   * Allow toast to be draggable
   */

/**
   * The percentage of the toast's width it takes for a drag to dismiss a toast
   */

/**
   * Pause the toast on focus loss
   */

/**
   * Show the toast only if it includes containerId and it's the same as containerId
   */

/**
   * Set id to handle multiple container
   */

/**
   * Set role attribute for the toast body
   */

/**
   * Fired when clicking inside toaster
   */

/**
 * Check whether any container is currently mounted in the DOM
 */

/**
 * Get the container by id. Returns the last container declared when no id is given.
 */

/**
 * Get the toast by id, given it's in the DOM, otherwise returns null
 */

/**
 * Merge provided options with the defaults settings and generate the toastId
 */

/**
 * Generate a random toastId
 */

/**
 * Generate a toastId or use the one provided
 */

/**
 * If the container is not mounted, the toast is enqueued and
 * the container lazy mounted
 */

/**
 * For each available type create a shortcut
 */

/**
 * Maybe I should remove warning in favor of warn, I don't know
 */

/**
 * Remove toast programmaticaly
 */

/**
 * return true if one container is displaying the toast
 */

// if you call toast and toast.update directly nothing will be displayed

// this is why I defered the update

/**
 * Used for controlled progress bar.
 */

/**
 * Track changes. The callback get the number of toast displayed
 */

/**
 * Configure the ToastContainer when lazy mounted
 */

/**
 * Wait until the ToastContainer is mounted to dispatch the toast
 * and attach isActive method
 */

// EXTERNAL MODULE: ./node_modules/@fortawesome/fontawesome-svg-core/index.es.js

// CONCATENATED MODULE: ./node_modules/@fortawesome/react-fontawesome/index.es.js

// Get CSS class list from a props object

// eslint-disable-next-line no-useless-escape

// Normalize icon arguments

// if the icon is null, there's nothing to do

// if the icon is an object and has a prefix and an icon name, return it

// if it's an array with length of two

// if it's a string, use it as the icon name

// creates an object with a key of key

// and a value of value

// if certain conditions are met

// if the value is a non-empty array

// or it's not an array but it is truthy

// then create the object with the key and the value

// if not, return an empty array

/* eslint-enable */

// CONCATENATED MODULE: ./node_modules/@fortawesome/free-solid-svg-icons/index.es.js

/*!
 * Font Awesome Free 5.15.1 by @fontawesome - https://fontawesome.com
 * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
 */

// CONCATENATED MODULE: ./src/toast.js

// CONCATENATED MODULE: ./node_modules/@restart/ui/esm/Button.js

// Ensure there's a href so Enter can trigger anchor button.

// explicitly undefined so that it overrides the props disabled in a spread

// e.g. <Tag {...props} {...hookProps} />

/**
   * Specify whether the feedback is for valid or invalid fields
   *
   * @type {('valid'|'invalid')}
   */

/** Display feedback as a tooltip. */

// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595

// CONCATENATED MODULE: ./node_modules/react-bootstrap/esm/Button.js

// eslint-disable-next-line jsx-a11y/label-has-for, jsx-a11y/label-has-associated-control

/**
   * The Form `ref` will be forwarded to the underlying element,
   * which means, unless it's rendered `as` a composite component,
   * it will be a DOM node, when resolved.
   *
   * @type {ReactRef}
   * @alias ref
   */

/**
   * Mark a form as having been validated. Setting it to `true` will
   * toggle any validation styles on the forms elements.
   */

// CONCATENATED MODULE: ./src/Spinner.js

//import { ServiceConfig } from '../config/ServerConfig'

//import { ApplicationProperties } from '../config/ApplicationProperties'

/* Cannot get final name for export "geoApi" in "./src/SpinnerEndPointsWhitelist.js" (known exports: endPointsWhiteList, known reexports: ) */

// adding 'X-Requested-With' header for every req to distinguish the normal web req and xhr req

// to handle the book marked url click.

// CONCATENATED MODULE: ./src/App.js

/* eslint-disable no-console */
